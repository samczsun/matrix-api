// Code generated by go-swagger; DO NOT EDIT.

package capabilities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetCapabilitiesReader is a Reader for the GetCapabilities structure.
type GetCapabilitiesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCapabilitiesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCapabilitiesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 429:
		result := NewGetCapabilitiesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetCapabilitiesOK creates a GetCapabilitiesOK with default headers values
func NewGetCapabilitiesOK() *GetCapabilitiesOK {
	return &GetCapabilitiesOK{}
}

/*GetCapabilitiesOK handles this case with default header values.

The capabilities of the server.
*/
type GetCapabilitiesOK struct {
	Payload *GetCapabilitiesOKBody
}

func (o *GetCapabilitiesOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/capabilities][%d] getCapabilitiesOK  %+v", 200, o.Payload)
}

func (o *GetCapabilitiesOK) GetPayload() *GetCapabilitiesOKBody {
	return o.Payload
}

func (o *GetCapabilitiesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCapabilitiesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCapabilitiesTooManyRequests creates a GetCapabilitiesTooManyRequests with default headers values
func NewGetCapabilitiesTooManyRequests() *GetCapabilitiesTooManyRequests {
	return &GetCapabilitiesTooManyRequests{}
}

/*GetCapabilitiesTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type GetCapabilitiesTooManyRequests struct {
	Payload *GetCapabilitiesTooManyRequestsBody
}

func (o *GetCapabilitiesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/capabilities][%d] getCapabilitiesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCapabilitiesTooManyRequests) GetPayload() *GetCapabilitiesTooManyRequestsBody {
	return o.Payload
}

func (o *GetCapabilitiesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCapabilitiesTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetCapabilitiesOKBody get capabilities o k body
swagger:model GetCapabilitiesOKBody
*/
type GetCapabilitiesOKBody struct {

	// capabilities
	// Required: true
	Capabilities *GetCapabilitiesOKBodyCapabilities `json:"capabilities"`
}

// Validate validates this get capabilities o k body
func (o *GetCapabilitiesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCapabilities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCapabilitiesOKBody) validateCapabilities(formats strfmt.Registry) error {

	if err := validate.Required("getCapabilitiesOK"+"."+"capabilities", "body", o.Capabilities); err != nil {
		return err
	}

	if o.Capabilities != nil {
		if err := o.Capabilities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCapabilitiesOK" + "." + "capabilities")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCapabilitiesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCapabilitiesOKBody) UnmarshalBinary(b []byte) error {
	var res GetCapabilitiesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetCapabilitiesOKBodyCapabilities Capabilities
//
// The custom capabilities the server supports, using the
// Java package naming convention.
swagger:model GetCapabilitiesOKBodyCapabilities
*/
type GetCapabilitiesOKBodyCapabilities struct {

	// m change password
	MChangePassword *GetCapabilitiesOKBodyCapabilitiesMChangePassword `json:"m.change_password,omitempty"`

	// m room versions
	MRoomVersions *GetCapabilitiesOKBodyCapabilitiesMRoomVersions `json:"m.room_versions,omitempty"`

	// get capabilities o k body capabilities
	GetCapabilitiesOKBodyCapabilities map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *GetCapabilitiesOKBodyCapabilities) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// m change password
		MChangePassword *GetCapabilitiesOKBodyCapabilitiesMChangePassword `json:"m.change_password,omitempty"`

		// m room versions
		MRoomVersions *GetCapabilitiesOKBodyCapabilitiesMRoomVersions `json:"m.room_versions,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv GetCapabilitiesOKBodyCapabilities

	rcv.MChangePassword = stage1.MChangePassword

	rcv.MRoomVersions = stage1.MRoomVersions

	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "m.change_password")

	delete(stage2, "m.room_versions")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.GetCapabilitiesOKBodyCapabilities = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o GetCapabilitiesOKBodyCapabilities) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// m change password
		MChangePassword *GetCapabilitiesOKBodyCapabilitiesMChangePassword `json:"m.change_password,omitempty"`

		// m room versions
		MRoomVersions *GetCapabilitiesOKBodyCapabilitiesMRoomVersions `json:"m.room_versions,omitempty"`
	}

	stage1.MChangePassword = o.MChangePassword

	stage1.MRoomVersions = o.MRoomVersions

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.GetCapabilitiesOKBodyCapabilities) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.GetCapabilitiesOKBodyCapabilities)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this get capabilities o k body capabilities
func (o *GetCapabilitiesOKBodyCapabilities) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMChangePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMRoomVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCapabilitiesOKBodyCapabilities) validateMChangePassword(formats strfmt.Registry) error {

	if swag.IsZero(o.MChangePassword) { // not required
		return nil
	}

	if o.MChangePassword != nil {
		if err := o.MChangePassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCapabilitiesOK" + "." + "capabilities" + "." + "m.change_password")
			}
			return err
		}
	}

	return nil
}

func (o *GetCapabilitiesOKBodyCapabilities) validateMRoomVersions(formats strfmt.Registry) error {

	if swag.IsZero(o.MRoomVersions) { // not required
		return nil
	}

	if o.MRoomVersions != nil {
		if err := o.MRoomVersions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCapabilitiesOK" + "." + "capabilities" + "." + "m.room_versions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCapabilitiesOKBodyCapabilities) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCapabilitiesOKBodyCapabilities) UnmarshalBinary(b []byte) error {
	var res GetCapabilitiesOKBodyCapabilities
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetCapabilitiesOKBodyCapabilitiesMChangePassword ChangePasswordCapability
//
// Capability to indicate if the user can change their password.
swagger:model GetCapabilitiesOKBodyCapabilitiesMChangePassword
*/
type GetCapabilitiesOKBodyCapabilitiesMChangePassword struct {

	// True if the user can change their password, false otherwise.
	// Required: true
	Enabled *bool `json:"enabled"`
}

// Validate validates this get capabilities o k body capabilities m change password
func (o *GetCapabilitiesOKBodyCapabilitiesMChangePassword) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCapabilitiesOKBodyCapabilitiesMChangePassword) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("getCapabilitiesOK"+"."+"capabilities"+"."+"m.change_password"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCapabilitiesOKBodyCapabilitiesMChangePassword) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCapabilitiesOKBodyCapabilitiesMChangePassword) UnmarshalBinary(b []byte) error {
	var res GetCapabilitiesOKBodyCapabilitiesMChangePassword
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetCapabilitiesOKBodyCapabilitiesMRoomVersions RoomVersionsCapability
//
// The room versions the server supports.
swagger:model GetCapabilitiesOKBodyCapabilitiesMRoomVersions
*/
type GetCapabilitiesOKBodyCapabilitiesMRoomVersions struct {

	// AvailableRoomVersions
	//
	// A detailed description of the room versions the server supports.
	// Required: true
	Available map[string]string `json:"available"`

	// The default room version the server is using for new rooms.
	// Required: true
	Default *string `json:"default"`
}

// Validate validates this get capabilities o k body capabilities m room versions
func (o *GetCapabilitiesOKBodyCapabilitiesMRoomVersions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// additional properties value enum
var getCapabilitiesOKBodyCapabilitiesMRoomVersionsAvailableValueEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["stable","unstable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getCapabilitiesOKBodyCapabilitiesMRoomVersionsAvailableValueEnum = append(getCapabilitiesOKBodyCapabilitiesMRoomVersionsAvailableValueEnum, v)
	}
}

func (o *GetCapabilitiesOKBodyCapabilitiesMRoomVersions) validateAvailableValueEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getCapabilitiesOKBodyCapabilitiesMRoomVersionsAvailableValueEnum); err != nil {
		return err
	}
	return nil
}

func (o *GetCapabilitiesOKBodyCapabilitiesMRoomVersions) validateAvailable(formats strfmt.Registry) error {

	for k := range o.Available {

		// value enum
		if err := o.validateAvailableValueEnum("getCapabilitiesOK"+"."+"capabilities"+"."+"m.room_versions"+"."+"available"+"."+k, "body", o.Available[k]); err != nil {
			return err
		}

	}

	return nil
}

func (o *GetCapabilitiesOKBodyCapabilitiesMRoomVersions) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("getCapabilitiesOK"+"."+"capabilities"+"."+"m.room_versions"+"."+"default", "body", o.Default); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCapabilitiesOKBodyCapabilitiesMRoomVersions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCapabilitiesOKBodyCapabilitiesMRoomVersions) UnmarshalBinary(b []byte) error {
	var res GetCapabilitiesOKBodyCapabilitiesMRoomVersions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetCapabilitiesTooManyRequestsBody The rate limit was reached for this request
swagger:model GetCapabilitiesTooManyRequestsBody
*/
type GetCapabilitiesTooManyRequestsBody struct {

	// The M_LIMIT_EXCEEDED error code
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`

	// The amount of time in milliseconds the client should wait
	// before trying the request again.
	RetryAfterMs int64 `json:"retry_after_ms,omitempty"`
}

// Validate validates this get capabilities too many requests body
func (o *GetCapabilitiesTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCapabilitiesTooManyRequestsBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("getCapabilitiesTooManyRequests"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCapabilitiesTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCapabilitiesTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res GetCapabilitiesTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
