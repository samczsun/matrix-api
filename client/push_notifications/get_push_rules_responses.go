// Code generated by go-swagger; DO NOT EDIT.

package push_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetPushRulesReader is a Reader for the GetPushRules structure.
type GetPushRulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPushRulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPushRulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPushRulesOK creates a GetPushRulesOK with default headers values
func NewGetPushRulesOK() *GetPushRulesOK {
	return &GetPushRulesOK{}
}

/*GetPushRulesOK handles this case with default header values.

All the push rulesets for this user.
*/
type GetPushRulesOK struct {
	Payload *GetPushRulesOKBody
}

func (o *GetPushRulesOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/pushrules/][%d] getPushRulesOK  %+v", 200, o.Payload)
}

func (o *GetPushRulesOK) GetPayload() *GetPushRulesOKBody {
	return o.Payload
}

func (o *GetPushRulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPushRulesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ContentItems0 PushRule
swagger:model ContentItems0
*/
type ContentItems0 struct {

	// The actions to perform when this rule is matched.
	// Required: true
	Actions []interface{} `json:"actions"`

	// The conditions that must hold true for an event in order for a rule to be
	// applied to an event. A rule with no conditions always matches. Only
	// applicable to ``underride`` and ``override`` rules.
	Conditions []*ContentItems0ConditionsItems0 `json:"conditions"`

	// Whether this is a default rule, or has been set explicitly.
	// Required: true
	Default *bool `json:"default"`

	// Whether the push rule is enabled or not.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The glob-style pattern to match against.  Only applicable to ``content``
	// rules.
	Pattern string `json:"pattern,omitempty"`

	// The ID of this rule.
	// Required: true
	RuleID *string `json:"rule_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ContentItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Actions []interface{} `json:"actions"`

		Conditions []*ContentItems0ConditionsItems0 `json:"conditions"`

		Default *bool `json:"default"`

		Enabled *bool `json:"enabled"`

		Pattern string `json:"pattern,omitempty"`

		RuleID *string `json:"rule_id"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Actions = dataAO0.Actions

	o.Conditions = dataAO0.Conditions

	o.Default = dataAO0.Default

	o.Enabled = dataAO0.Enabled

	o.Pattern = dataAO0.Pattern

	o.RuleID = dataAO0.RuleID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ContentItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Actions []interface{} `json:"actions"`

		Conditions []*ContentItems0ConditionsItems0 `json:"conditions"`

		Default *bool `json:"default"`

		Enabled *bool `json:"enabled"`

		Pattern string `json:"pattern,omitempty"`

		RuleID *string `json:"rule_id"`
	}

	dataAO0.Actions = o.Actions

	dataAO0.Conditions = o.Conditions

	dataAO0.Default = o.Default

	dataAO0.Enabled = o.Enabled

	dataAO0.Pattern = o.Pattern

	dataAO0.RuleID = o.RuleID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this content items0
func (o *ContentItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ContentItems0) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", o.Actions); err != nil {
		return err
	}

	return nil
}

func (o *ContentItems0) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(o.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(o.Conditions); i++ {
		if swag.IsZero(o.Conditions[i]) { // not required
			continue
		}

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ContentItems0) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("default", "body", o.Default); err != nil {
		return err
	}

	return nil
}

func (o *ContentItems0) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *ContentItems0) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", o.RuleID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ContentItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContentItems0) UnmarshalBinary(b []byte) error {
	var res ContentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ContentItems0ConditionsItems0 content items0 conditions items0
swagger:model ContentItems0ConditionsItems0
*/
type ContentItems0ConditionsItems0 struct {

	// Required for ``room_member_count`` conditions. A decimal integer
	// optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
	// rooms where the member count is strictly less than the given number and
	// so forth. If no prefix is present, this parameter defaults to ==.
	Is string `json:"is,omitempty"`

	// Required for ``event_match`` conditions. The dot-separated field of the
	// event to match.
	//
	// Required for ``sender_notification_permission`` conditions. The field in
	// the power level event the user needs a minimum power level for. Fields
	// must be specified under the ``notifications`` property in the power level
	// event's ``content``.
	Key string `json:"key,omitempty"`

	// The kind of condition to apply. See `conditions <#conditions>`_ for
	// more information on the allowed kinds and how they work.
	// Required: true
	Kind *string `json:"kind"`

	// Required for ``event_match`` conditions. The glob-style pattern to
	// match against. Patterns with no special glob characters should be
	// treated as having asterisks prepended and appended when testing the
	// condition.
	Pattern string `json:"pattern,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ContentItems0ConditionsItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Is string `json:"is,omitempty"`

		Key string `json:"key,omitempty"`

		Kind *string `json:"kind"`

		Pattern string `json:"pattern,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Is = dataAO0.Is

	o.Key = dataAO0.Key

	o.Kind = dataAO0.Kind

	o.Pattern = dataAO0.Pattern

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ContentItems0ConditionsItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Is string `json:"is,omitempty"`

		Key string `json:"key,omitempty"`

		Kind *string `json:"kind"`

		Pattern string `json:"pattern,omitempty"`
	}

	dataAO0.Is = o.Is

	dataAO0.Key = o.Key

	dataAO0.Kind = o.Kind

	dataAO0.Pattern = o.Pattern

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this content items0 conditions items0
func (o *ContentItems0ConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ContentItems0ConditionsItems0) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ContentItems0ConditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContentItems0ConditionsItems0) UnmarshalBinary(b []byte) error {
	var res ContentItems0ConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPushRulesOKBody get push rules o k body
swagger:model GetPushRulesOKBody
*/
type GetPushRulesOKBody struct {

	// Ruleset
	//
	// The global ruleset.
	// Required: true
	Global struct {

		// content
		// Required: true
		Content []*ContentItems0 `json:"content"`

		// override
		// Required: true
		Override []*OverrideItems0 `json:"override"`

		// room
		// Required: true
		Room []*RoomItems0 `json:"room"`

		// sender
		// Required: true
		Sender []*SenderItems0 `json:"sender"`

		// underride
		// Required: true
		Underride []*UnderrideItems0 `json:"underride"`
	} `json:"global"`
}

// Validate validates this get push rules o k body
func (o *GetPushRulesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGlobal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPushRulesOKBody) validateGlobal(formats strfmt.Registry) error {

	if err := validate.Required("getPushRulesOK"+"."+"global"+"."+"content", "body", o.Global.Content); err != nil {
		return err
	}

	for i := 0; i < len(o.Global.Content); i++ {
		if swag.IsZero(o.Global.Content[i]) { // not required
			continue
		}

		if o.Global.Content[i] != nil {
			if err := o.Global.Content[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPushRulesOK" + "." + "global" + "." + "content" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if err := validate.Required("getPushRulesOK"+"."+"global"+"."+"override", "body", o.Global.Override); err != nil {
		return err
	}

	for i := 0; i < len(o.Global.Override); i++ {
		if swag.IsZero(o.Global.Override[i]) { // not required
			continue
		}

		if o.Global.Override[i] != nil {
			if err := o.Global.Override[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPushRulesOK" + "." + "global" + "." + "override" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if err := validate.Required("getPushRulesOK"+"."+"global"+"."+"room", "body", o.Global.Room); err != nil {
		return err
	}

	for i := 0; i < len(o.Global.Room); i++ {
		if swag.IsZero(o.Global.Room[i]) { // not required
			continue
		}

		if o.Global.Room[i] != nil {
			if err := o.Global.Room[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPushRulesOK" + "." + "global" + "." + "room" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if err := validate.Required("getPushRulesOK"+"."+"global"+"."+"sender", "body", o.Global.Sender); err != nil {
		return err
	}

	for i := 0; i < len(o.Global.Sender); i++ {
		if swag.IsZero(o.Global.Sender[i]) { // not required
			continue
		}

		if o.Global.Sender[i] != nil {
			if err := o.Global.Sender[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPushRulesOK" + "." + "global" + "." + "sender" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if err := validate.Required("getPushRulesOK"+"."+"global"+"."+"underride", "body", o.Global.Underride); err != nil {
		return err
	}

	for i := 0; i < len(o.Global.Underride); i++ {
		if swag.IsZero(o.Global.Underride[i]) { // not required
			continue
		}

		if o.Global.Underride[i] != nil {
			if err := o.Global.Underride[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPushRulesOK" + "." + "global" + "." + "underride" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPushRulesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPushRulesOKBody) UnmarshalBinary(b []byte) error {
	var res GetPushRulesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OverrideItems0 PushRule
swagger:model OverrideItems0
*/
type OverrideItems0 struct {

	// The actions to perform when this rule is matched.
	// Required: true
	Actions []interface{} `json:"actions"`

	// The conditions that must hold true for an event in order for a rule to be
	// applied to an event. A rule with no conditions always matches. Only
	// applicable to ``underride`` and ``override`` rules.
	Conditions []*OverrideItems0ConditionsItems0 `json:"conditions"`

	// Whether this is a default rule, or has been set explicitly.
	// Required: true
	Default *bool `json:"default"`

	// Whether the push rule is enabled or not.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The glob-style pattern to match against.  Only applicable to ``content``
	// rules.
	Pattern string `json:"pattern,omitempty"`

	// The ID of this rule.
	// Required: true
	RuleID *string `json:"rule_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *OverrideItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Actions []interface{} `json:"actions"`

		Conditions []*OverrideItems0ConditionsItems0 `json:"conditions"`

		Default *bool `json:"default"`

		Enabled *bool `json:"enabled"`

		Pattern string `json:"pattern,omitempty"`

		RuleID *string `json:"rule_id"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Actions = dataAO0.Actions

	o.Conditions = dataAO0.Conditions

	o.Default = dataAO0.Default

	o.Enabled = dataAO0.Enabled

	o.Pattern = dataAO0.Pattern

	o.RuleID = dataAO0.RuleID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o OverrideItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Actions []interface{} `json:"actions"`

		Conditions []*OverrideItems0ConditionsItems0 `json:"conditions"`

		Default *bool `json:"default"`

		Enabled *bool `json:"enabled"`

		Pattern string `json:"pattern,omitempty"`

		RuleID *string `json:"rule_id"`
	}

	dataAO0.Actions = o.Actions

	dataAO0.Conditions = o.Conditions

	dataAO0.Default = o.Default

	dataAO0.Enabled = o.Enabled

	dataAO0.Pattern = o.Pattern

	dataAO0.RuleID = o.RuleID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this override items0
func (o *OverrideItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OverrideItems0) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", o.Actions); err != nil {
		return err
	}

	return nil
}

func (o *OverrideItems0) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(o.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(o.Conditions); i++ {
		if swag.IsZero(o.Conditions[i]) { // not required
			continue
		}

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *OverrideItems0) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("default", "body", o.Default); err != nil {
		return err
	}

	return nil
}

func (o *OverrideItems0) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *OverrideItems0) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", o.RuleID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OverrideItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OverrideItems0) UnmarshalBinary(b []byte) error {
	var res OverrideItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*OverrideItems0ConditionsItems0 override items0 conditions items0
swagger:model OverrideItems0ConditionsItems0
*/
type OverrideItems0ConditionsItems0 struct {

	// Required for ``room_member_count`` conditions. A decimal integer
	// optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
	// rooms where the member count is strictly less than the given number and
	// so forth. If no prefix is present, this parameter defaults to ==.
	Is string `json:"is,omitempty"`

	// Required for ``event_match`` conditions. The dot-separated field of the
	// event to match.
	//
	// Required for ``sender_notification_permission`` conditions. The field in
	// the power level event the user needs a minimum power level for. Fields
	// must be specified under the ``notifications`` property in the power level
	// event's ``content``.
	Key string `json:"key,omitempty"`

	// The kind of condition to apply. See `conditions <#conditions>`_ for
	// more information on the allowed kinds and how they work.
	// Required: true
	Kind *string `json:"kind"`

	// Required for ``event_match`` conditions. The glob-style pattern to
	// match against. Patterns with no special glob characters should be
	// treated as having asterisks prepended and appended when testing the
	// condition.
	Pattern string `json:"pattern,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *OverrideItems0ConditionsItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Is string `json:"is,omitempty"`

		Key string `json:"key,omitempty"`

		Kind *string `json:"kind"`

		Pattern string `json:"pattern,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Is = dataAO0.Is

	o.Key = dataAO0.Key

	o.Kind = dataAO0.Kind

	o.Pattern = dataAO0.Pattern

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o OverrideItems0ConditionsItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Is string `json:"is,omitempty"`

		Key string `json:"key,omitempty"`

		Kind *string `json:"kind"`

		Pattern string `json:"pattern,omitempty"`
	}

	dataAO0.Is = o.Is

	dataAO0.Key = o.Key

	dataAO0.Kind = o.Kind

	dataAO0.Pattern = o.Pattern

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this override items0 conditions items0
func (o *OverrideItems0ConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OverrideItems0ConditionsItems0) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OverrideItems0ConditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OverrideItems0ConditionsItems0) UnmarshalBinary(b []byte) error {
	var res OverrideItems0ConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomItems0 PushRule
swagger:model RoomItems0
*/
type RoomItems0 struct {

	// The actions to perform when this rule is matched.
	// Required: true
	Actions []interface{} `json:"actions"`

	// The conditions that must hold true for an event in order for a rule to be
	// applied to an event. A rule with no conditions always matches. Only
	// applicable to ``underride`` and ``override`` rules.
	Conditions []*RoomItems0ConditionsItems0 `json:"conditions"`

	// Whether this is a default rule, or has been set explicitly.
	// Required: true
	Default *bool `json:"default"`

	// Whether the push rule is enabled or not.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The glob-style pattern to match against.  Only applicable to ``content``
	// rules.
	Pattern string `json:"pattern,omitempty"`

	// The ID of this rule.
	// Required: true
	RuleID *string `json:"rule_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Actions []interface{} `json:"actions"`

		Conditions []*RoomItems0ConditionsItems0 `json:"conditions"`

		Default *bool `json:"default"`

		Enabled *bool `json:"enabled"`

		Pattern string `json:"pattern,omitempty"`

		RuleID *string `json:"rule_id"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Actions = dataAO0.Actions

	o.Conditions = dataAO0.Conditions

	o.Default = dataAO0.Default

	o.Enabled = dataAO0.Enabled

	o.Pattern = dataAO0.Pattern

	o.RuleID = dataAO0.RuleID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Actions []interface{} `json:"actions"`

		Conditions []*RoomItems0ConditionsItems0 `json:"conditions"`

		Default *bool `json:"default"`

		Enabled *bool `json:"enabled"`

		Pattern string `json:"pattern,omitempty"`

		RuleID *string `json:"rule_id"`
	}

	dataAO0.Actions = o.Actions

	dataAO0.Conditions = o.Conditions

	dataAO0.Default = o.Default

	dataAO0.Enabled = o.Enabled

	dataAO0.Pattern = o.Pattern

	dataAO0.RuleID = o.RuleID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this room items0
func (o *RoomItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomItems0) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", o.Actions); err != nil {
		return err
	}

	return nil
}

func (o *RoomItems0) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(o.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(o.Conditions); i++ {
		if swag.IsZero(o.Conditions[i]) { // not required
			continue
		}

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RoomItems0) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("default", "body", o.Default); err != nil {
		return err
	}

	return nil
}

func (o *RoomItems0) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *RoomItems0) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", o.RuleID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomItems0) UnmarshalBinary(b []byte) error {
	var res RoomItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomItems0ConditionsItems0 room items0 conditions items0
swagger:model RoomItems0ConditionsItems0
*/
type RoomItems0ConditionsItems0 struct {

	// Required for ``room_member_count`` conditions. A decimal integer
	// optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
	// rooms where the member count is strictly less than the given number and
	// so forth. If no prefix is present, this parameter defaults to ==.
	Is string `json:"is,omitempty"`

	// Required for ``event_match`` conditions. The dot-separated field of the
	// event to match.
	//
	// Required for ``sender_notification_permission`` conditions. The field in
	// the power level event the user needs a minimum power level for. Fields
	// must be specified under the ``notifications`` property in the power level
	// event's ``content``.
	Key string `json:"key,omitempty"`

	// The kind of condition to apply. See `conditions <#conditions>`_ for
	// more information on the allowed kinds and how they work.
	// Required: true
	Kind *string `json:"kind"`

	// Required for ``event_match`` conditions. The glob-style pattern to
	// match against. Patterns with no special glob characters should be
	// treated as having asterisks prepended and appended when testing the
	// condition.
	Pattern string `json:"pattern,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomItems0ConditionsItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Is string `json:"is,omitempty"`

		Key string `json:"key,omitempty"`

		Kind *string `json:"kind"`

		Pattern string `json:"pattern,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Is = dataAO0.Is

	o.Key = dataAO0.Key

	o.Kind = dataAO0.Kind

	o.Pattern = dataAO0.Pattern

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomItems0ConditionsItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Is string `json:"is,omitempty"`

		Key string `json:"key,omitempty"`

		Kind *string `json:"kind"`

		Pattern string `json:"pattern,omitempty"`
	}

	dataAO0.Is = o.Is

	dataAO0.Key = o.Key

	dataAO0.Kind = o.Kind

	dataAO0.Pattern = o.Pattern

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this room items0 conditions items0
func (o *RoomItems0ConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomItems0ConditionsItems0) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomItems0ConditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomItems0ConditionsItems0) UnmarshalBinary(b []byte) error {
	var res RoomItems0ConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SenderItems0 PushRule
swagger:model SenderItems0
*/
type SenderItems0 struct {

	// The actions to perform when this rule is matched.
	// Required: true
	Actions []interface{} `json:"actions"`

	// The conditions that must hold true for an event in order for a rule to be
	// applied to an event. A rule with no conditions always matches. Only
	// applicable to ``underride`` and ``override`` rules.
	Conditions []*SenderItems0ConditionsItems0 `json:"conditions"`

	// Whether this is a default rule, or has been set explicitly.
	// Required: true
	Default *bool `json:"default"`

	// Whether the push rule is enabled or not.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The glob-style pattern to match against.  Only applicable to ``content``
	// rules.
	Pattern string `json:"pattern,omitempty"`

	// The ID of this rule.
	// Required: true
	RuleID *string `json:"rule_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SenderItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Actions []interface{} `json:"actions"`

		Conditions []*SenderItems0ConditionsItems0 `json:"conditions"`

		Default *bool `json:"default"`

		Enabled *bool `json:"enabled"`

		Pattern string `json:"pattern,omitempty"`

		RuleID *string `json:"rule_id"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Actions = dataAO0.Actions

	o.Conditions = dataAO0.Conditions

	o.Default = dataAO0.Default

	o.Enabled = dataAO0.Enabled

	o.Pattern = dataAO0.Pattern

	o.RuleID = dataAO0.RuleID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SenderItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Actions []interface{} `json:"actions"`

		Conditions []*SenderItems0ConditionsItems0 `json:"conditions"`

		Default *bool `json:"default"`

		Enabled *bool `json:"enabled"`

		Pattern string `json:"pattern,omitempty"`

		RuleID *string `json:"rule_id"`
	}

	dataAO0.Actions = o.Actions

	dataAO0.Conditions = o.Conditions

	dataAO0.Default = o.Default

	dataAO0.Enabled = o.Enabled

	dataAO0.Pattern = o.Pattern

	dataAO0.RuleID = o.RuleID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this sender items0
func (o *SenderItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SenderItems0) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", o.Actions); err != nil {
		return err
	}

	return nil
}

func (o *SenderItems0) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(o.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(o.Conditions); i++ {
		if swag.IsZero(o.Conditions[i]) { // not required
			continue
		}

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SenderItems0) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("default", "body", o.Default); err != nil {
		return err
	}

	return nil
}

func (o *SenderItems0) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *SenderItems0) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", o.RuleID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SenderItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SenderItems0) UnmarshalBinary(b []byte) error {
	var res SenderItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SenderItems0ConditionsItems0 sender items0 conditions items0
swagger:model SenderItems0ConditionsItems0
*/
type SenderItems0ConditionsItems0 struct {

	// Required for ``room_member_count`` conditions. A decimal integer
	// optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
	// rooms where the member count is strictly less than the given number and
	// so forth. If no prefix is present, this parameter defaults to ==.
	Is string `json:"is,omitempty"`

	// Required for ``event_match`` conditions. The dot-separated field of the
	// event to match.
	//
	// Required for ``sender_notification_permission`` conditions. The field in
	// the power level event the user needs a minimum power level for. Fields
	// must be specified under the ``notifications`` property in the power level
	// event's ``content``.
	Key string `json:"key,omitempty"`

	// The kind of condition to apply. See `conditions <#conditions>`_ for
	// more information on the allowed kinds and how they work.
	// Required: true
	Kind *string `json:"kind"`

	// Required for ``event_match`` conditions. The glob-style pattern to
	// match against. Patterns with no special glob characters should be
	// treated as having asterisks prepended and appended when testing the
	// condition.
	Pattern string `json:"pattern,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SenderItems0ConditionsItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Is string `json:"is,omitempty"`

		Key string `json:"key,omitempty"`

		Kind *string `json:"kind"`

		Pattern string `json:"pattern,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Is = dataAO0.Is

	o.Key = dataAO0.Key

	o.Kind = dataAO0.Kind

	o.Pattern = dataAO0.Pattern

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SenderItems0ConditionsItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Is string `json:"is,omitempty"`

		Key string `json:"key,omitempty"`

		Kind *string `json:"kind"`

		Pattern string `json:"pattern,omitempty"`
	}

	dataAO0.Is = o.Is

	dataAO0.Key = o.Key

	dataAO0.Kind = o.Kind

	dataAO0.Pattern = o.Pattern

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this sender items0 conditions items0
func (o *SenderItems0ConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SenderItems0ConditionsItems0) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SenderItems0ConditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SenderItems0ConditionsItems0) UnmarshalBinary(b []byte) error {
	var res SenderItems0ConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UnderrideItems0 PushRule
swagger:model UnderrideItems0
*/
type UnderrideItems0 struct {

	// The actions to perform when this rule is matched.
	// Required: true
	Actions []interface{} `json:"actions"`

	// The conditions that must hold true for an event in order for a rule to be
	// applied to an event. A rule with no conditions always matches. Only
	// applicable to ``underride`` and ``override`` rules.
	Conditions []*UnderrideItems0ConditionsItems0 `json:"conditions"`

	// Whether this is a default rule, or has been set explicitly.
	// Required: true
	Default *bool `json:"default"`

	// Whether the push rule is enabled or not.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The glob-style pattern to match against.  Only applicable to ``content``
	// rules.
	Pattern string `json:"pattern,omitempty"`

	// The ID of this rule.
	// Required: true
	RuleID *string `json:"rule_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *UnderrideItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Actions []interface{} `json:"actions"`

		Conditions []*UnderrideItems0ConditionsItems0 `json:"conditions"`

		Default *bool `json:"default"`

		Enabled *bool `json:"enabled"`

		Pattern string `json:"pattern,omitempty"`

		RuleID *string `json:"rule_id"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Actions = dataAO0.Actions

	o.Conditions = dataAO0.Conditions

	o.Default = dataAO0.Default

	o.Enabled = dataAO0.Enabled

	o.Pattern = dataAO0.Pattern

	o.RuleID = dataAO0.RuleID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o UnderrideItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Actions []interface{} `json:"actions"`

		Conditions []*UnderrideItems0ConditionsItems0 `json:"conditions"`

		Default *bool `json:"default"`

		Enabled *bool `json:"enabled"`

		Pattern string `json:"pattern,omitempty"`

		RuleID *string `json:"rule_id"`
	}

	dataAO0.Actions = o.Actions

	dataAO0.Conditions = o.Conditions

	dataAO0.Default = o.Default

	dataAO0.Enabled = o.Enabled

	dataAO0.Pattern = o.Pattern

	dataAO0.RuleID = o.RuleID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this underride items0
func (o *UnderrideItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRuleID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UnderrideItems0) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", o.Actions); err != nil {
		return err
	}

	return nil
}

func (o *UnderrideItems0) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(o.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(o.Conditions); i++ {
		if swag.IsZero(o.Conditions[i]) { // not required
			continue
		}

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UnderrideItems0) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("default", "body", o.Default); err != nil {
		return err
	}

	return nil
}

func (o *UnderrideItems0) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

func (o *UnderrideItems0) validateRuleID(formats strfmt.Registry) error {

	if err := validate.Required("rule_id", "body", o.RuleID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UnderrideItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UnderrideItems0) UnmarshalBinary(b []byte) error {
	var res UnderrideItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UnderrideItems0ConditionsItems0 underride items0 conditions items0
swagger:model UnderrideItems0ConditionsItems0
*/
type UnderrideItems0ConditionsItems0 struct {

	// Required for ``room_member_count`` conditions. A decimal integer
	// optionally prefixed by one of, ==, <, >, >= or <=. A prefix of < matches
	// rooms where the member count is strictly less than the given number and
	// so forth. If no prefix is present, this parameter defaults to ==.
	Is string `json:"is,omitempty"`

	// Required for ``event_match`` conditions. The dot-separated field of the
	// event to match.
	//
	// Required for ``sender_notification_permission`` conditions. The field in
	// the power level event the user needs a minimum power level for. Fields
	// must be specified under the ``notifications`` property in the power level
	// event's ``content``.
	Key string `json:"key,omitempty"`

	// The kind of condition to apply. See `conditions <#conditions>`_ for
	// more information on the allowed kinds and how they work.
	// Required: true
	Kind *string `json:"kind"`

	// Required for ``event_match`` conditions. The glob-style pattern to
	// match against. Patterns with no special glob characters should be
	// treated as having asterisks prepended and appended when testing the
	// condition.
	Pattern string `json:"pattern,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *UnderrideItems0ConditionsItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Is string `json:"is,omitempty"`

		Key string `json:"key,omitempty"`

		Kind *string `json:"kind"`

		Pattern string `json:"pattern,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Is = dataAO0.Is

	o.Key = dataAO0.Key

	o.Kind = dataAO0.Kind

	o.Pattern = dataAO0.Pattern

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o UnderrideItems0ConditionsItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Is string `json:"is,omitempty"`

		Key string `json:"key,omitempty"`

		Kind *string `json:"kind"`

		Pattern string `json:"pattern,omitempty"`
	}

	dataAO0.Is = o.Is

	dataAO0.Key = o.Key

	dataAO0.Kind = o.Kind

	dataAO0.Pattern = o.Pattern

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this underride items0 conditions items0
func (o *UnderrideItems0ConditionsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UnderrideItems0ConditionsItems0) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UnderrideItems0ConditionsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UnderrideItems0ConditionsItems0) UnmarshalBinary(b []byte) error {
	var res UnderrideItems0ConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
