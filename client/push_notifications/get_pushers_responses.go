// Code generated by go-swagger; DO NOT EDIT.

package push_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetPushersReader is a Reader for the GetPushers structure.
type GetPushersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPushersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPushersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPushersOK creates a GetPushersOK with default headers values
func NewGetPushersOK() *GetPushersOK {
	return &GetPushersOK{}
}

/*GetPushersOK handles this case with default header values.

The pushers for this user.
*/
type GetPushersOK struct {
	Payload *GetPushersOKBody
}

func (o *GetPushersOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/pushers][%d] getPushersOK  %+v", 200, o.Payload)
}

func (o *GetPushersOK) GetPayload() *GetPushersOKBody {
	return o.Payload
}

func (o *GetPushersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPushersOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetPushersOKBody get pushers o k body
swagger:model GetPushersOKBody
*/
type GetPushersOKBody struct {

	// Pushers
	//
	// An array containing the current pushers for the user
	Pushers []*PushersItems0 `json:"pushers"`
}

// Validate validates this get pushers o k body
func (o *GetPushersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePushers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPushersOKBody) validatePushers(formats strfmt.Registry) error {

	if swag.IsZero(o.Pushers) { // not required
		return nil
	}

	for i := 0; i < len(o.Pushers); i++ {
		if swag.IsZero(o.Pushers[i]) { // not required
			continue
		}

		if o.Pushers[i] != nil {
			if err := o.Pushers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPushersOK" + "." + "pushers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPushersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPushersOKBody) UnmarshalBinary(b []byte) error {
	var res GetPushersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PushersItems0 Pusher
swagger:model PushersItems0
*/
type PushersItems0 struct {

	// A string that will allow the user to identify what application
	// owns this pusher.
	// Required: true
	AppDisplayName *string `json:"app_display_name"`

	// This is a reverse-DNS style identifier for the application.
	// Max length, 64 chars.
	// Required: true
	AppID *string `json:"app_id"`

	// data
	// Required: true
	Data *PushersItems0Data `json:"data"`

	// A string that will allow the user to identify what device owns
	// this pusher.
	// Required: true
	DeviceDisplayName *string `json:"device_display_name"`

	// The kind of pusher. ``"http"`` is a pusher that
	// sends HTTP pokes.
	// Required: true
	Kind *string `json:"kind"`

	// The preferred language for receiving notifications (e.g. 'en'
	// or 'en-US')
	// Required: true
	Lang *string `json:"lang"`

	// This string determines which set of device specific rules this
	// pusher executes.
	ProfileTag string `json:"profile_tag,omitempty"`

	// This is a unique identifier for this pusher. See ``/set`` for
	// more detail.
	// Max length, 512 bytes.
	// Required: true
	Pushkey *string `json:"pushkey"`
}

// Validate validates this pushers items0
func (o *PushersItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAppDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAppID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeviceDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLang(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePushkey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PushersItems0) validateAppDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("app_display_name", "body", o.AppDisplayName); err != nil {
		return err
	}

	return nil
}

func (o *PushersItems0) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("app_id", "body", o.AppID); err != nil {
		return err
	}

	return nil
}

func (o *PushersItems0) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

func (o *PushersItems0) validateDeviceDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("device_display_name", "body", o.DeviceDisplayName); err != nil {
		return err
	}

	return nil
}

func (o *PushersItems0) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", o.Kind); err != nil {
		return err
	}

	return nil
}

func (o *PushersItems0) validateLang(formats strfmt.Registry) error {

	if err := validate.Required("lang", "body", o.Lang); err != nil {
		return err
	}

	return nil
}

func (o *PushersItems0) validatePushkey(formats strfmt.Registry) error {

	if err := validate.Required("pushkey", "body", o.Pushkey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PushersItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PushersItems0) UnmarshalBinary(b []byte) error {
	var res PushersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PushersItems0Data PusherData
//
// A dictionary of information for the pusher implementation
// itself.
swagger:model PushersItems0Data
*/
type PushersItems0Data struct {

	// The format to use when sending notifications to the Push
	// Gateway.
	Format string `json:"format,omitempty"`

	// Required if ``kind`` is ``http``. The URL to use to send
	// notifications to.
	URL string `json:"url,omitempty"`
}

// Validate validates this pushers items0 data
func (o *PushersItems0Data) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PushersItems0Data) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PushersItems0Data) UnmarshalBinary(b []byte) error {
	var res PushersItems0Data
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
