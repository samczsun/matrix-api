// Code generated by go-swagger; DO NOT EDIT.

package push_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetPushRuleParams creates a new SetPushRuleParams object
// with the default values initialized.
func NewSetPushRuleParams() *SetPushRuleParams {
	var ()
	return &SetPushRuleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetPushRuleParamsWithTimeout creates a new SetPushRuleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetPushRuleParamsWithTimeout(timeout time.Duration) *SetPushRuleParams {
	var ()
	return &SetPushRuleParams{

		timeout: timeout,
	}
}

// NewSetPushRuleParamsWithContext creates a new SetPushRuleParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetPushRuleParamsWithContext(ctx context.Context) *SetPushRuleParams {
	var ()
	return &SetPushRuleParams{

		Context: ctx,
	}
}

// NewSetPushRuleParamsWithHTTPClient creates a new SetPushRuleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetPushRuleParamsWithHTTPClient(client *http.Client) *SetPushRuleParams {
	var ()
	return &SetPushRuleParams{
		HTTPClient: client,
	}
}

/*SetPushRuleParams contains all the parameters to send to the API endpoint
for the set push rule operation typically these are written to a http.Request
*/
type SetPushRuleParams struct {

	/*After
	  This makes the new rule the next-less important rule relative to the
	given user defined rule. It is not possible to add a rule relative
	to a predefined server rule.

	*/
	After *string
	/*Before
	  Use 'before' with a ``rule_id`` as its value to make the new rule the
	next-most important rule with respect to the given user defined rule.
	It is not possible to add a rule relative to a predefined server rule.

	*/
	Before *string
	/*Kind
	  The kind of rule


	*/
	Kind string
	/*Pushrule
	  The push rule data. Additional top-level keys may be present depending
	on the parameters for the rule ``kind``.

	*/
	Pushrule SetPushRuleBody
	/*RuleID
	  The identifier for the rule.


	*/
	RuleID string
	/*Scope
	  ``global`` to specify global rules.

	*/
	Scope string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set push rule params
func (o *SetPushRuleParams) WithTimeout(timeout time.Duration) *SetPushRuleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set push rule params
func (o *SetPushRuleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set push rule params
func (o *SetPushRuleParams) WithContext(ctx context.Context) *SetPushRuleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set push rule params
func (o *SetPushRuleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set push rule params
func (o *SetPushRuleParams) WithHTTPClient(client *http.Client) *SetPushRuleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set push rule params
func (o *SetPushRuleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the set push rule params
func (o *SetPushRuleParams) WithAfter(after *string) *SetPushRuleParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the set push rule params
func (o *SetPushRuleParams) SetAfter(after *string) {
	o.After = after
}

// WithBefore adds the before to the set push rule params
func (o *SetPushRuleParams) WithBefore(before *string) *SetPushRuleParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the set push rule params
func (o *SetPushRuleParams) SetBefore(before *string) {
	o.Before = before
}

// WithKind adds the kind to the set push rule params
func (o *SetPushRuleParams) WithKind(kind string) *SetPushRuleParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the set push rule params
func (o *SetPushRuleParams) SetKind(kind string) {
	o.Kind = kind
}

// WithPushrule adds the pushrule to the set push rule params
func (o *SetPushRuleParams) WithPushrule(pushrule SetPushRuleBody) *SetPushRuleParams {
	o.SetPushrule(pushrule)
	return o
}

// SetPushrule adds the pushrule to the set push rule params
func (o *SetPushRuleParams) SetPushrule(pushrule SetPushRuleBody) {
	o.Pushrule = pushrule
}

// WithRuleID adds the ruleID to the set push rule params
func (o *SetPushRuleParams) WithRuleID(ruleID string) *SetPushRuleParams {
	o.SetRuleID(ruleID)
	return o
}

// SetRuleID adds the ruleId to the set push rule params
func (o *SetPushRuleParams) SetRuleID(ruleID string) {
	o.RuleID = ruleID
}

// WithScope adds the scope to the set push rule params
func (o *SetPushRuleParams) WithScope(scope string) *SetPushRuleParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the set push rule params
func (o *SetPushRuleParams) SetScope(scope string) {
	o.Scope = scope
}

// WriteToRequest writes these params to a swagger request
func (o *SetPushRuleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string
		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {
			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}

	}

	if o.Before != nil {

		// query param before
		var qrBefore string
		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore
		if qBefore != "" {
			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}

	}

	// path param kind
	if err := r.SetPathParam("kind", o.Kind); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.Pushrule); err != nil {
		return err
	}

	// path param ruleId
	if err := r.SetPathParam("ruleId", o.RuleID); err != nil {
		return err
	}

	// path param scope
	if err := r.SetPathParam("scope", o.Scope); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
