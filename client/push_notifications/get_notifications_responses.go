// Code generated by go-swagger; DO NOT EDIT.

package push_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetNotificationsReader is a Reader for the GetNotifications structure.
type GetNotificationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNotificationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNotificationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNotificationsOK creates a GetNotificationsOK with default headers values
func NewGetNotificationsOK() *GetNotificationsOK {
	return &GetNotificationsOK{}
}

/*GetNotificationsOK handles this case with default header values.

A batch of events is being returned
*/
type GetNotificationsOK struct {
	Payload *GetNotificationsOKBody
}

func (o *GetNotificationsOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/notifications][%d] getNotificationsOK  %+v", 200, o.Payload)
}

func (o *GetNotificationsOK) GetPayload() *GetNotificationsOKBody {
	return o.Payload
}

func (o *GetNotificationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNotificationsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetNotificationsOKBody get notifications o k body
swagger:model GetNotificationsOKBody
*/
type GetNotificationsOKBody struct {

	// The token to supply in the ``from`` param of the next
	// ``/notifications`` request in order to request more
	// events. If this is absent, there are no more results.
	NextToken string `json:"next_token,omitempty"`

	// The list of events that triggered notifications.
	// Required: true
	Notifications []*NotificationsItems0 `json:"notifications"`
}

// Validate validates this get notifications o k body
func (o *GetNotificationsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationsOKBody) validateNotifications(formats strfmt.Registry) error {

	if err := validate.Required("getNotificationsOK"+"."+"notifications", "body", o.Notifications); err != nil {
		return err
	}

	for i := 0; i < len(o.Notifications); i++ {
		if swag.IsZero(o.Notifications[i]) { // not required
			continue
		}

		if o.Notifications[i] != nil {
			if err := o.Notifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNotificationsOK" + "." + "notifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNotificationsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNotificationsOKBody) UnmarshalBinary(b []byte) error {
	var res GetNotificationsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NotificationsItems0 Notification
swagger:model NotificationsItems0
*/
type NotificationsItems0 struct {

	// The action(s) to perform when the conditions for this rule are met.
	// See `Push Rules: API`_.
	// Required: true
	Actions []interface{} `json:"actions"`

	// Event
	//
	// The Event object for the event that triggered the notification.
	// Required: true
	Event struct {

		// EventContent
		//
		// The content of this event. The fields in this object will vary depending on the type of event.
		// Required: true
		Content interface{} `json:"content"`

		// The ID of this event, if applicable.
		// Required: true
		EventID *string `json:"event_id"`

		// Timestamp in milliseconds on originating homeserver when this event was sent.
		// Required: true
		OriginServerTs *int64 `json:"origin_server_ts"`

		// The MXID of the user who sent this event.
		// Required: true
		Sender *string `json:"sender"`

		// Optional. This key will only be present for state events. A unique key which defines the overwriting semantics for this piece of room state.
		// Required: true
		StateKey *string `json:"state_key"`

		// The type of event.
		// Required: true
		Type *string `json:"type"`

		// unsigned
		// Required: true
		Unsigned *NotificationsItems0EventAO0Unsigned `json:"unsigned"`
	} `json:"event"`

	// The profile tag of the rule that matched this event.
	ProfileTag string `json:"profile_tag,omitempty"`

	// Indicates whether the user has sent a read receipt indicating
	// that they have read this message.
	// Required: true
	Read *bool `json:"read"`

	// The ID of the room in which the event was posted.
	// Required: true
	RoomID *string `json:"room_id"`

	// The unix timestamp at which the event notification was sent,
	// in milliseconds.
	// Required: true
	Ts *int64 `json:"ts"`
}

// Validate validates this notifications items0
func (o *NotificationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRead(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *NotificationsItems0) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", o.Actions); err != nil {
		return err
	}

	return nil
}

func (o *NotificationsItems0) validateEvent(formats strfmt.Registry) error {

	if err := validate.Required("event"+"."+"content", "body", o.Event.Content); err != nil {
		return err
	}

	if err := validate.Required("event"+"."+"event_id", "body", o.Event.EventID); err != nil {
		return err
	}

	if err := validate.Required("event"+"."+"origin_server_ts", "body", o.Event.OriginServerTs); err != nil {
		return err
	}

	if err := validate.Required("event"+"."+"sender", "body", o.Event.Sender); err != nil {
		return err
	}

	if err := validate.Required("event"+"."+"state_key", "body", o.Event.StateKey); err != nil {
		return err
	}

	if err := validate.Required("event"+"."+"type", "body", o.Event.Type); err != nil {
		return err
	}

	if err := validate.Required("event"+"."+"unsigned", "body", o.Event.Unsigned); err != nil {
		return err
	}

	if o.Event.Unsigned != nil {
		if err := o.Event.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event" + "." + "unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *NotificationsItems0) validateRead(formats strfmt.Registry) error {

	if err := validate.Required("read", "body", o.Read); err != nil {
		return err
	}

	return nil
}

func (o *NotificationsItems0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

func (o *NotificationsItems0) validateTs(formats strfmt.Registry) error {

	if err := validate.Required("ts", "body", o.Ts); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *NotificationsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NotificationsItems0) UnmarshalBinary(b []byte) error {
	var res NotificationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*NotificationsItems0EventAO0Unsigned Unsigned
//
// Information about this event which was not sent by the originating homeserver
swagger:model NotificationsItems0EventAO0Unsigned
*/
type NotificationsItems0EventAO0Unsigned struct {

	// Time in milliseconds since the event was sent.
	Age int64 `json:"age,omitempty"`

	// EventContent
	//
	// Optional. The previous ``content`` for this state. This will be present only for state events appearing in the ``timeline``. If this is not a state event, or there is no previous content, this key will be missing.
	PrevContent interface{} `json:"prev_content,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// Optional. The transaction ID set when this message was sent. This key will only be present for message events sent by the device calling this API.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this notifications items0 event a o0 unsigned
func (o *NotificationsItems0EventAO0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *NotificationsItems0EventAO0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *NotificationsItems0EventAO0Unsigned) UnmarshalBinary(b []byte) error {
	var res NotificationsItems0EventAO0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
