// Code generated by go-swagger; DO NOT EDIT.

package push_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// SetPushRuleReader is a Reader for the SetPushRule structure.
type SetPushRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetPushRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetPushRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetPushRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSetPushRuleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetPushRuleOK creates a SetPushRuleOK with default headers values
func NewSetPushRuleOK() *SetPushRuleOK {
	return &SetPushRuleOK{}
}

/*SetPushRuleOK handles this case with default header values.

The push rule was created/updated.
*/
type SetPushRuleOK struct {
	Payload interface{}
}

func (o *SetPushRuleOK) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/unstable/pushrules/{scope}/{kind}/{ruleId}][%d] setPushRuleOK  %+v", 200, o.Payload)
}

func (o *SetPushRuleOK) GetPayload() interface{} {
	return o.Payload
}

func (o *SetPushRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPushRuleBadRequest creates a SetPushRuleBadRequest with default headers values
func NewSetPushRuleBadRequest() *SetPushRuleBadRequest {
	return &SetPushRuleBadRequest{}
}

/*SetPushRuleBadRequest handles this case with default header values.

There was a problem configuring this push rule.
*/
type SetPushRuleBadRequest struct {
	Payload *SetPushRuleBadRequestBody
}

func (o *SetPushRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/unstable/pushrules/{scope}/{kind}/{ruleId}][%d] setPushRuleBadRequest  %+v", 400, o.Payload)
}

func (o *SetPushRuleBadRequest) GetPayload() *SetPushRuleBadRequestBody {
	return o.Payload
}

func (o *SetPushRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SetPushRuleBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPushRuleTooManyRequests creates a SetPushRuleTooManyRequests with default headers values
func NewSetPushRuleTooManyRequests() *SetPushRuleTooManyRequests {
	return &SetPushRuleTooManyRequests{}
}

/*SetPushRuleTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type SetPushRuleTooManyRequests struct {
	Payload *SetPushRuleTooManyRequestsBody
}

func (o *SetPushRuleTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/unstable/pushrules/{scope}/{kind}/{ruleId}][%d] setPushRuleTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetPushRuleTooManyRequests) GetPayload() *SetPushRuleTooManyRequestsBody {
	return o.Payload
}

func (o *SetPushRuleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SetPushRuleTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SetPushRuleBadRequestBody A Matrix-level Error
swagger:model SetPushRuleBadRequestBody
*/
type SetPushRuleBadRequestBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this set push rule bad request body
func (o *SetPushRuleBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetPushRuleBadRequestBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("setPushRuleBadRequest"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetPushRuleBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetPushRuleBadRequestBody) UnmarshalBinary(b []byte) error {
	var res SetPushRuleBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetPushRuleBody set push rule body
swagger:model SetPushRuleBody
*/
type SetPushRuleBody struct {

	// The action(s) to perform when the conditions for this rule are met.
	// Required: true
	Actions []string `json:"actions"`

	// The conditions that must hold true for an event in order for a
	// rule to be applied to an event. A rule with no conditions
	// always matches. Only applicable to ``underride`` and ``override`` rules.
	Conditions []*ConditionsItems0 `json:"conditions"`

	// Only applicable to ``content`` rules. The glob-style pattern to match against.
	Pattern string `json:"pattern,omitempty"`
}

// Validate validates this set push rule body
func (o *SetPushRuleBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var setPushRuleBodyActionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["notify","dont_notify","coalesce","set_tweak"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		setPushRuleBodyActionsItemsEnum = append(setPushRuleBodyActionsItemsEnum, v)
	}
}

func (o *SetPushRuleBody) validateActionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, setPushRuleBodyActionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (o *SetPushRuleBody) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("pushrule"+"."+"actions", "body", o.Actions); err != nil {
		return err
	}

	for i := 0; i < len(o.Actions); i++ {

		// value enum
		if err := o.validateActionsItemsEnum("pushrule"+"."+"actions"+"."+strconv.Itoa(i), "body", o.Actions[i]); err != nil {
			return err
		}

	}

	return nil
}

func (o *SetPushRuleBody) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(o.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(o.Conditions); i++ {
		if swag.IsZero(o.Conditions[i]) { // not required
			continue
		}

		if o.Conditions[i] != nil {
			if err := o.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pushrule" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetPushRuleBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetPushRuleBody) UnmarshalBinary(b []byte) error {
	var res SetPushRuleBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetPushRuleTooManyRequestsBody The rate limit was reached for this request
swagger:model SetPushRuleTooManyRequestsBody
*/
type SetPushRuleTooManyRequestsBody struct {

	// The M_LIMIT_EXCEEDED error code
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`

	// The amount of time in milliseconds the client should wait
	// before trying the request again.
	RetryAfterMs int64 `json:"retry_after_ms,omitempty"`
}

// Validate validates this set push rule too many requests body
func (o *SetPushRuleTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetPushRuleTooManyRequestsBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("setPushRuleTooManyRequests"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetPushRuleTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetPushRuleTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res SetPushRuleTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
