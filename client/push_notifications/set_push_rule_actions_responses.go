// Code generated by go-swagger; DO NOT EDIT.

package push_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// SetPushRuleActionsReader is a Reader for the SetPushRuleActions structure.
type SetPushRuleActionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetPushRuleActionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetPushRuleActionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetPushRuleActionsOK creates a SetPushRuleActionsOK with default headers values
func NewSetPushRuleActionsOK() *SetPushRuleActionsOK {
	return &SetPushRuleActionsOK{}
}

/*SetPushRuleActionsOK handles this case with default header values.

The actions for the push rule were set.
*/
type SetPushRuleActionsOK struct {
	Payload interface{}
}

func (o *SetPushRuleActionsOK) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/unstable/pushrules/{scope}/{kind}/{ruleId}/actions][%d] setPushRuleActionsOK  %+v", 200, o.Payload)
}

func (o *SetPushRuleActionsOK) GetPayload() interface{} {
	return o.Payload
}

func (o *SetPushRuleActionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SetPushRuleActionsBody set push rule actions body
swagger:model SetPushRuleActionsBody
*/
type SetPushRuleActionsBody struct {

	// The action(s) to perform for this rule.
	// Required: true
	Actions []string `json:"actions"`
}

// Validate validates this set push rule actions body
func (o *SetPushRuleActionsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var setPushRuleActionsBodyActionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["notify","dont_notify","coalesce","set_tweak"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		setPushRuleActionsBodyActionsItemsEnum = append(setPushRuleActionsBodyActionsItemsEnum, v)
	}
}

func (o *SetPushRuleActionsBody) validateActionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, setPushRuleActionsBodyActionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (o *SetPushRuleActionsBody) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"actions", "body", o.Actions); err != nil {
		return err
	}

	for i := 0; i < len(o.Actions); i++ {

		// value enum
		if err := o.validateActionsItemsEnum("body"+"."+"actions"+"."+strconv.Itoa(i), "body", o.Actions[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetPushRuleActionsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetPushRuleActionsBody) UnmarshalBinary(b []byte) error {
	var res SetPushRuleActionsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
