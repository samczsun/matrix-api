// Code generated by go-swagger; DO NOT EDIT.

package push_notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// SetPushRuleEnabledReader is a Reader for the SetPushRuleEnabled structure.
type SetPushRuleEnabledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetPushRuleEnabledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetPushRuleEnabledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetPushRuleEnabledOK creates a SetPushRuleEnabledOK with default headers values
func NewSetPushRuleEnabledOK() *SetPushRuleEnabledOK {
	return &SetPushRuleEnabledOK{}
}

/*SetPushRuleEnabledOK handles this case with default header values.

The push rule was enabled or disabled.
*/
type SetPushRuleEnabledOK struct {
	Payload interface{}
}

func (o *SetPushRuleEnabledOK) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/unstable/pushrules/{scope}/{kind}/{ruleId}/enabled][%d] setPushRuleEnabledOK  %+v", 200, o.Payload)
}

func (o *SetPushRuleEnabledOK) GetPayload() interface{} {
	return o.Payload
}

func (o *SetPushRuleEnabledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SetPushRuleEnabledBody set push rule enabled body
swagger:model SetPushRuleEnabledBody
*/
type SetPushRuleEnabledBody struct {

	// Whether the push rule is enabled or not.
	// Required: true
	Enabled *bool `json:"enabled"`
}

// Validate validates this set push rule enabled body
func (o *SetPushRuleEnabledBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetPushRuleEnabledBody) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"enabled", "body", o.Enabled); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetPushRuleEnabledBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetPushRuleEnabledBody) UnmarshalBinary(b []byte) error {
	var res SetPushRuleEnabledBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
