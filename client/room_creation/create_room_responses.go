// Code generated by go-swagger; DO NOT EDIT.

package room_creation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// CreateRoomReader is a Reader for the CreateRoom structure.
type CreateRoomReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRoomReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateRoomOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateRoomBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateRoomOK creates a CreateRoomOK with default headers values
func NewCreateRoomOK() *CreateRoomOK {
	return &CreateRoomOK{}
}

/*CreateRoomOK handles this case with default header values.

Information about the newly created room.
*/
type CreateRoomOK struct {
	Payload *CreateRoomOKBody
}

func (o *CreateRoomOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/createRoom][%d] createRoomOK  %+v", 200, o.Payload)
}

func (o *CreateRoomOK) GetPayload() *CreateRoomOKBody {
	return o.Payload
}

func (o *CreateRoomOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateRoomOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRoomBadRequest creates a CreateRoomBadRequest with default headers values
func NewCreateRoomBadRequest() *CreateRoomBadRequest {
	return &CreateRoomBadRequest{}
}

/*CreateRoomBadRequest handles this case with default header values.


The request is invalid. A meaningful ``errcode`` and description
error text will be returned. Example reasons for rejection include:

- The request body is malformed (``errcode`` set to ``M_BAD_JSON``
  or ``M_NOT_JSON``).

- The room alias specified is already taken (``errcode`` set to
  ``M_ROOM_IN_USE``).

- The initial state implied by the parameters to the request is
  invalid: for example, the user's ``power_level`` is set below
  that necessary to set the room name (``errcode`` set to
  ``M_INVALID_ROOM_STATE``).

- The homeserver doesn't support the requested room version, or
  one or more users being invited to the new room are residents
  of a homeserver which does not support the requested room version.
  The ``errcode`` will be ``M_UNSUPPORTED_ROOM_VERSION`` in these
  cases.
*/
type CreateRoomBadRequest struct {
	Payload *CreateRoomBadRequestBody
}

func (o *CreateRoomBadRequest) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/createRoom][%d] createRoomBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRoomBadRequest) GetPayload() *CreateRoomBadRequestBody {
	return o.Payload
}

func (o *CreateRoomBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateRoomBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateRoomBadRequestBody A Matrix-level Error
swagger:model CreateRoomBadRequestBody
*/
type CreateRoomBadRequestBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this create room bad request body
func (o *CreateRoomBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateRoomBadRequestBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("createRoomBadRequest"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateRoomBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateRoomBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateRoomBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateRoomBody create room body
swagger:model CreateRoomBody
*/
type CreateRoomBody struct {

	// CreationContent
	//
	// Extra keys, such as ``m.federate``, to be added to the content
	// of the `m.room.create`_ event. The server will clobber the following
	// keys: ``creator``, ``room_version``. Future versions of the specification
	// may allow the server to clobber other keys.
	CreationContent interface{} `json:"creation_content,omitempty"`

	// A list of state events to set in the new room. This allows
	// the user to override the default state events set in the new
	// room. The expected format of the state events are an object
	// with type, state_key and content keys set.
	//
	// Takes precedence over events set by ``preset``, but gets
	// overriden by ``name`` and ``topic`` keys.
	InitialState []*InitialStateItems0 `json:"initial_state"`

	// A list of user IDs to invite to the room. This will tell the
	// server to invite everyone in the list to the newly created room.
	Invite []string `json:"invite"`

	// A list of objects representing third party IDs to invite into
	// the room.
	Invite3pid []*Invite3pidItems0 `json:"invite_3pid"`

	// This flag makes the server set the ``is_direct`` flag on the
	// ``m.room.member`` events sent to the users in ``invite`` and
	// ``invite_3pid``. See `Direct Messaging`_ for more information.
	IsDirect bool `json:"is_direct,omitempty"`

	// If this is included, an ``m.room.name`` event will be sent
	// into the room to indicate the name of the room. See Room
	// Events for more information on ``m.room.name``.
	Name string `json:"name,omitempty"`

	// Power Level Event Content
	//
	// The power level content to override in the default power level
	// event. This object is applied on top of the generated `m.room.power_levels`_
	// event content prior to it being sent to the room. Defaults to
	// overriding nothing.
	PowerLevelContentOverride interface{} `json:"power_level_content_override,omitempty"`

	// Convenience parameter for setting various default state events
	// based on a preset.
	//
	// If unspecified, the server should use the ``visibility`` to determine
	// which preset to use. A visbility of ``public`` equates to a preset of
	// ``public_chat`` and ``private`` visibility equates to a preset of
	// ``private_chat``.
	// Enum: [private_chat public_chat trusted_private_chat]
	Preset string `json:"preset,omitempty"`

	// The desired room alias **local part**. If this is included, a
	// room alias will be created and mapped to the newly created
	// room. The alias will belong on the *same* homeserver which
	// created the room. For example, if this was set to "foo" and
	// sent to the homeserver "example.com" the complete room alias
	// would be ``#foo:example.com``.
	//
	// The complete room alias will become the canonical alias for
	// the room.
	RoomAliasName string `json:"room_alias_name,omitempty"`

	// The room version to set for the room. If not provided, the homeserver is
	// to use its configured default. If provided, the homeserver will return a
	// 400 error with the errcode ``M_UNSUPPORTED_ROOM_VERSION`` if it does not
	// support the room version.
	RoomVersion string `json:"room_version,omitempty"`

	// If this is included, an ``m.room.topic`` event will be sent
	// into the room to indicate the topic for the room. See Room
	// Events for more information on ``m.room.topic``.
	Topic string `json:"topic,omitempty"`

	// A ``public`` visibility indicates that the room will be shown
	// in the published room list. A ``private`` visibility will hide
	// the room from the published room list. Rooms default to
	// ``private`` visibility if this key is not included. NB: This
	// should not be confused with ``join_rules`` which also uses the
	// word ``public``.
	// Enum: [public private]
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this create room body
func (o *CreateRoomBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInitialState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvite3pid(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePreset(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateRoomBody) validateInitialState(formats strfmt.Registry) error {

	if swag.IsZero(o.InitialState) { // not required
		return nil
	}

	for i := 0; i < len(o.InitialState); i++ {
		if swag.IsZero(o.InitialState[i]) { // not required
			continue
		}

		if o.InitialState[i] != nil {
			if err := o.InitialState[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "initial_state" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *CreateRoomBody) validateInvite3pid(formats strfmt.Registry) error {

	if swag.IsZero(o.Invite3pid) { // not required
		return nil
	}

	for i := 0; i < len(o.Invite3pid); i++ {
		if swag.IsZero(o.Invite3pid[i]) { // not required
			continue
		}

		if o.Invite3pid[i] != nil {
			if err := o.Invite3pid[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "invite_3pid" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var createRoomBodyTypePresetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["private_chat","public_chat","trusted_private_chat"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createRoomBodyTypePresetPropEnum = append(createRoomBodyTypePresetPropEnum, v)
	}
}

const (

	// CreateRoomBodyPresetPrivateChat captures enum value "private_chat"
	CreateRoomBodyPresetPrivateChat string = "private_chat"

	// CreateRoomBodyPresetPublicChat captures enum value "public_chat"
	CreateRoomBodyPresetPublicChat string = "public_chat"

	// CreateRoomBodyPresetTrustedPrivateChat captures enum value "trusted_private_chat"
	CreateRoomBodyPresetTrustedPrivateChat string = "trusted_private_chat"
)

// prop value enum
func (o *CreateRoomBody) validatePresetEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createRoomBodyTypePresetPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *CreateRoomBody) validatePreset(formats strfmt.Registry) error {

	if swag.IsZero(o.Preset) { // not required
		return nil
	}

	// value enum
	if err := o.validatePresetEnum("body"+"."+"preset", "body", o.Preset); err != nil {
		return err
	}

	return nil
}

var createRoomBodyTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","private"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createRoomBodyTypeVisibilityPropEnum = append(createRoomBodyTypeVisibilityPropEnum, v)
	}
}

const (

	// CreateRoomBodyVisibilityPublic captures enum value "public"
	CreateRoomBodyVisibilityPublic string = "public"

	// CreateRoomBodyVisibilityPrivate captures enum value "private"
	CreateRoomBodyVisibilityPrivate string = "private"
)

// prop value enum
func (o *CreateRoomBody) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createRoomBodyTypeVisibilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *CreateRoomBody) validateVisibility(formats strfmt.Registry) error {

	if swag.IsZero(o.Visibility) { // not required
		return nil
	}

	// value enum
	if err := o.validateVisibilityEnum("body"+"."+"visibility", "body", o.Visibility); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateRoomBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateRoomBody) UnmarshalBinary(b []byte) error {
	var res CreateRoomBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateRoomOKBody Information about the newly created room.
swagger:model CreateRoomOKBody
*/
type CreateRoomOKBody struct {

	// The created room's ID.
	// Required: true
	RoomID *string `json:"room_id"`
}

// Validate validates this create room o k body
func (o *CreateRoomOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateRoomOKBody) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("createRoomOK"+"."+"room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateRoomOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateRoomOKBody) UnmarshalBinary(b []byte) error {
	var res CreateRoomOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*InitialStateItems0 StateEvent
swagger:model InitialStateItems0
*/
type InitialStateItems0 struct {

	// The content of the event.
	// Required: true
	Content interface{} `json:"content"`

	// The state_key of the state event. Defaults to an empty string.
	StateKey string `json:"state_key,omitempty"`

	// The type of event to send.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this initial state items0
func (o *InitialStateItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *InitialStateItems0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *InitialStateItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *InitialStateItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InitialStateItems0) UnmarshalBinary(b []byte) error {
	var res InitialStateItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*Invite3pidItems0 Invite3pid
swagger:model Invite3pidItems0
*/
type Invite3pidItems0 struct {

	// The invitee's third party identifier.
	// Required: true
	Address *string `json:"address"`

	// An access token previously registered with the identity server. Servers
	// can treat this as optional to distinguish between r0.5-compatible clients
	// and this specification version.
	// Required: true
	IDAccessToken *string `json:"id_access_token"`

	// The hostname+port of the identity server which should be used for third party identifier lookups.
	// Required: true
	IDServer *string `json:"id_server"`

	// The kind of address being passed in the address field, for example ``email``.
	// Required: true
	Medium *string `json:"medium"`
}

// Validate validates this invite3pid items0
func (o *Invite3pidItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIDAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIDServer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMedium(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *Invite3pidItems0) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", o.Address); err != nil {
		return err
	}

	return nil
}

func (o *Invite3pidItems0) validateIDAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("id_access_token", "body", o.IDAccessToken); err != nil {
		return err
	}

	return nil
}

func (o *Invite3pidItems0) validateIDServer(formats strfmt.Registry) error {

	if err := validate.Required("id_server", "body", o.IDServer); err != nil {
		return err
	}

	return nil
}

func (o *Invite3pidItems0) validateMedium(formats strfmt.Registry) error {

	if err := validate.Required("medium", "body", o.Medium); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *Invite3pidItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *Invite3pidItems0) UnmarshalBinary(b []byte) error {
	var res Invite3pidItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
