// Code generated by go-swagger; DO NOT EDIT.

package send_to_device_messaging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSendToDeviceParams creates a new SendToDeviceParams object
// with the default values initialized.
func NewSendToDeviceParams() *SendToDeviceParams {
	var ()
	return &SendToDeviceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSendToDeviceParamsWithTimeout creates a new SendToDeviceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSendToDeviceParamsWithTimeout(timeout time.Duration) *SendToDeviceParams {
	var ()
	return &SendToDeviceParams{

		timeout: timeout,
	}
}

// NewSendToDeviceParamsWithContext creates a new SendToDeviceParams object
// with the default values initialized, and the ability to set a context for a request
func NewSendToDeviceParamsWithContext(ctx context.Context) *SendToDeviceParams {
	var ()
	return &SendToDeviceParams{

		Context: ctx,
	}
}

// NewSendToDeviceParamsWithHTTPClient creates a new SendToDeviceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSendToDeviceParamsWithHTTPClient(client *http.Client) *SendToDeviceParams {
	var ()
	return &SendToDeviceParams{
		HTTPClient: client,
	}
}

/*SendToDeviceParams contains all the parameters to send to the API endpoint
for the send to device operation typically these are written to a http.Request
*/
type SendToDeviceParams struct {

	/*Body*/
	Body SendToDeviceBody
	/*EventType
	  The type of event to send.

	*/
	EventType string
	/*TxnID
	  The transaction ID for this event. Clients should generate an
	ID unique across requests with the same access token; it will be
	used by the server to ensure idempotency of requests.

	*/
	TxnID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the send to device params
func (o *SendToDeviceParams) WithTimeout(timeout time.Duration) *SendToDeviceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the send to device params
func (o *SendToDeviceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the send to device params
func (o *SendToDeviceParams) WithContext(ctx context.Context) *SendToDeviceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the send to device params
func (o *SendToDeviceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the send to device params
func (o *SendToDeviceParams) WithHTTPClient(client *http.Client) *SendToDeviceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the send to device params
func (o *SendToDeviceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the send to device params
func (o *SendToDeviceParams) WithBody(body SendToDeviceBody) *SendToDeviceParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the send to device params
func (o *SendToDeviceParams) SetBody(body SendToDeviceBody) {
	o.Body = body
}

// WithEventType adds the eventType to the send to device params
func (o *SendToDeviceParams) WithEventType(eventType string) *SendToDeviceParams {
	o.SetEventType(eventType)
	return o
}

// SetEventType adds the eventType to the send to device params
func (o *SendToDeviceParams) SetEventType(eventType string) {
	o.EventType = eventType
}

// WithTxnID adds the txnID to the send to device params
func (o *SendToDeviceParams) WithTxnID(txnID string) *SendToDeviceParams {
	o.SetTxnID(txnID)
	return o
}

// SetTxnID adds the txnId to the send to device params
func (o *SendToDeviceParams) SetTxnID(txnID string) {
	o.TxnID = txnID
}

// WriteToRequest writes these params to a swagger request
func (o *SendToDeviceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param eventType
	if err := r.SetPathParam("eventType", o.EventType); err != nil {
		return err
	}

	// path param txnId
	if err := r.SetPathParam("txnId", o.TxnID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
