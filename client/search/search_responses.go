// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// SearchReader is a Reader for the Search structure.
type SearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSearchTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSearchOK creates a SearchOK with default headers values
func NewSearchOK() *SearchOK {
	return &SearchOK{}
}

/*SearchOK handles this case with default header values.

Results of the search.
*/
type SearchOK struct {
	Payload *SearchOKBody
}

func (o *SearchOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/search][%d] searchOK  %+v", 200, o.Payload)
}

func (o *SearchOK) GetPayload() *SearchOKBody {
	return o.Payload
}

func (o *SearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchBadRequest creates a SearchBadRequest with default headers values
func NewSearchBadRequest() *SearchBadRequest {
	return &SearchBadRequest{}
}

/*SearchBadRequest handles this case with default header values.

Part of the request was invalid.
*/
type SearchBadRequest struct {
}

func (o *SearchBadRequest) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/search][%d] searchBadRequest ", 400)
}

func (o *SearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchTooManyRequests creates a SearchTooManyRequests with default headers values
func NewSearchTooManyRequests() *SearchTooManyRequests {
	return &SearchTooManyRequests{}
}

/*SearchTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type SearchTooManyRequests struct {
	Payload *SearchTooManyRequestsBody
}

func (o *SearchTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/search][%d] searchTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchTooManyRequests) GetPayload() *SearchTooManyRequestsBody {
	return o.Payload
}

func (o *SearchTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SearchBody search body
swagger:model SearchBody
*/
type SearchBody struct {

	// search categories
	// Required: true
	SearchCategories *SearchParamsBodySearchCategories `json:"search_categories"`
}

// Validate validates this search body
func (o *SearchBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSearchCategories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchBody) validateSearchCategories(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"search_categories", "body", o.SearchCategories); err != nil {
		return err
	}

	if o.SearchCategories != nil {
		if err := o.SearchCategories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "search_categories")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchBody) UnmarshalBinary(b []byte) error {
	var res SearchBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBody Results
swagger:model SearchOKBody
*/
type SearchOKBody struct {

	// search categories
	// Required: true
	SearchCategories *SearchOKBodySearchCategories `json:"search_categories"`
}

// Validate validates this search o k body
func (o *SearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSearchCategories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBody) validateSearchCategories(formats strfmt.Registry) error {

	if err := validate.Required("searchOK"+"."+"search_categories", "body", o.SearchCategories); err != nil {
		return err
	}

	if o.SearchCategories != nil {
		if err := o.SearchCategories.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("searchOK" + "." + "search_categories")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBody) UnmarshalBinary(b []byte) error {
	var res SearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategories Result Categories
//
// Describes which categories to search in and their criteria.
swagger:model SearchOKBodySearchCategories
*/
type SearchOKBodySearchCategories struct {

	// room events
	RoomEvents *SearchOKBodySearchCategoriesRoomEvents `json:"room_events,omitempty"`
}

// Validate validates this search o k body search categories
func (o *SearchOKBodySearchCategories) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRoomEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategories) validateRoomEvents(formats strfmt.Registry) error {

	if swag.IsZero(o.RoomEvents) { // not required
		return nil
	}

	if o.RoomEvents != nil {
		if err := o.RoomEvents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("searchOK" + "." + "search_categories" + "." + "room_events")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategories) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategories) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategories
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEvents Result Room Events
//
// Mapping of category name to search criteria.
swagger:model SearchOKBodySearchCategoriesRoomEvents
*/
type SearchOKBodySearchCategoriesRoomEvents struct {

	// An approximate count of the total number of results found.
	Count int64 `json:"count,omitempty"`

	// Groups
	//
	// Any groups that were requested.
	//
	// The outer ``string`` key is the group key requested (eg: ``room_id``
	// or ``sender``). The inner ``string`` key is the grouped value (eg:
	// a room's ID or a user's ID).
	Groups map[string]map[string]SearchOKBodySearchCategoriesRoomEventsGroupsAnon `json:"groups,omitempty"`

	// Highlights
	//
	// List of words which should be highlighted, useful for stemming which may change the query terms.
	Highlights []string `json:"highlights"`

	// Next Batch
	//
	// Token that can be used to get the next batch of
	// results, by passing as the `next_batch` parameter to
	// the next call. If this field is absent, there are no
	// more results.
	NextBatch string `json:"next_batch,omitempty"`

	// Results
	//
	// List of results in the requested order.
	Results []*SearchOKBodySearchCategoriesRoomEventsResultsItems0 `json:"results"`

	// Current state
	//
	// The current state for every room in the results.
	// This is included if the request had the
	// ``include_state`` key set with a value of ``true``.
	//
	// The ``string`` key is the room ID for which the ``State
	// Event`` array belongs to.
	State map[string][]SearchOKBodySearchCategoriesRoomEventsStateItems0 `json:"state,omitempty"`
}

// Validate validates this search o k body search categories room events
func (o *SearchOKBodySearchCategoriesRoomEvents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEvents) validateGroups(formats strfmt.Registry) error {

	if swag.IsZero(o.Groups) { // not required
		return nil
	}

	for k := range o.Groups {

		for kk := range o.Groups[k] {

			if swag.IsZero(o.Groups[k][kk]) { // not required
				continue
			}
			if val, ok := o.Groups[k][kk]; ok {
				if err := val.Validate(formats); err != nil {
					return err
				}
			}

		}

	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEvents) validateResults(formats strfmt.Registry) error {

	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchOK" + "." + "search_categories" + "." + "room_events" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEvents) validateState(formats strfmt.Registry) error {

	if swag.IsZero(o.State) { // not required
		return nil
	}

	for k := range o.State {

		if err := validate.Required("searchOK"+"."+"search_categories"+"."+"room_events"+"."+"state"+"."+k, "body", o.State[k]); err != nil {
			return err
		}

		for i := 0; i < len(o.State[k]); i++ {

			if err := o.State[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchOK" + "." + "search_categories" + "." + "room_events" + "." + "state" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEvents) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEvents) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEvents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsGroupsAnon Group Value
//
// The results for a particular group value.
swagger:model SearchOKBodySearchCategoriesRoomEventsGroupsAnon
*/
type SearchOKBodySearchCategoriesRoomEventsGroupsAnon struct {

	// Next Batch in Group
	//
	// Token that can be used to get the next batch
	// of results in the group, by passing as the
	// `next_batch` parameter to the next call. If
	// this field is absent, there are no more
	// results in this group.
	NextBatch string `json:"next_batch,omitempty"`

	// Group Order
	//
	// Key that can be used to order different
	// groups.
	Order int64 `json:"order,omitempty"`

	// Which results are in this group.
	Results []string `json:"results"`
}

// Validate validates this search o k body search categories room events groups anon
func (o *SearchOKBodySearchCategoriesRoomEventsGroupsAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsGroupsAnon) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsGroupsAnon) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsGroupsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0 Result
//
// The result object.
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0 struct {

	// context
	Context *SearchOKBodySearchCategoriesRoomEventsResultsItems0Context `json:"context,omitempty"`

	// A number that describes how closely this result matches the search. Higher is closer.
	Rank float64 `json:"rank,omitempty"`

	// result
	Result *SearchOKBodySearchCategoriesRoomEventsResultsItems0Result `json:"result,omitempty"`
}

// Validate validates this search o k body search categories room events results items0
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContext(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0) validateContext(formats strfmt.Registry) error {

	if swag.IsZero(o.Context) { // not required
		return nil
	}

	if o.Context != nil {
		if err := o.Context.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("context")
			}
			return err
		}
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	if o.Result != nil {
		if err := o.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0Context Event Context
//
// Context for result, if requested.
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0Context
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0Context struct {

	// End Token
	//
	// Pagination token for the end of the chunk
	End string `json:"end,omitempty"`

	// Events After
	//
	// Events just after the result.
	EventsAfter []*SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0 `json:"events_after"`

	// Events Before
	//
	// Events just before the result.
	EventsBefore []*SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0 `json:"events_before"`

	// Profile Information
	//
	// The historic profile information of the
	// users that sent the events returned.
	//
	// The ``string`` key is the user ID for which
	// the profile belongs to.
	ProfileInfo map[string]SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextProfileInfoAnon `json:"profile_info,omitempty"`

	// Start Token
	//
	// Pagination token for the start of the chunk
	Start string `json:"start,omitempty"`
}

// Validate validates this search o k body search categories room events results items0 context
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0Context) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEventsAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventsBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateProfileInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0Context) validateEventsAfter(formats strfmt.Registry) error {

	if swag.IsZero(o.EventsAfter) { // not required
		return nil
	}

	for i := 0; i < len(o.EventsAfter); i++ {
		if swag.IsZero(o.EventsAfter[i]) { // not required
			continue
		}

		if o.EventsAfter[i] != nil {
			if err := o.EventsAfter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("context" + "." + "events_after" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0Context) validateEventsBefore(formats strfmt.Registry) error {

	if swag.IsZero(o.EventsBefore) { // not required
		return nil
	}

	for i := 0; i < len(o.EventsBefore); i++ {
		if swag.IsZero(o.EventsBefore[i]) { // not required
			continue
		}

		if o.EventsBefore[i] != nil {
			if err := o.EventsBefore[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("context" + "." + "events_before" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0Context) validateProfileInfo(formats strfmt.Registry) error {

	if swag.IsZero(o.ProfileInfo) { // not required
		return nil
	}

	for k := range o.ProfileInfo {

		if swag.IsZero(o.ProfileInfo[k]) { // not required
			continue
		}
		if val, ok := o.ProfileInfo[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0Context) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0Context) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0Context
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0 Event
//
// Room Events have the following fields.
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0 struct {
	SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0 = aO0

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0); err != nil {
		return err
	}
	o.RoomID = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0 struct {
		RoomID *string `json:"room_id"`
	}
	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0.RoomID = o.RoomID

	jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0, errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0 := swag.WriteJSON(propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0)
	if errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0 != nil {
		return nil, errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0
	}
	_parts = append(_parts, jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search o k body search categories room events results items0 context events after items0
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0
	if err := o.SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0); err != nil {
		return err
	}
	o.EventID = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0.EventID

	o.OriginServerTs = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0.OriginServerTs

	o.Sender = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0.Sender

	o.Unsigned = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0.EventID = o.EventID

	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0.OriginServerTs = o.OriginServerTs

	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0.Sender = o.Sender

	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0, errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0 := swag.WriteJSON(propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0)
	if errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0 != nil {
		return nil, errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0
	}
	_parts = append(_parts, jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search o k body search categories room events results items0 context events after items0 all of0
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0Unsigned
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this search o k body search categories room events results items0 context events after items0 all of0 unsigned
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsAfterItems0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0 Event
//
// Room Events have the following fields.
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0 struct {
	SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0 = aO0

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0); err != nil {
		return err
	}
	o.RoomID = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0 struct {
		RoomID *string `json:"room_id"`
	}
	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0.RoomID = o.RoomID

	jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0, errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0 := swag.WriteJSON(propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0)
	if errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0 != nil {
		return nil, errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0
	}
	_parts = append(_parts, jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search o k body search categories room events results items0 context events before items0
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0
	if err := o.SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0); err != nil {
		return err
	}
	o.EventID = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0.EventID

	o.OriginServerTs = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0.OriginServerTs

	o.Sender = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0.Sender

	o.Unsigned = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0.EventID = o.EventID

	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0.OriginServerTs = o.OriginServerTs

	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0.Sender = o.Sender

	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0, errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0 := swag.WriteJSON(propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0)
	if errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0 != nil {
		return nil, errSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0
	}
	_parts = append(_parts, jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search o k body search categories room events results items0 context events before items0 all of0
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0Unsigned
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this search o k body search categories room events results items0 context events before items0 all of0 unsigned
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextEventsBeforeItems0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextProfileInfoAnon User Profile
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextProfileInfoAnon
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextProfileInfoAnon struct {

	// Avatar Url
	AvatarURL string `json:"avatar_url,omitempty"`

	// Display name
	Displayname string `json:"displayname,omitempty"`
}

// Validate validates this search o k body search categories room events results items0 context profile info anon
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextProfileInfoAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextProfileInfoAnon) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextProfileInfoAnon) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0ContextProfileInfoAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0Result Event
//
// The event that matched.
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0Result
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0Result struct {
	SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0Result) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0 = aO0

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0Result struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsSearchOKBodySearchCategoriesRoomEventsResultsItems0Result); err != nil {
		return err
	}
	o.RoomID = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0Result.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SearchOKBodySearchCategoriesRoomEventsResultsItems0Result) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0Result struct {
		RoomID *string `json:"room_id"`
	}
	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0Result.RoomID = o.RoomID

	jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0Result, errSearchOKBodySearchCategoriesRoomEventsResultsItems0Result := swag.WriteJSON(propsSearchOKBodySearchCategoriesRoomEventsResultsItems0Result)
	if errSearchOKBodySearchCategoriesRoomEventsResultsItems0Result != nil {
		return nil, errSearchOKBodySearchCategoriesRoomEventsResultsItems0Result
	}
	_parts = append(_parts, jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0Result)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search o k body search categories room events results items0 result
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0Result) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0
	if err := o.SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0Result) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("result"+"."+"room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0Result) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0Result) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0Result
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0); err != nil {
		return err
	}
	o.EventID = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0.EventID

	o.OriginServerTs = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0.OriginServerTs

	o.Sender = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0.Sender

	o.Unsigned = propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0.EventID = o.EventID

	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0.OriginServerTs = o.OriginServerTs

	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0.Sender = o.Sender

	propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0.Unsigned = o.Unsigned

	jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0, errSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0 := swag.WriteJSON(propsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0)
	if errSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0 != nil {
		return nil, errSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0
	}
	_parts = append(_parts, jsonDataPropsSearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search o k body search categories room events results items0 result all of0
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0Unsigned
*/
type SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this search o k body search categories room events results items0 result all of0 unsigned
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsResultsItems0ResultAllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsStateItems0 State Event
//
// State Events have the following fields.
swagger:model SearchOKBodySearchCategoriesRoomEventsStateItems0
*/
type SearchOKBodySearchCategoriesRoomEventsStateItems0 struct {
	SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0

	SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0 = aO0

	// AO1
	var aO1 SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SearchOKBodySearchCategoriesRoomEventsStateItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search o k body search categories room events state items0
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0
	if err := o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1
	if err := o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsStateItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0 Room Event
//
// Room Events have the following fields.
swagger:model SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0
*/
type SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0 struct {
	SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0 = aO0

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0); err != nil {
		return err
	}
	o.RoomID = propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0.RoomID = o.RoomID

	jsonDataPropsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0, errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0 := swag.WriteJSON(propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0)
	if errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0 != nil {
		return nil, errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0
	}
	_parts = append(_parts, jsonDataPropsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search o k body search categories room events state items0 all of0
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0
	if err := o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0
*/
type SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0); err != nil {
		return err
	}
	o.EventID = propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0.EventID

	o.OriginServerTs = propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0.OriginServerTs

	o.Sender = propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0.Sender

	o.Unsigned = propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0.EventID = o.EventID

	propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0.OriginServerTs = o.OriginServerTs

	propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0.Sender = o.Sender

	propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0, errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0 := swag.WriteJSON(propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0)
	if errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0 != nil {
		return nil, errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search o k body search categories room events state items0 all of0 all of0
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0Unsigned
*/
type SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this search o k body search categories room events state items0 all of0 all of0 unsigned
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1 State Event
//
// In addition to the Room Event fields, State Events have the following additional fields.
swagger:model SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1
*/
type SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1 struct {
	SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0

	// EventContent
	//
	// Optional. The previous ``content`` for this event. If there is no previous content, this key will be missing.
	PrevContent interface{} `json:"prev_content,omitempty"`

	// A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
	// State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
	// Required: true
	StateKey *string `json:"state_key"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0 = aO0

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	if err := swag.ReadJSON(raw, &propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1); err != nil {
		return err
	}
	o.PrevContent = propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1.PrevContent

	o.StateKey = propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1.StateKey

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1.PrevContent = o.PrevContent

	propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1.StateKey = o.StateKey

	jsonDataPropsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1, errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1 := swag.WriteJSON(propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1)
	if errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1 != nil {
		return nil, errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1
	}
	_parts = append(_parts, jsonDataPropsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search o k body search categories room events state items0 all of1
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0
	if err := o.SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1) validateStateKey(formats strfmt.Registry) error {

	if err := validate.Required("state_key", "body", o.StateKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0
*/
type SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0); err != nil {
		return err
	}
	o.EventID = propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0.EventID

	o.OriginServerTs = propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0.OriginServerTs

	o.Sender = propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0.Sender

	o.Unsigned = propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0.EventID = o.EventID

	propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0.OriginServerTs = o.OriginServerTs

	propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0.Sender = o.Sender

	propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0.Unsigned = o.Unsigned

	jsonDataPropsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0, errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0 := swag.WriteJSON(propsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0)
	if errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0 != nil {
		return nil, errSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0
	}
	_parts = append(_parts, jsonDataPropsSearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this search o k body search categories room events state items0 all of1 all of0
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0Unsigned
*/
type SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this search o k body search categories room events state items0 all of1 all of0 unsigned
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res SearchOKBodySearchCategoriesRoomEventsStateItems0AllOf1AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchParamsBodySearchCategories Categories
//
// Describes which categories to search in and their criteria.
swagger:model SearchParamsBodySearchCategories
*/
type SearchParamsBodySearchCategories struct {

	// room events
	RoomEvents *SearchParamsBodySearchCategoriesRoomEvents `json:"room_events,omitempty"`
}

// Validate validates this search params body search categories
func (o *SearchParamsBodySearchCategories) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRoomEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchParamsBodySearchCategories) validateRoomEvents(formats strfmt.Registry) error {

	if swag.IsZero(o.RoomEvents) { // not required
		return nil
	}

	if o.RoomEvents != nil {
		if err := o.RoomEvents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "search_categories" + "." + "room_events")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchParamsBodySearchCategories) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchParamsBodySearchCategories) UnmarshalBinary(b []byte) error {
	var res SearchParamsBodySearchCategories
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchParamsBodySearchCategoriesRoomEvents Room Events Criteria
//
// Mapping of category name to search criteria.
swagger:model SearchParamsBodySearchCategoriesRoomEvents
*/
type SearchParamsBodySearchCategoriesRoomEvents struct {

	// event context
	EventContext *SearchParamsBodySearchCategoriesRoomEventsEventContext `json:"event_context,omitempty"`

	// Filter
	//
	// This takes a `filter`_.
	Filter struct {

		// The maximum number of events to return.
		Limit int64 `json:"limit,omitempty"`

		// A list of sender IDs to exclude. If this list is absent then no senders are excluded. A matching sender will be excluded even if it is listed in the ``'senders'`` filter.
		NotSenders []string `json:"not_senders"`

		// A list of event types to exclude. If this list is absent then no event types are excluded. A matching type will be excluded even if it is listed in the ``'types'`` filter. A '*' can be used as a wildcard to match any sequence of characters.
		NotTypes []string `json:"not_types"`

		// A list of senders IDs to include. If this list is absent then all senders are included.
		Senders []string `json:"senders"`

		// A list of event types to include. If this list is absent then all event types are included. A ``'*'`` can be used as a wildcard to match any sequence of characters.
		Types []string `json:"types"`

		// If ``true``, includes only events with a ``url`` key in their content. If ``false``, excludes those events. If omitted, ``url`` key is not considered for filtering.
		ContainsURL bool `json:"contains_url,omitempty"`

		// If ``true``, sends all membership events for all events, even if they have already
		// been sent to the client. Does not
		// apply unless ``lazy_load_members`` is ``true``. See
		// `Lazy-loading room members <#lazy-loading-room-members>`_
		// for more information. Defaults to ``false``.
		IncludeRedundantMembers bool `json:"include_redundant_members,omitempty"`

		// If ``true``, enables lazy-loading of membership events. See
		// `Lazy-loading room members <#lazy-loading-room-members>`_
		// for more information. Defaults to ``false``.
		LazyLoadMembers bool `json:"lazy_load_members,omitempty"`

		// A list of room IDs to exclude. If this list is absent then no rooms are excluded. A matching room will be excluded even if it is listed in the ``'rooms'`` filter.
		NotRooms []string `json:"not_rooms"`

		// A list of room IDs to include. If this list is absent then all rooms are included.
		Rooms []string `json:"rooms"`
	} `json:"filter,omitempty"`

	// groupings
	Groupings *SearchParamsBodySearchCategoriesRoomEventsGroupings `json:"groupings,omitempty"`

	// Include current state
	//
	// Requests the server return the current state for
	// each room returned.
	IncludeState bool `json:"include_state,omitempty"`

	// The keys to search. Defaults to all.
	Keys []string `json:"keys"`

	// Ordering
	//
	// The order in which to search for results.
	// By default, this is ``"rank"``.
	// Enum: [recent rank]
	OrderBy string `json:"order_by,omitempty"`

	// The string to search events for
	// Required: true
	SearchTerm *string `json:"search_term"`
}

// Validate validates this search params body search categories room events
func (o *SearchParamsBodySearchCategoriesRoomEvents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEventContext(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGroupings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOrderBy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSearchTerm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchParamsBodySearchCategoriesRoomEvents) validateEventContext(formats strfmt.Registry) error {

	if swag.IsZero(o.EventContext) { // not required
		return nil
	}

	if o.EventContext != nil {
		if err := o.EventContext.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "search_categories" + "." + "room_events" + "." + "event_context")
			}
			return err
		}
	}

	return nil
}

func (o *SearchParamsBodySearchCategoriesRoomEvents) validateFilter(formats strfmt.Registry) error {

	if swag.IsZero(o.Filter) { // not required
		return nil
	}

	return nil
}

func (o *SearchParamsBodySearchCategoriesRoomEvents) validateGroupings(formats strfmt.Registry) error {

	if swag.IsZero(o.Groupings) { // not required
		return nil
	}

	if o.Groupings != nil {
		if err := o.Groupings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "search_categories" + "." + "room_events" + "." + "groupings")
			}
			return err
		}
	}

	return nil
}

var searchParamsBodySearchCategoriesRoomEventsKeysItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["content.body","content.name","content.topic"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchParamsBodySearchCategoriesRoomEventsKeysItemsEnum = append(searchParamsBodySearchCategoriesRoomEventsKeysItemsEnum, v)
	}
}

func (o *SearchParamsBodySearchCategoriesRoomEvents) validateKeysItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, searchParamsBodySearchCategoriesRoomEventsKeysItemsEnum); err != nil {
		return err
	}
	return nil
}

func (o *SearchParamsBodySearchCategoriesRoomEvents) validateKeys(formats strfmt.Registry) error {

	if swag.IsZero(o.Keys) { // not required
		return nil
	}

	for i := 0; i < len(o.Keys); i++ {

		// value enum
		if err := o.validateKeysItemsEnum("body"+"."+"search_categories"+"."+"room_events"+"."+"keys"+"."+strconv.Itoa(i), "body", o.Keys[i]); err != nil {
			return err
		}

	}

	return nil
}

var searchParamsBodySearchCategoriesRoomEventsTypeOrderByPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["recent","rank"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchParamsBodySearchCategoriesRoomEventsTypeOrderByPropEnum = append(searchParamsBodySearchCategoriesRoomEventsTypeOrderByPropEnum, v)
	}
}

const (

	// SearchParamsBodySearchCategoriesRoomEventsOrderByRecent captures enum value "recent"
	SearchParamsBodySearchCategoriesRoomEventsOrderByRecent string = "recent"

	// SearchParamsBodySearchCategoriesRoomEventsOrderByRank captures enum value "rank"
	SearchParamsBodySearchCategoriesRoomEventsOrderByRank string = "rank"
)

// prop value enum
func (o *SearchParamsBodySearchCategoriesRoomEvents) validateOrderByEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, searchParamsBodySearchCategoriesRoomEventsTypeOrderByPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *SearchParamsBodySearchCategoriesRoomEvents) validateOrderBy(formats strfmt.Registry) error {

	if swag.IsZero(o.OrderBy) { // not required
		return nil
	}

	// value enum
	if err := o.validateOrderByEnum("body"+"."+"search_categories"+"."+"room_events"+"."+"order_by", "body", o.OrderBy); err != nil {
		return err
	}

	return nil
}

func (o *SearchParamsBodySearchCategoriesRoomEvents) validateSearchTerm(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"search_categories"+"."+"room_events"+"."+"search_term", "body", o.SearchTerm); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchParamsBodySearchCategoriesRoomEvents) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchParamsBodySearchCategoriesRoomEvents) UnmarshalBinary(b []byte) error {
	var res SearchParamsBodySearchCategoriesRoomEvents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchParamsBodySearchCategoriesRoomEventsEventContext Include Event Context
//
// Configures whether any context for the events
// returned are included in the response.
swagger:model SearchParamsBodySearchCategoriesRoomEventsEventContext
*/
type SearchParamsBodySearchCategoriesRoomEventsEventContext struct {

	// After limit
	//
	// How many events after the result are
	// returned. By default, this is ``5``.
	AfterLimit int64 `json:"after_limit,omitempty"`

	// Before limit
	//
	// How many events before the result are
	// returned. By default, this is ``5``.
	BeforeLimit int64 `json:"before_limit,omitempty"`

	// Return profile information
	//
	// Requests that the server returns the
	// historic profile information for the users
	// that sent the events that were returned.
	// By default, this is ``false``.
	IncludeProfile bool `json:"include_profile,omitempty"`
}

// Validate validates this search params body search categories room events event context
func (o *SearchParamsBodySearchCategoriesRoomEventsEventContext) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchParamsBodySearchCategoriesRoomEventsEventContext) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchParamsBodySearchCategoriesRoomEventsEventContext) UnmarshalBinary(b []byte) error {
	var res SearchParamsBodySearchCategoriesRoomEventsEventContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchParamsBodySearchCategoriesRoomEventsGroupings Groupings
//
// Requests that the server partitions the result set
// based on the provided list of keys.
swagger:model SearchParamsBodySearchCategoriesRoomEventsGroupings
*/
type SearchParamsBodySearchCategoriesRoomEventsGroupings struct {

	// Groups
	//
	// List of groups to request.
	GroupBy []*SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0 `json:"group_by"`
}

// Validate validates this search params body search categories room events groupings
func (o *SearchParamsBodySearchCategoriesRoomEventsGroupings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGroupBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchParamsBodySearchCategoriesRoomEventsGroupings) validateGroupBy(formats strfmt.Registry) error {

	if swag.IsZero(o.GroupBy) { // not required
		return nil
	}

	for i := 0; i < len(o.GroupBy); i++ {
		if swag.IsZero(o.GroupBy[i]) { // not required
			continue
		}

		if o.GroupBy[i] != nil {
			if err := o.GroupBy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "search_categories" + "." + "room_events" + "." + "groupings" + "." + "group_by" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchParamsBodySearchCategoriesRoomEventsGroupings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchParamsBodySearchCategoriesRoomEventsGroupings) UnmarshalBinary(b []byte) error {
	var res SearchParamsBodySearchCategoriesRoomEventsGroupings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0 Group
//
// Configuration for group.
swagger:model SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0
*/
type SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0 struct {

	// Group Key
	//
	// Key that defines the group.
	// Enum: [room_id sender]
	Key string `json:"key,omitempty"`
}

// Validate validates this search params body search categories room events groupings group by items0
func (o *SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var searchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0TypeKeyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["room_id","sender"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0TypeKeyPropEnum = append(searchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0TypeKeyPropEnum, v)
	}
}

const (

	// SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0KeyRoomID captures enum value "room_id"
	SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0KeyRoomID string = "room_id"

	// SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0KeySender captures enum value "sender"
	SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0KeySender string = "sender"
)

// prop value enum
func (o *SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0) validateKeyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, searchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0TypeKeyPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0) validateKey(formats strfmt.Registry) error {

	if swag.IsZero(o.Key) { // not required
		return nil
	}

	// value enum
	if err := o.validateKeyEnum("key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0) UnmarshalBinary(b []byte) error {
	var res SearchParamsBodySearchCategoriesRoomEventsGroupingsGroupByItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SearchTooManyRequestsBody The rate limit was reached for this request
swagger:model SearchTooManyRequestsBody
*/
type SearchTooManyRequestsBody struct {

	// The M_LIMIT_EXCEEDED error code
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`

	// The amount of time in milliseconds the client should wait
	// before trying the request again.
	RetryAfterMs int64 `json:"retry_after_ms,omitempty"`
}

// Validate validates this search too many requests body
func (o *SearchTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchTooManyRequestsBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("searchTooManyRequests"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res SearchTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
