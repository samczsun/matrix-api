// Code generated by go-swagger; DO NOT EDIT.

package application_service_room_directory_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new application service room directory management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for application service room directory management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
UpdateAppserviceRoomDirectoryVsibility updates a room s visibility in the application service s room directory

Updates the visibility of a given room on the application service's room
directory.

This API is similar to the room directory visibility API used by clients
to update the homeserver's more general room directory.

This API requires the use of an application service access token (``as_token``)
instead of a typical client's access_token. This API cannot be invoked by
users who are not identified as application services.
*/
func (a *Client) UpdateAppserviceRoomDirectoryVsibility(params *UpdateAppserviceRoomDirectoryVsibilityParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAppserviceRoomDirectoryVsibilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAppserviceRoomDirectoryVsibilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAppserviceRoomDirectoryVsibility",
		Method:             "PUT",
		PathPattern:        "/_matrix/client/unstable/directory/list/appservice/{networkId}/{roomId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAppserviceRoomDirectoryVsibilityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAppserviceRoomDirectoryVsibilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAppserviceRoomDirectoryVsibility: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
