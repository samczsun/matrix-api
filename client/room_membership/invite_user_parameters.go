// Code generated by go-swagger; DO NOT EDIT.

package room_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewInviteUserParams creates a new InviteUserParams object
// with the default values initialized.
func NewInviteUserParams() *InviteUserParams {
	var ()
	return &InviteUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewInviteUserParamsWithTimeout creates a new InviteUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewInviteUserParamsWithTimeout(timeout time.Duration) *InviteUserParams {
	var ()
	return &InviteUserParams{

		timeout: timeout,
	}
}

// NewInviteUserParamsWithContext creates a new InviteUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewInviteUserParamsWithContext(ctx context.Context) *InviteUserParams {
	var ()
	return &InviteUserParams{

		Context: ctx,
	}
}

// NewInviteUserParamsWithHTTPClient creates a new InviteUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInviteUserParamsWithHTTPClient(client *http.Client) *InviteUserParams {
	var ()
	return &InviteUserParams{
		HTTPClient: client,
	}
}

/*InviteUserParams contains all the parameters to send to the API endpoint
for the invite user operation typically these are written to a http.Request
*/
type InviteUserParams struct {

	/*Body*/
	Body InviteUserBody
	/*RoomID
	  The room identifier (not alias) to which to invite the user.

	*/
	RoomID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the invite user params
func (o *InviteUserParams) WithTimeout(timeout time.Duration) *InviteUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the invite user params
func (o *InviteUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the invite user params
func (o *InviteUserParams) WithContext(ctx context.Context) *InviteUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the invite user params
func (o *InviteUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the invite user params
func (o *InviteUserParams) WithHTTPClient(client *http.Client) *InviteUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the invite user params
func (o *InviteUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the invite user params
func (o *InviteUserParams) WithBody(body InviteUserBody) *InviteUserParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the invite user params
func (o *InviteUserParams) SetBody(body InviteUserBody) {
	o.Body = body
}

// WithRoomID adds the roomID to the invite user params
func (o *InviteUserParams) WithRoomID(roomID string) *InviteUserParams {
	o.SetRoomID(roomID)
	return o
}

// SetRoomID adds the roomId to the invite user params
func (o *InviteUserParams) SetRoomID(roomID string) {
	o.RoomID = roomID
}

// WriteToRequest writes these params to a swagger request
func (o *InviteUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param roomId
	if err := r.SetPathParam("roomId", o.RoomID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
