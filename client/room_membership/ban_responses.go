// Code generated by go-swagger; DO NOT EDIT.

package room_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// BanReader is a Reader for the Ban structure.
type BanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewBanForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewBanOK creates a BanOK with default headers values
func NewBanOK() *BanOK {
	return &BanOK{}
}

/*BanOK handles this case with default header values.

The user has been kicked and banned from the room.
*/
type BanOK struct {
	Payload interface{}
}

func (o *BanOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/ban][%d] banOK  %+v", 200, o.Payload)
}

func (o *BanOK) GetPayload() interface{} {
	return o.Payload
}

func (o *BanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBanForbidden creates a BanForbidden with default headers values
func NewBanForbidden() *BanForbidden {
	return &BanForbidden{}
}

/*BanForbidden handles this case with default header values.

You do not have permission to ban the user from the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejections are:

- The banner is not currently in the room.
- The banner's power level is insufficient to ban users from the room.
*/
type BanForbidden struct {
	Payload *BanForbiddenBody
}

func (o *BanForbidden) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/ban][%d] banForbidden  %+v", 403, o.Payload)
}

func (o *BanForbidden) GetPayload() *BanForbiddenBody {
	return o.Payload
}

func (o *BanForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(BanForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*BanBody ban body
swagger:model BanBody
*/
type BanBody struct {

	// The reason the user has been banned. This will be supplied as the ``reason`` on the target's updated `m.room.member`_ event.
	Reason string `json:"reason,omitempty"`

	// The fully qualified user ID of the user being banned.
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this ban body
func (o *BanBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BanBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"user_id", "body", o.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BanBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BanBody) UnmarshalBinary(b []byte) error {
	var res BanBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*BanForbiddenBody A Matrix-level Error
swagger:model BanForbiddenBody
*/
type BanForbiddenBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this ban forbidden body
func (o *BanForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BanForbiddenBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("banForbidden"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *BanForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BanForbiddenBody) UnmarshalBinary(b []byte) error {
	var res BanForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
