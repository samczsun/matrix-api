// Code generated by go-swagger; DO NOT EDIT.

package room_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// UnbanReader is a Reader for the Unban structure.
type UnbanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnbanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUnbanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUnbanForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUnbanOK creates a UnbanOK with default headers values
func NewUnbanOK() *UnbanOK {
	return &UnbanOK{}
}

/*UnbanOK handles this case with default header values.

The user has been unbanned from the room.
*/
type UnbanOK struct {
	Payload interface{}
}

func (o *UnbanOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/unban][%d] unbanOK  %+v", 200, o.Payload)
}

func (o *UnbanOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UnbanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnbanForbidden creates a UnbanForbidden with default headers values
func NewUnbanForbidden() *UnbanForbidden {
	return &UnbanForbidden{}
}

/*UnbanForbidden handles this case with default header values.

You do not have permission to unban the user from the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejections are:

- The unbanner's power level is insufficient to unban users from the room.
*/
type UnbanForbidden struct {
	Payload *UnbanForbiddenBody
}

func (o *UnbanForbidden) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/unban][%d] unbanForbidden  %+v", 403, o.Payload)
}

func (o *UnbanForbidden) GetPayload() *UnbanForbiddenBody {
	return o.Payload
}

func (o *UnbanForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UnbanForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UnbanBody unban body
swagger:model UnbanBody
*/
type UnbanBody struct {

	// The fully qualified user ID of the user being unbanned.
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this unban body
func (o *UnbanBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UnbanBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"user_id", "body", o.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UnbanBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UnbanBody) UnmarshalBinary(b []byte) error {
	var res UnbanBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UnbanForbiddenBody A Matrix-level Error
swagger:model UnbanForbiddenBody
*/
type UnbanForbiddenBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this unban forbidden body
func (o *UnbanForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UnbanForbiddenBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("unbanForbidden"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UnbanForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UnbanForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UnbanForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
