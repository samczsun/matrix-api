// Code generated by go-swagger; DO NOT EDIT.

package room_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// KickReader is a Reader for the Kick structure.
type KickReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KickReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKickOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewKickForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewKickOK creates a KickOK with default headers values
func NewKickOK() *KickOK {
	return &KickOK{}
}

/*KickOK handles this case with default header values.

The user has been kicked from the room.
*/
type KickOK struct {
	Payload interface{}
}

func (o *KickOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/kick][%d] kickOK  %+v", 200, o.Payload)
}

func (o *KickOK) GetPayload() interface{} {
	return o.Payload
}

func (o *KickOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKickForbidden creates a KickForbidden with default headers values
func NewKickForbidden() *KickForbidden {
	return &KickForbidden{}
}

/*KickForbidden handles this case with default header values.

You do not have permission to kick the user from the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejections are:

- The kicker is not currently in the room.
- The kickee is not currently in the room.
- The kicker's power level is insufficient to kick users from the room.
*/
type KickForbidden struct {
	Payload *KickForbiddenBody
}

func (o *KickForbidden) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/kick][%d] kickForbidden  %+v", 403, o.Payload)
}

func (o *KickForbidden) GetPayload() *KickForbiddenBody {
	return o.Payload
}

func (o *KickForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(KickForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*KickBody kick body
swagger:model KickBody
*/
type KickBody struct {

	// The reason the user has been kicked. This will be supplied as the
	// ``reason`` on the target's updated `m.room.member`_ event.
	Reason string `json:"reason,omitempty"`

	// The fully qualified user ID of the user being kicked.
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this kick body
func (o *KickBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KickBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"user_id", "body", o.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *KickBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KickBody) UnmarshalBinary(b []byte) error {
	var res KickBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*KickForbiddenBody A Matrix-level Error
swagger:model KickForbiddenBody
*/
type KickForbiddenBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this kick forbidden body
func (o *KickForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *KickForbiddenBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("kickForbidden"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *KickForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KickForbiddenBody) UnmarshalBinary(b []byte) error {
	var res KickForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
