// Code generated by go-swagger; DO NOT EDIT.

package room_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// InviteUserReader is a Reader for the InviteUser structure.
type InviteUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InviteUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInviteUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInviteUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInviteUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewInviteUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewInviteUserOK creates a InviteUserOK with default headers values
func NewInviteUserOK() *InviteUserOK {
	return &InviteUserOK{}
}

/*InviteUserOK handles this case with default header values.

The user has been invited to join the room.
*/
type InviteUserOK struct {
	Payload interface{}
}

func (o *InviteUserOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/invite ][%d] inviteUserOK  %+v", 200, o.Payload)
}

func (o *InviteUserOK) GetPayload() interface{} {
	return o.Payload
}

func (o *InviteUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInviteUserBadRequest creates a InviteUserBadRequest with default headers values
func NewInviteUserBadRequest() *InviteUserBadRequest {
	return &InviteUserBadRequest{}
}

/*InviteUserBadRequest handles this case with default header values.


The request is invalid. A meaningful ``errcode`` and description
error text will be returned. Example reasons for rejection include:

- The request body is malformed (``errcode`` set to ``M_BAD_JSON``
  or ``M_NOT_JSON``).

- One or more users being invited to the room are residents of a
  homeserver which does not support the requested room version. The
  ``errcode`` will be ``M_UNSUPPORTED_ROOM_VERSION`` in these cases.
*/
type InviteUserBadRequest struct {
	Payload *InviteUserBadRequestBody
}

func (o *InviteUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/invite ][%d] inviteUserBadRequest  %+v", 400, o.Payload)
}

func (o *InviteUserBadRequest) GetPayload() *InviteUserBadRequestBody {
	return o.Payload
}

func (o *InviteUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InviteUserBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInviteUserForbidden creates a InviteUserForbidden with default headers values
func NewInviteUserForbidden() *InviteUserForbidden {
	return &InviteUserForbidden{}
}

/*InviteUserForbidden handles this case with default header values.

You do not have permission to invite the user to the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejections are:

- The invitee has been banned from the room.
- The invitee is already a member of the room.
- The inviter is not currently in the room.
- The inviter's power level is insufficient to invite users to the room.
*/
type InviteUserForbidden struct {
	Payload *InviteUserForbiddenBody
}

func (o *InviteUserForbidden) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/invite ][%d] inviteUserForbidden  %+v", 403, o.Payload)
}

func (o *InviteUserForbidden) GetPayload() *InviteUserForbiddenBody {
	return o.Payload
}

func (o *InviteUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InviteUserForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInviteUserTooManyRequests creates a InviteUserTooManyRequests with default headers values
func NewInviteUserTooManyRequests() *InviteUserTooManyRequests {
	return &InviteUserTooManyRequests{}
}

/*InviteUserTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type InviteUserTooManyRequests struct {
	Payload *InviteUserTooManyRequestsBody
}

func (o *InviteUserTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/invite ][%d] inviteUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *InviteUserTooManyRequests) GetPayload() *InviteUserTooManyRequestsBody {
	return o.Payload
}

func (o *InviteUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InviteUserTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*InviteUserBadRequestBody A Matrix-level Error
swagger:model InviteUserBadRequestBody
*/
type InviteUserBadRequestBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this invite user bad request body
func (o *InviteUserBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *InviteUserBadRequestBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("inviteUserBadRequest"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *InviteUserBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InviteUserBadRequestBody) UnmarshalBinary(b []byte) error {
	var res InviteUserBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*InviteUserBody invite user body
swagger:model InviteUserBody
*/
type InviteUserBody struct {

	// The fully qualified user ID of the invitee.
	// Required: true
	UserID *string `json:"user_id"`
}

// Validate validates this invite user body
func (o *InviteUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *InviteUserBody) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"user_id", "body", o.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *InviteUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InviteUserBody) UnmarshalBinary(b []byte) error {
	var res InviteUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*InviteUserForbiddenBody A Matrix-level Error
swagger:model InviteUserForbiddenBody
*/
type InviteUserForbiddenBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this invite user forbidden body
func (o *InviteUserForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *InviteUserForbiddenBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("inviteUserForbidden"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *InviteUserForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InviteUserForbiddenBody) UnmarshalBinary(b []byte) error {
	var res InviteUserForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*InviteUserTooManyRequestsBody The rate limit was reached for this request
swagger:model InviteUserTooManyRequestsBody
*/
type InviteUserTooManyRequestsBody struct {

	// The M_LIMIT_EXCEEDED error code
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`

	// The amount of time in milliseconds the client should wait
	// before trying the request again.
	RetryAfterMs int64 `json:"retry_after_ms,omitempty"`
}

// Validate validates this invite user too many requests body
func (o *InviteUserTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *InviteUserTooManyRequestsBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("inviteUserTooManyRequests"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *InviteUserTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InviteUserTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res InviteUserTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
