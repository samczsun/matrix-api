// Code generated by go-swagger; DO NOT EDIT.

package room_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// JoinRoomReader is a Reader for the JoinRoom structure.
type JoinRoomReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *JoinRoomReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewJoinRoomOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewJoinRoomForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewJoinRoomTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewJoinRoomOK creates a JoinRoomOK with default headers values
func NewJoinRoomOK() *JoinRoomOK {
	return &JoinRoomOK{}
}

/*JoinRoomOK handles this case with default header values.

The room has been joined.

The joined room ID must be returned in the ``room_id`` field.
*/
type JoinRoomOK struct {
	Payload *JoinRoomOKBody
}

func (o *JoinRoomOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/join/{roomIdOrAlias}][%d] joinRoomOK  %+v", 200, o.Payload)
}

func (o *JoinRoomOK) GetPayload() *JoinRoomOKBody {
	return o.Payload
}

func (o *JoinRoomOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(JoinRoomOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewJoinRoomForbidden creates a JoinRoomForbidden with default headers values
func NewJoinRoomForbidden() *JoinRoomForbidden {
	return &JoinRoomForbidden{}
}

/*JoinRoomForbidden handles this case with default header values.

You do not have permission to join the room. A meaningful ``errcode`` and description error text will be returned. Example reasons for rejection are:

- The room is invite-only and the user was not invited.
- The user has been banned from the room.
*/
type JoinRoomForbidden struct {
	Payload *JoinRoomForbiddenBody
}

func (o *JoinRoomForbidden) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/join/{roomIdOrAlias}][%d] joinRoomForbidden  %+v", 403, o.Payload)
}

func (o *JoinRoomForbidden) GetPayload() *JoinRoomForbiddenBody {
	return o.Payload
}

func (o *JoinRoomForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(JoinRoomForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewJoinRoomTooManyRequests creates a JoinRoomTooManyRequests with default headers values
func NewJoinRoomTooManyRequests() *JoinRoomTooManyRequests {
	return &JoinRoomTooManyRequests{}
}

/*JoinRoomTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type JoinRoomTooManyRequests struct {
	Payload *JoinRoomTooManyRequestsBody
}

func (o *JoinRoomTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/join/{roomIdOrAlias}][%d] joinRoomTooManyRequests  %+v", 429, o.Payload)
}

func (o *JoinRoomTooManyRequests) GetPayload() *JoinRoomTooManyRequestsBody {
	return o.Payload
}

func (o *JoinRoomTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(JoinRoomTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*JoinRoomBody join room body
swagger:model JoinRoomBody
*/
type JoinRoomBody struct {

	// third party signed
	ThirdPartySigned *JoinRoomParamsBodyThirdPartySigned `json:"third_party_signed,omitempty"`
}

// Validate validates this join room body
func (o *JoinRoomBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateThirdPartySigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *JoinRoomBody) validateThirdPartySigned(formats strfmt.Registry) error {

	if swag.IsZero(o.ThirdPartySigned) { // not required
		return nil
	}

	if o.ThirdPartySigned != nil {
		if err := o.ThirdPartySigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("third_party_signed" + "." + "third_party_signed")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *JoinRoomBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *JoinRoomBody) UnmarshalBinary(b []byte) error {
	var res JoinRoomBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*JoinRoomForbiddenBody A Matrix-level Error
swagger:model JoinRoomForbiddenBody
*/
type JoinRoomForbiddenBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this join room forbidden body
func (o *JoinRoomForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *JoinRoomForbiddenBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("joinRoomForbidden"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *JoinRoomForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *JoinRoomForbiddenBody) UnmarshalBinary(b []byte) error {
	var res JoinRoomForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*JoinRoomOKBody join room o k body
swagger:model JoinRoomOKBody
*/
type JoinRoomOKBody struct {

	// The joined room ID.
	// Required: true
	RoomID *string `json:"room_id"`
}

// Validate validates this join room o k body
func (o *JoinRoomOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *JoinRoomOKBody) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("joinRoomOK"+"."+"room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *JoinRoomOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *JoinRoomOKBody) UnmarshalBinary(b []byte) error {
	var res JoinRoomOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*JoinRoomParamsBodyThirdPartySigned Third Party Signed
//
// A signature of an ``m.third_party_invite`` token to prove that this user
// owns a third party identity which has been invited to the room.
swagger:model JoinRoomParamsBodyThirdPartySigned
*/
type JoinRoomParamsBodyThirdPartySigned struct {

	// The Matrix ID of the invitee.
	// Required: true
	Mxid *string `json:"mxid"`

	// The Matrix ID of the user who issued the invite.
	// Required: true
	Sender *string `json:"sender"`

	// Signatures
	//
	// A signatures object containing a signature of the entire signed object.
	// Required: true
	Signatures interface{} `json:"signatures"`

	// The state key of the m.third_party_invite event.
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this join room params body third party signed
func (o *JoinRoomParamsBodyThirdPartySigned) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMxid(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignatures(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *JoinRoomParamsBodyThirdPartySigned) validateMxid(formats strfmt.Registry) error {

	if err := validate.Required("third_party_signed"+"."+"third_party_signed"+"."+"mxid", "body", o.Mxid); err != nil {
		return err
	}

	return nil
}

func (o *JoinRoomParamsBodyThirdPartySigned) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("third_party_signed"+"."+"third_party_signed"+"."+"sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *JoinRoomParamsBodyThirdPartySigned) validateSignatures(formats strfmt.Registry) error {

	if err := validate.Required("third_party_signed"+"."+"third_party_signed"+"."+"signatures", "body", o.Signatures); err != nil {
		return err
	}

	return nil
}

func (o *JoinRoomParamsBodyThirdPartySigned) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("third_party_signed"+"."+"third_party_signed"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *JoinRoomParamsBodyThirdPartySigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *JoinRoomParamsBodyThirdPartySigned) UnmarshalBinary(b []byte) error {
	var res JoinRoomParamsBodyThirdPartySigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*JoinRoomTooManyRequestsBody The rate limit was reached for this request
swagger:model JoinRoomTooManyRequestsBody
*/
type JoinRoomTooManyRequestsBody struct {

	// The M_LIMIT_EXCEEDED error code
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`

	// The amount of time in milliseconds the client should wait
	// before trying the request again.
	RetryAfterMs int64 `json:"retry_after_ms,omitempty"`
}

// Validate validates this join room too many requests body
func (o *JoinRoomTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *JoinRoomTooManyRequestsBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("joinRoomTooManyRequests"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *JoinRoomTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *JoinRoomTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res JoinRoomTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
