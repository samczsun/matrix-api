// Code generated by go-swagger; DO NOT EDIT.

package room_membership

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new room membership API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for room membership API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Ban bans a user in the room

Ban a user in the room. If the user is currently in the room, also kick them.

When a user is banned from a room, they may not join it or be invited to it until they are unbanned.

The caller must have the required power level in order to perform this operation.
*/
func (a *Client) Ban(params *BanParams, authInfo runtime.ClientAuthInfoWriter) (*BanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ban",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/rooms/{roomId}/ban",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ban: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ForgetRoom stops the requesting user remembering about a particular room

This API stops a user remembering about a particular room.

In general, history is a first class citizen in Matrix. After this API
is called, however, a user will no longer be able to retrieve history
for this room. If all users on a homeserver forget a room, the room is
eligible for deletion from that homeserver.

If the user is currently joined to the room, they must leave the room
before calling this API.
*/
func (a *Client) ForgetRoom(params *ForgetRoomParams, authInfo runtime.ClientAuthInfoWriter) (*ForgetRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewForgetRoomParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "forgetRoom",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/rooms/{roomId}/forget",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ForgetRoomReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ForgetRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for forgetRoom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetJoinedRooms lists the user s current rooms

This API returns a list of the user's current rooms.
*/
func (a *Client) GetJoinedRooms(params *GetJoinedRoomsParams, authInfo runtime.ClientAuthInfoWriter) (*GetJoinedRoomsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJoinedRoomsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJoinedRooms",
		Method:             "GET",
		PathPattern:        "/_matrix/client/unstable/joined_rooms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJoinedRoomsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJoinedRoomsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getJoinedRooms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InviteBy3PID invites a user to participate in a particular room

.. _invite-by-third-party-id-endpoint:

*Note that there are two forms of this API, which are documented separately.
This version of the API does not require that the inviter know the Matrix
identifier of the invitee, and instead relies on third party identifiers.
The homeserver uses an identity server to perform the mapping from
third party identifier to a Matrix identifier. The other is documented in the*
`joining rooms section`_.

This API invites a user to participate in a particular room.
They do not start participating in the room until they actually join the
room.

Only users currently in a particular room can invite other users to
join that room.

If the identity server did know the Matrix user identifier for the
third party identifier, the homeserver will append a ``m.room.member``
event to the room.

If the identity server does not know a Matrix user identifier for the
passed third party identifier, the homeserver will issue an invitation
which can be accepted upon providing proof of ownership of the third
party identifier. This is achieved by the identity server generating a
token, which it gives to the inviting homeserver. The homeserver will
add an ``m.room.third_party_invite`` event into the graph for the room,
containing that token.

When the invitee binds the invited third party identifier to a Matrix
user ID, the identity server will give the user a list of pending
invitations, each containing:

- The room ID to which they were invited

- The token given to the homeserver

- A signature of the token, signed with the identity server's private key

- The matrix user ID who invited them to the room

If a token is requested from the identity server, the homeserver will
append a ``m.room.third_party_invite`` event to the room.

.. _joining rooms section: `invite-by-user-id-endpoint`_
*/
func (a *Client) InviteBy3PID(params *InviteBy3PIDParams, authInfo runtime.ClientAuthInfoWriter) (*InviteBy3PIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInviteBy3PIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "inviteBy3PID",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/rooms/{roomId}/invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InviteBy3PIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InviteBy3PIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for inviteBy3PID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InviteUser invites a user to participate in a particular room

.. _invite-by-user-id-endpoint:

*Note that there are two forms of this API, which are documented separately.
This version of the API requires that the inviter knows the Matrix
identifier of the invitee. The other is documented in the*
`third party invites section`_.

This API invites a user to participate in a particular room.
They do not start participating in the room until they actually join the
room.

Only users currently in a particular room can invite other users to
join that room.

If the user was invited to the room, the homeserver will append a
``m.room.member`` event to the room.

.. _third party invites section: `invite-by-third-party-id-endpoint`_
*/
func (a *Client) InviteUser(params *InviteUserParams, authInfo runtime.ClientAuthInfoWriter) (*InviteUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInviteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "inviteUser",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/rooms/{roomId}/invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InviteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InviteUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for inviteUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
JoinRoom starts the requesting user participating in a particular room

*Note that this API takes either a room ID or alias, unlike* ``/room/{roomId}/join``.

This API starts a user participating in a particular room, if that user
is allowed to participate in that room. After this call, the client is
allowed to see all current state events in the room, and all subsequent
events associated with the room until the user leaves the room.

After a user has joined a room, the room will appear as an entry in the
response of the |/initialSync|_ and |/sync|_ APIs.

If a ``third_party_signed`` was supplied, the homeserver must verify
that it matches a pending ``m.room.third_party_invite`` event in the
room, and perform key validity checking if required by the event.
*/
func (a *Client) JoinRoom(params *JoinRoomParams, authInfo runtime.ClientAuthInfoWriter) (*JoinRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJoinRoomParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "joinRoom",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/join/{roomIdOrAlias}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JoinRoomReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JoinRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for joinRoom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
JoinRoomByID starts the requesting user participating in a particular room

*Note that this API requires a room ID, not alias.* ``/join/{roomIdOrAlias}`` *exists if you have a room alias.*

This API starts a user participating in a particular room, if that user
is allowed to participate in that room. After this call, the client is
allowed to see all current state events in the room, and all subsequent
events associated with the room until the user leaves the room.

After a user has joined a room, the room will appear as an entry in the
response of the |/initialSync|_ and |/sync|_ APIs.

If a ``third_party_signed`` was supplied, the homeserver must verify
that it matches a pending ``m.room.third_party_invite`` event in the
room, and perform key validity checking if required by the event.
*/
func (a *Client) JoinRoomByID(params *JoinRoomByIDParams, authInfo runtime.ClientAuthInfoWriter) (*JoinRoomByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJoinRoomByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "joinRoomById",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/rooms/{roomId}/join",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JoinRoomByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JoinRoomByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for joinRoomById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Kick kicks a user from the room

Kick a user from the room.

The caller must have the required power level in order to perform this operation.

Kicking a user adjusts the target member's membership state to be ``leave`` with an
optional ``reason``. Like with other membership changes, a user can directly adjust
the target member's state by making a request to ``/rooms/<room id>/state/m.room.member/<user id>``.
*/
func (a *Client) Kick(params *KickParams, authInfo runtime.ClientAuthInfoWriter) (*KickOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKickParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "kick",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/rooms/{roomId}/kick",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KickReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KickOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for kick: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LeaveRoom stops the requesting user participating in a particular room

This API stops a user participating in a particular room.

If the user was already in the room, they will no longer be able to see
new events in the room. If the room requires an invite to join, they
will need to be re-invited before they can re-join.

If the user was invited to the room, but had not joined, this call
serves to reject the invite.

The user will still be allowed to retrieve history from the room which
they were previously allowed to see.
*/
func (a *Client) LeaveRoom(params *LeaveRoomParams, authInfo runtime.ClientAuthInfoWriter) (*LeaveRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLeaveRoomParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "leaveRoom",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/rooms/{roomId}/leave",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LeaveRoomReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LeaveRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for leaveRoom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Unban unbans a user from the room

Unban a user from the room. This allows them to be invited to the room,
and join if they would otherwise be allowed to join according to its join rules.

The caller must have the required power level in order to perform this operation.
*/
func (a *Client) Unban(params *UnbanParams, authInfo runtime.ClientAuthInfoWriter) (*UnbanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnbanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unban",
		Method:             "POST",
		PathPattern:        "/_matrix/client/unstable/rooms/{roomId}/unban",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnbanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnbanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unban: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
