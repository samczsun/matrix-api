// Code generated by go-swagger; DO NOT EDIT.

package room_ugprades

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// UpgradeRoomReader is a Reader for the UpgradeRoom structure.
type UpgradeRoomReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpgradeRoomReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpgradeRoomOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpgradeRoomBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpgradeRoomForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpgradeRoomOK creates a UpgradeRoomOK with default headers values
func NewUpgradeRoomOK() *UpgradeRoomOK {
	return &UpgradeRoomOK{}
}

/*UpgradeRoomOK handles this case with default header values.

The room was successfully upgraded.
*/
type UpgradeRoomOK struct {
	Payload *UpgradeRoomOKBody
}

func (o *UpgradeRoomOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/upgrade][%d] upgradeRoomOK  %+v", 200, o.Payload)
}

func (o *UpgradeRoomOK) GetPayload() *UpgradeRoomOKBody {
	return o.Payload
}

func (o *UpgradeRoomOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpgradeRoomOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpgradeRoomBadRequest creates a UpgradeRoomBadRequest with default headers values
func NewUpgradeRoomBadRequest() *UpgradeRoomBadRequest {
	return &UpgradeRoomBadRequest{}
}

/*UpgradeRoomBadRequest handles this case with default header values.

The request was invalid. One way this can happen is if the room version
requested is not supported by the homeserver.
*/
type UpgradeRoomBadRequest struct {
	Payload *UpgradeRoomBadRequestBody
}

func (o *UpgradeRoomBadRequest) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/upgrade][%d] upgradeRoomBadRequest  %+v", 400, o.Payload)
}

func (o *UpgradeRoomBadRequest) GetPayload() *UpgradeRoomBadRequestBody {
	return o.Payload
}

func (o *UpgradeRoomBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpgradeRoomBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpgradeRoomForbidden creates a UpgradeRoomForbidden with default headers values
func NewUpgradeRoomForbidden() *UpgradeRoomForbidden {
	return &UpgradeRoomForbidden{}
}

/*UpgradeRoomForbidden handles this case with default header values.

The user is not permitted to upgrade the room.
*/
type UpgradeRoomForbidden struct {
	Payload *UpgradeRoomForbiddenBody
}

func (o *UpgradeRoomForbidden) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/upgrade][%d] upgradeRoomForbidden  %+v", 403, o.Payload)
}

func (o *UpgradeRoomForbidden) GetPayload() *UpgradeRoomForbiddenBody {
	return o.Payload
}

func (o *UpgradeRoomForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpgradeRoomForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpgradeRoomBadRequestBody A Matrix-level Error
swagger:model UpgradeRoomBadRequestBody
*/
type UpgradeRoomBadRequestBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this upgrade room bad request body
func (o *UpgradeRoomBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpgradeRoomBadRequestBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("upgradeRoomBadRequest"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpgradeRoomBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpgradeRoomBadRequestBody) UnmarshalBinary(b []byte) error {
	var res UpgradeRoomBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpgradeRoomBody upgrade room body
swagger:model UpgradeRoomBody
*/
type UpgradeRoomBody struct {

	// The new version for the room.
	// Required: true
	NewVersion *string `json:"new_version"`
}

// Validate validates this upgrade room body
func (o *UpgradeRoomBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNewVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpgradeRoomBody) validateNewVersion(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"new_version", "body", o.NewVersion); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpgradeRoomBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpgradeRoomBody) UnmarshalBinary(b []byte) error {
	var res UpgradeRoomBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpgradeRoomForbiddenBody A Matrix-level Error
swagger:model UpgradeRoomForbiddenBody
*/
type UpgradeRoomForbiddenBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this upgrade room forbidden body
func (o *UpgradeRoomForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpgradeRoomForbiddenBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("upgradeRoomForbidden"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpgradeRoomForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpgradeRoomForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UpgradeRoomForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpgradeRoomOKBody upgrade room o k body
swagger:model UpgradeRoomOKBody
*/
type UpgradeRoomOKBody struct {

	// The ID of the new room.
	// Required: true
	ReplacementRoom *string `json:"replacement_room"`
}

// Validate validates this upgrade room o k body
func (o *UpgradeRoomOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateReplacementRoom(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpgradeRoomOKBody) validateReplacementRoom(formats strfmt.Registry) error {

	if err := validate.Required("upgradeRoomOK"+"."+"replacement_room", "body", o.ReplacementRoom); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpgradeRoomOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpgradeRoomOKBody) UnmarshalBinary(b []byte) error {
	var res UpgradeRoomOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
