// Code generated by go-swagger; DO NOT EDIT.

package room_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetPublicRoomsReader is a Reader for the GetPublicRooms structure.
type GetPublicRoomsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPublicRoomsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPublicRoomsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPublicRoomsOK creates a GetPublicRoomsOK with default headers values
func NewGetPublicRoomsOK() *GetPublicRoomsOK {
	return &GetPublicRoomsOK{}
}

/*GetPublicRoomsOK handles this case with default header values.

A list of the rooms on the server.
*/
type GetPublicRoomsOK struct {
	Payload *GetPublicRoomsOKBody
}

func (o *GetPublicRoomsOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/publicRooms][%d] getPublicRoomsOK  %+v", 200, o.Payload)
}

func (o *GetPublicRoomsOK) GetPayload() *GetPublicRoomsOKBody {
	return o.Payload
}

func (o *GetPublicRoomsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPublicRoomsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChunkItems0 PublicRoomsChunk
swagger:model ChunkItems0
*/
type ChunkItems0 struct {

	// Aliases of the room. May be empty.
	Aliases []string `json:"aliases"`

	// The URL for the room's avatar, if one is set.
	AvatarURL string `json:"avatar_url,omitempty"`

	// The canonical alias of the room, if any.
	CanonicalAlias string `json:"canonical_alias,omitempty"`

	// Whether guest users may join the room and participate in it.
	// If they can, they will be subject to ordinary power level
	// rules like any other user.
	// Required: true
	GuestCanJoin *bool `json:"guest_can_join"`

	// The name of the room, if any.
	Name string `json:"name,omitempty"`

	// The number of members joined to the room.
	// Required: true
	NumJoinedMembers *int64 `json:"num_joined_members"`

	// The ID of the room.
	// Required: true
	RoomID *string `json:"room_id"`

	// The topic of the room, if any.
	Topic string `json:"topic,omitempty"`

	// Whether the room may be viewed by guest users without joining.
	// Required: true
	WorldReadable *bool `json:"world_readable"`
}

// Validate validates this chunk items0
func (o *ChunkItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateGuestCanJoin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNumJoinedMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWorldReadable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChunkItems0) validateGuestCanJoin(formats strfmt.Registry) error {

	if err := validate.Required("guest_can_join", "body", o.GuestCanJoin); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0) validateNumJoinedMembers(formats strfmt.Registry) error {

	if err := validate.Required("num_joined_members", "body", o.NumJoinedMembers); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0) validateWorldReadable(formats strfmt.Registry) error {

	if err := validate.Required("world_readable", "body", o.WorldReadable); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0) UnmarshalBinary(b []byte) error {
	var res ChunkItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPublicRoomsOKBody A list of the rooms on the server.
swagger:model GetPublicRoomsOKBody
*/
type GetPublicRoomsOKBody struct {

	// PublicRoomsChunks
	//
	// A paginated chunk of public rooms.
	// Required: true
	Chunk []*ChunkItems0 `json:"chunk"`

	// A pagination token for the response. The absence of this token
	// means there are no more results to fetch and the client should
	// stop paginating.
	NextBatch string `json:"next_batch,omitempty"`

	// A pagination token that allows fetching previous results. The
	// absence of this token means there are no results before this
	// batch, i.e. this is the first batch.
	PrevBatch string `json:"prev_batch,omitempty"`

	// An estimate on the total number of public rooms, if the
	// server has an estimate.
	TotalRoomCountEstimate int64 `json:"total_room_count_estimate,omitempty"`
}

// Validate validates this get public rooms o k body
func (o *GetPublicRoomsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChunk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPublicRoomsOKBody) validateChunk(formats strfmt.Registry) error {

	if err := validate.Required("getPublicRoomsOK"+"."+"chunk", "body", o.Chunk); err != nil {
		return err
	}

	for i := 0; i < len(o.Chunk); i++ {
		if swag.IsZero(o.Chunk[i]) { // not required
			continue
		}

		if o.Chunk[i] != nil {
			if err := o.Chunk[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPublicRoomsOK" + "." + "chunk" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPublicRoomsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPublicRoomsOKBody) UnmarshalBinary(b []byte) error {
	var res GetPublicRoomsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
