// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// SetRoomTagReader is a Reader for the SetRoomTag structure.
type SetRoomTagReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetRoomTagReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetRoomTagOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetRoomTagOK creates a SetRoomTagOK with default headers values
func NewSetRoomTagOK() *SetRoomTagOK {
	return &SetRoomTagOK{}
}

/*SetRoomTagOK handles this case with default header values.

The tag was successfully added.
*/
type SetRoomTagOK struct {
	Payload interface{}
}

func (o *SetRoomTagOK) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/unstable/user/{userId}/rooms/{roomId}/tags/{tag}][%d] setRoomTagOK  %+v", 200, o.Payload)
}

func (o *SetRoomTagOK) GetPayload() interface{} {
	return o.Payload
}

func (o *SetRoomTagOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SetRoomTagBody set room tag body
swagger:model SetRoomTagBody
*/
type SetRoomTagBody struct {

	// A number in a range ``[0,1]`` describing a relative
	// position of the room under the given tag.
	Order float32 `json:"order,omitempty"`

	// set room tag params body additional properties
	SetRoomTagParamsBodyAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *SetRoomTagBody) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// A number in a range ``[0,1]`` describing a relative
		// position of the room under the given tag.
		Order float32 `json:"order,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv SetRoomTagBody

	rcv.Order = stage1.Order

	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "order")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.SetRoomTagParamsBodyAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o SetRoomTagBody) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// A number in a range ``[0,1]`` describing a relative
		// position of the room under the given tag.
		Order float32 `json:"order,omitempty"`
	}

	stage1.Order = o.Order

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.SetRoomTagParamsBodyAdditionalProperties) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.SetRoomTagParamsBodyAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this set room tag body
func (o *SetRoomTagBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetRoomTagBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetRoomTagBody) UnmarshalBinary(b []byte) error {
	var res SetRoomTagBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
