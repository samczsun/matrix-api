// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// CheckUsernameAvailabilityReader is a Reader for the CheckUsernameAvailability structure.
type CheckUsernameAvailabilityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CheckUsernameAvailabilityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCheckUsernameAvailabilityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCheckUsernameAvailabilityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCheckUsernameAvailabilityTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCheckUsernameAvailabilityOK creates a CheckUsernameAvailabilityOK with default headers values
func NewCheckUsernameAvailabilityOK() *CheckUsernameAvailabilityOK {
	return &CheckUsernameAvailabilityOK{}
}

/*CheckUsernameAvailabilityOK handles this case with default header values.

The username is available
*/
type CheckUsernameAvailabilityOK struct {
	Payload *CheckUsernameAvailabilityOKBody
}

func (o *CheckUsernameAvailabilityOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/register/available][%d] checkUsernameAvailabilityOK  %+v", 200, o.Payload)
}

func (o *CheckUsernameAvailabilityOK) GetPayload() *CheckUsernameAvailabilityOKBody {
	return o.Payload
}

func (o *CheckUsernameAvailabilityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckUsernameAvailabilityOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckUsernameAvailabilityBadRequest creates a CheckUsernameAvailabilityBadRequest with default headers values
func NewCheckUsernameAvailabilityBadRequest() *CheckUsernameAvailabilityBadRequest {
	return &CheckUsernameAvailabilityBadRequest{}
}

/*CheckUsernameAvailabilityBadRequest handles this case with default header values.

Part of the request was invalid or the username is not available. This may
include one of the following error codes:

* ``M_USER_IN_USE`` : The desired username is already taken.
* ``M_INVALID_USERNAME`` : The desired username is not a valid user name.
* ``M_EXCLUSIVE`` : The desired username is in the exclusive namespace
  claimed by an application service.
*/
type CheckUsernameAvailabilityBadRequest struct {
	Payload *CheckUsernameAvailabilityBadRequestBody
}

func (o *CheckUsernameAvailabilityBadRequest) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/register/available][%d] checkUsernameAvailabilityBadRequest  %+v", 400, o.Payload)
}

func (o *CheckUsernameAvailabilityBadRequest) GetPayload() *CheckUsernameAvailabilityBadRequestBody {
	return o.Payload
}

func (o *CheckUsernameAvailabilityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckUsernameAvailabilityBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCheckUsernameAvailabilityTooManyRequests creates a CheckUsernameAvailabilityTooManyRequests with default headers values
func NewCheckUsernameAvailabilityTooManyRequests() *CheckUsernameAvailabilityTooManyRequests {
	return &CheckUsernameAvailabilityTooManyRequests{}
}

/*CheckUsernameAvailabilityTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type CheckUsernameAvailabilityTooManyRequests struct {
	Payload *CheckUsernameAvailabilityTooManyRequestsBody
}

func (o *CheckUsernameAvailabilityTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/register/available][%d] checkUsernameAvailabilityTooManyRequests  %+v", 429, o.Payload)
}

func (o *CheckUsernameAvailabilityTooManyRequests) GetPayload() *CheckUsernameAvailabilityTooManyRequestsBody {
	return o.Payload
}

func (o *CheckUsernameAvailabilityTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CheckUsernameAvailabilityTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CheckUsernameAvailabilityBadRequestBody A Matrix-level Error
swagger:model CheckUsernameAvailabilityBadRequestBody
*/
type CheckUsernameAvailabilityBadRequestBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this check username availability bad request body
func (o *CheckUsernameAvailabilityBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckUsernameAvailabilityBadRequestBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("checkUsernameAvailabilityBadRequest"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckUsernameAvailabilityBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckUsernameAvailabilityBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CheckUsernameAvailabilityBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CheckUsernameAvailabilityOKBody check username availability o k body
swagger:model CheckUsernameAvailabilityOKBody
*/
type CheckUsernameAvailabilityOKBody struct {

	// A flag to indicate that the username is available. This should always
	// be ``true`` when the server replies with 200 OK.
	Available bool `json:"available,omitempty"`
}

// Validate validates this check username availability o k body
func (o *CheckUsernameAvailabilityOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckUsernameAvailabilityOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckUsernameAvailabilityOKBody) UnmarshalBinary(b []byte) error {
	var res CheckUsernameAvailabilityOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CheckUsernameAvailabilityTooManyRequestsBody The rate limit was reached for this request
swagger:model CheckUsernameAvailabilityTooManyRequestsBody
*/
type CheckUsernameAvailabilityTooManyRequestsBody struct {

	// The M_LIMIT_EXCEEDED error code
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`

	// The amount of time in milliseconds the client should wait
	// before trying the request again.
	RetryAfterMs int64 `json:"retry_after_ms,omitempty"`
}

// Validate validates this check username availability too many requests body
func (o *CheckUsernameAvailabilityTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckUsernameAvailabilityTooManyRequestsBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("checkUsernameAvailabilityTooManyRequests"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckUsernameAvailabilityTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckUsernameAvailabilityTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res CheckUsernameAvailabilityTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
