// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// DeactivateAccountReader is a Reader for the DeactivateAccount structure.
type DeactivateAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeactivateAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeactivateAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeactivateAccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeactivateAccountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeactivateAccountOK creates a DeactivateAccountOK with default headers values
func NewDeactivateAccountOK() *DeactivateAccountOK {
	return &DeactivateAccountOK{}
}

/*DeactivateAccountOK handles this case with default header values.

The account has been deactivated.
*/
type DeactivateAccountOK struct {
	Payload *DeactivateAccountOKBody
}

func (o *DeactivateAccountOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/account/deactivate][%d] deactivateAccountOK  %+v", 200, o.Payload)
}

func (o *DeactivateAccountOK) GetPayload() *DeactivateAccountOKBody {
	return o.Payload
}

func (o *DeactivateAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeactivateAccountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeactivateAccountUnauthorized creates a DeactivateAccountUnauthorized with default headers values
func NewDeactivateAccountUnauthorized() *DeactivateAccountUnauthorized {
	return &DeactivateAccountUnauthorized{}
}

/*DeactivateAccountUnauthorized handles this case with default header values.

The homeserver requires additional authentication information.
*/
type DeactivateAccountUnauthorized struct {
	Payload *DeactivateAccountUnauthorizedBody
}

func (o *DeactivateAccountUnauthorized) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/account/deactivate][%d] deactivateAccountUnauthorized  %+v", 401, o.Payload)
}

func (o *DeactivateAccountUnauthorized) GetPayload() *DeactivateAccountUnauthorizedBody {
	return o.Payload
}

func (o *DeactivateAccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeactivateAccountUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeactivateAccountTooManyRequests creates a DeactivateAccountTooManyRequests with default headers values
func NewDeactivateAccountTooManyRequests() *DeactivateAccountTooManyRequests {
	return &DeactivateAccountTooManyRequests{}
}

/*DeactivateAccountTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type DeactivateAccountTooManyRequests struct {
	Payload *DeactivateAccountTooManyRequestsBody
}

func (o *DeactivateAccountTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/account/deactivate][%d] deactivateAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeactivateAccountTooManyRequests) GetPayload() *DeactivateAccountTooManyRequestsBody {
	return o.Payload
}

func (o *DeactivateAccountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DeactivateAccountTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeactivateAccountBody deactivate account body
swagger:model DeactivateAccountBody
*/
type DeactivateAccountBody struct {

	// auth
	Auth *DeactivateAccountParamsBodyAuth `json:"auth,omitempty"`

	// The identity server to unbind all of the user's 3PIDs from.
	// If not provided, the homeserver MUST use the ``id_server``
	// that was originally use to bind each identifier. If the
	// homeserver does not know which ``id_server`` that was,
	// it must return an ``id_server_unbind_result`` of
	// ``no-support``.
	IDServer string `json:"id_server,omitempty"`
}

// Validate validates this deactivate account body
func (o *DeactivateAccountBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAuth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeactivateAccountBody) validateAuth(formats strfmt.Registry) error {

	if swag.IsZero(o.Auth) { // not required
		return nil
	}

	if o.Auth != nil {
		if err := o.Auth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "auth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeactivateAccountBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeactivateAccountBody) UnmarshalBinary(b []byte) error {
	var res DeactivateAccountBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeactivateAccountOKBody deactivate account o k body
swagger:model DeactivateAccountOKBody
*/
type DeactivateAccountOKBody struct {

	// An indicator as to whether or not the homeserver was able to unbind
	// the user's 3PIDs from the identity server(s). ``success`` indicates
	// that all identifiers have been unbound from the identity server while
	// ``no-support`` indicates that one or more identifiers failed to unbind
	// due to the identity server refusing the request or the homeserver
	// being unable to determine an identity server to unbind from. This
	// must be ``success`` if the homeserver has no identifiers to unbind
	// for the user.
	// Required: true
	// Enum: [success no-support]
	IDServerUnbindResult *string `json:"id_server_unbind_result"`
}

// Validate validates this deactivate account o k body
func (o *DeactivateAccountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIDServerUnbindResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deactivateAccountOKBodyTypeIDServerUnbindResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","no-support"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deactivateAccountOKBodyTypeIDServerUnbindResultPropEnum = append(deactivateAccountOKBodyTypeIDServerUnbindResultPropEnum, v)
	}
}

const (

	// DeactivateAccountOKBodyIDServerUnbindResultSuccess captures enum value "success"
	DeactivateAccountOKBodyIDServerUnbindResultSuccess string = "success"

	// DeactivateAccountOKBodyIDServerUnbindResultNoSupport captures enum value "no-support"
	DeactivateAccountOKBodyIDServerUnbindResultNoSupport string = "no-support"
)

// prop value enum
func (o *DeactivateAccountOKBody) validateIDServerUnbindResultEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deactivateAccountOKBodyTypeIDServerUnbindResultPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *DeactivateAccountOKBody) validateIDServerUnbindResult(formats strfmt.Registry) error {

	if err := validate.Required("deactivateAccountOK"+"."+"id_server_unbind_result", "body", o.IDServerUnbindResult); err != nil {
		return err
	}

	// value enum
	if err := o.validateIDServerUnbindResultEnum("deactivateAccountOK"+"."+"id_server_unbind_result", "body", *o.IDServerUnbindResult); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeactivateAccountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeactivateAccountOKBody) UnmarshalBinary(b []byte) error {
	var res DeactivateAccountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeactivateAccountParamsBodyAuth Authentication Data
//
// Additional authentication information for the user-interactive authentication API.
swagger:model DeactivateAccountParamsBodyAuth
*/
type DeactivateAccountParamsBodyAuth struct {

	// The value of the session key given by the homeserver.
	Session string `json:"session,omitempty"`

	// The login type that the client is attempting to complete.
	// Required: true
	Type *string `json:"type"`

	// Keys dependent on the login type
	DeactivateAccountParamsBodyAuth map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (o *DeactivateAccountParamsBodyAuth) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// The value of the session key given by the homeserver.
		Session string `json:"session,omitempty"`

		// The login type that the client is attempting to complete.
		// Required: true
		Type *string `json:"type"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv DeactivateAccountParamsBodyAuth

	rcv.Session = stage1.Session

	rcv.Type = stage1.Type

	*o = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "session")

	delete(stage2, "type")

	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		o.DeactivateAccountParamsBodyAuth = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (o DeactivateAccountParamsBodyAuth) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// The value of the session key given by the homeserver.
		Session string `json:"session,omitempty"`

		// The login type that the client is attempting to complete.
		// Required: true
		Type *string `json:"type"`
	}

	stage1.Session = o.Session

	stage1.Type = o.Type

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(o.DeactivateAccountParamsBodyAuth) == 0 {
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(o.DeactivateAccountParamsBodyAuth)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 {
		return additional, nil
	}

	// concatenate the 2 objects
	props[len(props)-1] = ','
	return append(props, additional[1:]...), nil
}

// Validate validates this deactivate account params body auth
func (o *DeactivateAccountParamsBodyAuth) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeactivateAccountParamsBodyAuth) validateType(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"auth"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeactivateAccountParamsBodyAuth) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeactivateAccountParamsBodyAuth) UnmarshalBinary(b []byte) error {
	var res DeactivateAccountParamsBodyAuth
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeactivateAccountTooManyRequestsBody The rate limit was reached for this request
swagger:model DeactivateAccountTooManyRequestsBody
*/
type DeactivateAccountTooManyRequestsBody struct {

	// The M_LIMIT_EXCEEDED error code
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`

	// The amount of time in milliseconds the client should wait
	// before trying the request again.
	RetryAfterMs int64 `json:"retry_after_ms,omitempty"`
}

// Validate validates this deactivate account too many requests body
func (o *DeactivateAccountTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeactivateAccountTooManyRequestsBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("deactivateAccountTooManyRequests"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeactivateAccountTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeactivateAccountTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res DeactivateAccountTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeactivateAccountUnauthorizedBody Authentication response
//
// Used by servers to indicate that additional authentication information is required,
swagger:model DeactivateAccountUnauthorizedBody
*/
type DeactivateAccountUnauthorizedBody struct {

	// A list of the stages the client has completed successfully
	Completed []string `json:"completed"`

	// Flow information
	//
	// A list of the login flows supported by the server for this API.
	// Required: true
	Flows []*FlowsItems0 `json:"flows"`

	// Contains any information that the client will need to know in order to
	// use a given type of authentication. For each login type presented,
	// that type may be present as a key in this dictionary. For example, the
	// public part of an OAuth client ID could be given here.
	Params map[string]interface{} `json:"params,omitempty"`

	// This is a session identifier that the client must pass back to the home
	// server, if one is provided, in subsequent attempts to authenticate in the
	// same API call.
	Session string `json:"session,omitempty"`
}

// Validate validates this deactivate account unauthorized body
func (o *DeactivateAccountUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFlows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeactivateAccountUnauthorizedBody) validateFlows(formats strfmt.Registry) error {

	if err := validate.Required("deactivateAccountUnauthorized"+"."+"flows", "body", o.Flows); err != nil {
		return err
	}

	for i := 0; i < len(o.Flows); i++ {
		if swag.IsZero(o.Flows[i]) { // not required
			continue
		}

		if o.Flows[i] != nil {
			if err := o.Flows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deactivateAccountUnauthorized" + "." + "flows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeactivateAccountUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeactivateAccountUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res DeactivateAccountUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
