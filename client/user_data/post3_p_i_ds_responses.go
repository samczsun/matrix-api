// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// Post3PIDsReader is a Reader for the Post3PIDs structure.
type Post3PIDsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *Post3PIDsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPost3PIDsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPost3PIDsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPost3PIDsOK creates a Post3PIDsOK with default headers values
func NewPost3PIDsOK() *Post3PIDsOK {
	return &Post3PIDsOK{}
}

/*Post3PIDsOK handles this case with default header values.

The addition was successful.
*/
type Post3PIDsOK struct {
}

func (o *Post3PIDsOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/account/3pid][%d] post3PIDsOK ", 200)
}

func (o *Post3PIDsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPost3PIDsForbidden creates a Post3PIDsForbidden with default headers values
func NewPost3PIDsForbidden() *Post3PIDsForbidden {
	return &Post3PIDsForbidden{}
}

/*Post3PIDsForbidden handles this case with default header values.

The credentials could not be verified with the identity server.
*/
type Post3PIDsForbidden struct {
	Payload *Post3PIDsForbiddenBody
}

func (o *Post3PIDsForbidden) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/account/3pid][%d] post3PIDsForbidden  %+v", 403, o.Payload)
}

func (o *Post3PIDsForbidden) GetPayload() *Post3PIDsForbiddenBody {
	return o.Payload
}

func (o *Post3PIDsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(Post3PIDsForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*Post3PIDsBody post3 p i ds body
swagger:model Post3PIDsBody
*/
type Post3PIDsBody struct {

	// Whether the homeserver should also bind this third party
	// identifier to the account's Matrix ID with the passed identity
	// server. Default: ``false``.
	Bind bool `json:"bind,omitempty"`

	// three pid creds
	// Required: true
	ThreePidCreds *Post3PIDsParamsBodyThreePidCreds `json:"three_pid_creds"`
}

// Validate validates this post3 p i ds body
func (o *Post3PIDsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateThreePidCreds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *Post3PIDsBody) validateThreePidCreds(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"three_pid_creds", "body", o.ThreePidCreds); err != nil {
		return err
	}

	if o.ThreePidCreds != nil {
		if err := o.ThreePidCreds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "three_pid_creds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *Post3PIDsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *Post3PIDsBody) UnmarshalBinary(b []byte) error {
	var res Post3PIDsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*Post3PIDsForbiddenBody A Matrix-level Error
swagger:model Post3PIDsForbiddenBody
*/
type Post3PIDsForbiddenBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this post3 p i ds forbidden body
func (o *Post3PIDsForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *Post3PIDsForbiddenBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("post3PIDsForbidden"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *Post3PIDsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *Post3PIDsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res Post3PIDsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*Post3PIDsParamsBodyThreePidCreds ThreePidCredentials
//
// The third party credentials to associate with the account.
swagger:model Post3PIDsParamsBodyThreePidCreds
*/
type Post3PIDsParamsBodyThreePidCreds struct {

	// The client secret used in the session with the identity server.
	// Required: true
	ClientSecret *string `json:"client_secret"`

	// An access token previously registered with the identity server. Servers
	// can treat this as optional to distinguish between r0.5-compatible clients
	// and this specification version.
	// Required: true
	IDAccessToken *string `json:"id_access_token"`

	// The identity server to use.
	// Required: true
	IDServer *string `json:"id_server"`

	// The session identifier given by the identity server.
	// Required: true
	Sid *string `json:"sid"`
}

// Validate validates this post3 p i ds params body three pid creds
func (o *Post3PIDsParamsBodyThreePidCreds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIDAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIDServer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *Post3PIDsParamsBodyThreePidCreds) validateClientSecret(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"three_pid_creds"+"."+"client_secret", "body", o.ClientSecret); err != nil {
		return err
	}

	return nil
}

func (o *Post3PIDsParamsBodyThreePidCreds) validateIDAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"three_pid_creds"+"."+"id_access_token", "body", o.IDAccessToken); err != nil {
		return err
	}

	return nil
}

func (o *Post3PIDsParamsBodyThreePidCreds) validateIDServer(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"three_pid_creds"+"."+"id_server", "body", o.IDServer); err != nil {
		return err
	}

	return nil
}

func (o *Post3PIDsParamsBodyThreePidCreds) validateSid(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"three_pid_creds"+"."+"sid", "body", o.Sid); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *Post3PIDsParamsBodyThreePidCreds) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *Post3PIDsParamsBodyThreePidCreds) UnmarshalBinary(b []byte) error {
	var res Post3PIDsParamsBodyThreePidCreds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
