// Code generated by go-swagger; DO NOT EDIT.

package user_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCheckUsernameAvailabilityParams creates a new CheckUsernameAvailabilityParams object
// with the default values initialized.
func NewCheckUsernameAvailabilityParams() *CheckUsernameAvailabilityParams {
	var (
		usernameDefault = string("my_cool_localpart")
	)
	return &CheckUsernameAvailabilityParams{
		Username: usernameDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCheckUsernameAvailabilityParamsWithTimeout creates a new CheckUsernameAvailabilityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCheckUsernameAvailabilityParamsWithTimeout(timeout time.Duration) *CheckUsernameAvailabilityParams {
	var (
		usernameDefault = string("my_cool_localpart")
	)
	return &CheckUsernameAvailabilityParams{
		Username: usernameDefault,

		timeout: timeout,
	}
}

// NewCheckUsernameAvailabilityParamsWithContext creates a new CheckUsernameAvailabilityParams object
// with the default values initialized, and the ability to set a context for a request
func NewCheckUsernameAvailabilityParamsWithContext(ctx context.Context) *CheckUsernameAvailabilityParams {
	var (
		usernameDefault = string("my_cool_localpart")
	)
	return &CheckUsernameAvailabilityParams{
		Username: usernameDefault,

		Context: ctx,
	}
}

// NewCheckUsernameAvailabilityParamsWithHTTPClient creates a new CheckUsernameAvailabilityParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCheckUsernameAvailabilityParamsWithHTTPClient(client *http.Client) *CheckUsernameAvailabilityParams {
	var (
		usernameDefault = string("my_cool_localpart")
	)
	return &CheckUsernameAvailabilityParams{
		Username:   usernameDefault,
		HTTPClient: client,
	}
}

/*CheckUsernameAvailabilityParams contains all the parameters to send to the API endpoint
for the check username availability operation typically these are written to a http.Request
*/
type CheckUsernameAvailabilityParams struct {

	/*Username
	  The username to check the availability of.

	*/
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the check username availability params
func (o *CheckUsernameAvailabilityParams) WithTimeout(timeout time.Duration) *CheckUsernameAvailabilityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the check username availability params
func (o *CheckUsernameAvailabilityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the check username availability params
func (o *CheckUsernameAvailabilityParams) WithContext(ctx context.Context) *CheckUsernameAvailabilityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the check username availability params
func (o *CheckUsernameAvailabilityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the check username availability params
func (o *CheckUsernameAvailabilityParams) WithHTTPClient(client *http.Client) *CheckUsernameAvailabilityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the check username availability params
func (o *CheckUsernameAvailabilityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUsername adds the username to the check username availability params
func (o *CheckUsernameAvailabilityParams) WithUsername(username string) *CheckUsernameAvailabilityParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the check username availability params
func (o *CheckUsernameAvailabilityParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *CheckUsernameAvailabilityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param username
	qrUsername := o.Username
	qUsername := qrUsername
	if qUsername != "" {
		if err := r.SetQueryParam("username", qUsername); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
