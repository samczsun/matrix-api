// Code generated by go-swagger; DO NOT EDIT.

package server_administration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetVersionsReader is a Reader for the GetVersions structure.
type GetVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetVersionsOK creates a GetVersionsOK with default headers values
func NewGetVersionsOK() *GetVersionsOK {
	return &GetVersionsOK{}
}

/*GetVersionsOK handles this case with default header values.

The versions supported by the server.
*/
type GetVersionsOK struct {
	Payload *GetVersionsOKBody
}

func (o *GetVersionsOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/versions][%d] getVersionsOK  %+v", 200, o.Payload)
}

func (o *GetVersionsOK) GetPayload() *GetVersionsOKBody {
	return o.Payload
}

func (o *GetVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetVersionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetVersionsOKBody get versions o k body
swagger:model GetVersionsOKBody
*/
type GetVersionsOKBody struct {

	// Experimental features the server supports. Features not listed here,
	// or the lack of this property all together, indicate that a feature is
	// not supported.
	UnstableFeatures map[string]bool `json:"unstable_features,omitempty"`

	// The supported versions.
	// Required: true
	Versions []string `json:"versions"`
}

// Validate validates this get versions o k body
func (o *GetVersionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetVersionsOKBody) validateVersions(formats strfmt.Registry) error {

	if err := validate.Required("getVersionsOK"+"."+"versions", "body", o.Versions); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetVersionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetVersionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetVersionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
