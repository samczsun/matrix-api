// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadContentParams creates a new UploadContentParams object
// with the default values initialized.
func NewUploadContentParams() *UploadContentParams {
	var ()
	return &UploadContentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadContentParamsWithTimeout creates a new UploadContentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadContentParamsWithTimeout(timeout time.Duration) *UploadContentParams {
	var ()
	return &UploadContentParams{

		timeout: timeout,
	}
}

// NewUploadContentParamsWithContext creates a new UploadContentParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadContentParamsWithContext(ctx context.Context) *UploadContentParams {
	var ()
	return &UploadContentParams{

		Context: ctx,
	}
}

// NewUploadContentParamsWithHTTPClient creates a new UploadContentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadContentParamsWithHTTPClient(client *http.Client) *UploadContentParams {
	var ()
	return &UploadContentParams{
		HTTPClient: client,
	}
}

/*UploadContentParams contains all the parameters to send to the API endpoint
for the upload content operation typically these are written to a http.Request
*/
type UploadContentParams struct {

	/*Content
	  The content to be uploaded.

	*/
	Content strfmt.Base64
	/*ContentType
	  The content type of the file being uploaded

	*/
	ContentType *string
	/*Filename
	  The name of the file being uploaded

	*/
	Filename *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload content params
func (o *UploadContentParams) WithTimeout(timeout time.Duration) *UploadContentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload content params
func (o *UploadContentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload content params
func (o *UploadContentParams) WithContext(ctx context.Context) *UploadContentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload content params
func (o *UploadContentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload content params
func (o *UploadContentParams) WithHTTPClient(client *http.Client) *UploadContentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload content params
func (o *UploadContentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContent adds the content to the upload content params
func (o *UploadContentParams) WithContent(content strfmt.Base64) *UploadContentParams {
	o.SetContent(content)
	return o
}

// SetContent adds the content to the upload content params
func (o *UploadContentParams) SetContent(content strfmt.Base64) {
	o.Content = content
}

// WithContentType adds the contentType to the upload content params
func (o *UploadContentParams) WithContentType(contentType *string) *UploadContentParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the upload content params
func (o *UploadContentParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithFilename adds the filename to the upload content params
func (o *UploadContentParams) WithFilename(filename *string) *UploadContentParams {
	o.SetFilename(filename)
	return o
}

// SetFilename adds the filename to the upload content params
func (o *UploadContentParams) SetFilename(filename *string) {
	o.Filename = filename
}

// WriteToRequest writes these params to a swagger request
func (o *UploadContentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Content); err != nil {
		return err
	}

	if o.ContentType != nil {

		// header param Content-Type
		if err := r.SetHeaderParam("Content-Type", *o.ContentType); err != nil {
			return err
		}

	}

	if o.Filename != nil {

		// query param filename
		var qrFilename string
		if o.Filename != nil {
			qrFilename = *o.Filename
		}
		qFilename := qrFilename
		if qFilename != "" {
			if err := r.SetQueryParam("filename", qFilename); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
