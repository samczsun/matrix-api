// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new media API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for media API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetConfig gets the configuration for the content repository

This endpoint allows clients to retrieve the configuration of the content
repository, such as upload limitations.
Clients SHOULD use this as a guide when using content repository endpoints.
All values are intentionally left optional. Clients SHOULD follow
the advice given in the field description when the field is not available.

**NOTE:** Both clients and server administrators should be aware that proxies
between the client and the server may affect the apparent behaviour of content
repository APIs, for example, proxies may enforce a lower upload size limit
than is advertised by the server on this endpoint.
*/
func (a *Client) GetConfig(params *GetConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getConfig",
		Method:             "GET",
		PathPattern:        "/_matrix/media/unstable/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetContent downloads content from the content repository
*/
func (a *Client) GetContent(params *GetContentParams, writer io.Writer) (*GetContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContent",
		Method:             "GET",
		PathPattern:        "/_matrix/media/unstable/download/{serverName}/{mediaId}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetContentOverrideName downloads content from the content repository this is the same as the download endpoint above except permitting a desired file name
*/
func (a *Client) GetContentOverrideName(params *GetContentOverrideNameParams, writer io.Writer) (*GetContentOverrideNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContentOverrideNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentOverrideName",
		Method:             "GET",
		PathPattern:        "/_matrix/media/unstable/download/{serverName}/{mediaId}/{fileName}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentOverrideNameReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContentOverrideNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getContentOverrideName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetContentThumbnail downloads a thumbnail of content from the content repository see the thumbnailing thumbnails section for more information
*/
func (a *Client) GetContentThumbnail(params *GetContentThumbnailParams, writer io.Writer) (*GetContentThumbnailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContentThumbnailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContentThumbnail",
		Method:             "GET",
		PathPattern:        "/_matrix/media/unstable/thumbnail/{serverName}/{mediaId}",
		ProducesMediaTypes: []string{"image/jpeg", "image/png"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentThumbnailReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContentThumbnailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getContentThumbnail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetURLPreview gets information about a URL for a client
*/
func (a *Client) GetURLPreview(params *GetURLPreviewParams, authInfo runtime.ClientAuthInfoWriter) (*GetURLPreviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetURLPreviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUrlPreview",
		Method:             "GET",
		PathPattern:        "/_matrix/media/unstable/preview_url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetURLPreviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetURLPreviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUrlPreview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadContent uploads some content to the content repository
*/
func (a *Client) UploadContent(params *UploadContentParams, authInfo runtime.ClientAuthInfoWriter) (*UploadContentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadContentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "uploadContent",
		Method:             "POST",
		PathPattern:        "/_matrix/media/unstable/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UploadContentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadContentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uploadContent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
