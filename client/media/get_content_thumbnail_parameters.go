// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetContentThumbnailParams creates a new GetContentThumbnailParams object
// with the default values initialized.
func NewGetContentThumbnailParams() *GetContentThumbnailParams {
	var (
		allowRemoteDefault = bool(true)
	)
	return &GetContentThumbnailParams{
		AllowRemote: &allowRemoteDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetContentThumbnailParamsWithTimeout creates a new GetContentThumbnailParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetContentThumbnailParamsWithTimeout(timeout time.Duration) *GetContentThumbnailParams {
	var (
		allowRemoteDefault = bool(true)
	)
	return &GetContentThumbnailParams{
		AllowRemote: &allowRemoteDefault,

		timeout: timeout,
	}
}

// NewGetContentThumbnailParamsWithContext creates a new GetContentThumbnailParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetContentThumbnailParamsWithContext(ctx context.Context) *GetContentThumbnailParams {
	var (
		allowRemoteDefault = bool(true)
	)
	return &GetContentThumbnailParams{
		AllowRemote: &allowRemoteDefault,

		Context: ctx,
	}
}

// NewGetContentThumbnailParamsWithHTTPClient creates a new GetContentThumbnailParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetContentThumbnailParamsWithHTTPClient(client *http.Client) *GetContentThumbnailParams {
	var (
		allowRemoteDefault = bool(true)
	)
	return &GetContentThumbnailParams{
		AllowRemote: &allowRemoteDefault,
		HTTPClient:  client,
	}
}

/*GetContentThumbnailParams contains all the parameters to send to the API endpoint
for the get content thumbnail operation typically these are written to a http.Request
*/
type GetContentThumbnailParams struct {

	/*AllowRemote
	  Indicates to the server that it should not attempt to fetch the media if it is deemed
	remote. This is to prevent routing loops where the server contacts itself. Defaults to
	true if not provided.


	*/
	AllowRemote *bool
	/*Height
	  The *desired* height of the thumbnail. The actual thumbnail may be
	larger than the size specified.

	*/
	Height int64
	/*MediaID
	  The media ID from the ``mxc://`` URI (the path component)


	*/
	MediaID string
	/*Method
	  The desired resizing method. See the `thumbnailing <#thumbnails>`_
	section for more information.

	*/
	Method *string
	/*ServerName
	  The server name from the ``mxc://`` URI (the authoritory component)


	*/
	ServerName string
	/*Width
	  The *desired* width of the thumbnail. The actual thumbnail may be
	larger than the size specified.

	*/
	Width int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get content thumbnail params
func (o *GetContentThumbnailParams) WithTimeout(timeout time.Duration) *GetContentThumbnailParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get content thumbnail params
func (o *GetContentThumbnailParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get content thumbnail params
func (o *GetContentThumbnailParams) WithContext(ctx context.Context) *GetContentThumbnailParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get content thumbnail params
func (o *GetContentThumbnailParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get content thumbnail params
func (o *GetContentThumbnailParams) WithHTTPClient(client *http.Client) *GetContentThumbnailParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get content thumbnail params
func (o *GetContentThumbnailParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowRemote adds the allowRemote to the get content thumbnail params
func (o *GetContentThumbnailParams) WithAllowRemote(allowRemote *bool) *GetContentThumbnailParams {
	o.SetAllowRemote(allowRemote)
	return o
}

// SetAllowRemote adds the allowRemote to the get content thumbnail params
func (o *GetContentThumbnailParams) SetAllowRemote(allowRemote *bool) {
	o.AllowRemote = allowRemote
}

// WithHeight adds the height to the get content thumbnail params
func (o *GetContentThumbnailParams) WithHeight(height int64) *GetContentThumbnailParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the get content thumbnail params
func (o *GetContentThumbnailParams) SetHeight(height int64) {
	o.Height = height
}

// WithMediaID adds the mediaID to the get content thumbnail params
func (o *GetContentThumbnailParams) WithMediaID(mediaID string) *GetContentThumbnailParams {
	o.SetMediaID(mediaID)
	return o
}

// SetMediaID adds the mediaId to the get content thumbnail params
func (o *GetContentThumbnailParams) SetMediaID(mediaID string) {
	o.MediaID = mediaID
}

// WithMethod adds the method to the get content thumbnail params
func (o *GetContentThumbnailParams) WithMethod(method *string) *GetContentThumbnailParams {
	o.SetMethod(method)
	return o
}

// SetMethod adds the method to the get content thumbnail params
func (o *GetContentThumbnailParams) SetMethod(method *string) {
	o.Method = method
}

// WithServerName adds the serverName to the get content thumbnail params
func (o *GetContentThumbnailParams) WithServerName(serverName string) *GetContentThumbnailParams {
	o.SetServerName(serverName)
	return o
}

// SetServerName adds the serverName to the get content thumbnail params
func (o *GetContentThumbnailParams) SetServerName(serverName string) {
	o.ServerName = serverName
}

// WithWidth adds the width to the get content thumbnail params
func (o *GetContentThumbnailParams) WithWidth(width int64) *GetContentThumbnailParams {
	o.SetWidth(width)
	return o
}

// SetWidth adds the width to the get content thumbnail params
func (o *GetContentThumbnailParams) SetWidth(width int64) {
	o.Width = width
}

// WriteToRequest writes these params to a swagger request
func (o *GetContentThumbnailParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowRemote != nil {

		// query param allow_remote
		var qrAllowRemote bool
		if o.AllowRemote != nil {
			qrAllowRemote = *o.AllowRemote
		}
		qAllowRemote := swag.FormatBool(qrAllowRemote)
		if qAllowRemote != "" {
			if err := r.SetQueryParam("allow_remote", qAllowRemote); err != nil {
				return err
			}
		}

	}

	// query param height
	qrHeight := o.Height
	qHeight := swag.FormatInt64(qrHeight)
	if qHeight != "" {
		if err := r.SetQueryParam("height", qHeight); err != nil {
			return err
		}
	}

	// path param mediaId
	if err := r.SetPathParam("mediaId", o.MediaID); err != nil {
		return err
	}

	if o.Method != nil {

		// query param method
		var qrMethod string
		if o.Method != nil {
			qrMethod = *o.Method
		}
		qMethod := qrMethod
		if qMethod != "" {
			if err := r.SetQueryParam("method", qMethod); err != nil {
				return err
			}
		}

	}

	// path param serverName
	if err := r.SetPathParam("serverName", o.ServerName); err != nil {
		return err
	}

	// query param width
	qrWidth := o.Width
	qWidth := swag.FormatInt64(qrWidth)
	if qWidth != "" {
		if err := r.SetQueryParam("width", qWidth); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
