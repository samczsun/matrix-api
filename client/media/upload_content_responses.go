// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// UploadContentReader is a Reader for the UploadContent structure.
type UploadContentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadContentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadContentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUploadContentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUploadContentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUploadContentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadContentOK creates a UploadContentOK with default headers values
func NewUploadContentOK() *UploadContentOK {
	return &UploadContentOK{}
}

/*UploadContentOK handles this case with default header values.

The `MXC URI`_ for the uploaded content.
*/
type UploadContentOK struct {
	Payload *UploadContentOKBody
}

func (o *UploadContentOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/media/unstable/upload][%d] uploadContentOK  %+v", 200, o.Payload)
}

func (o *UploadContentOK) GetPayload() *UploadContentOKBody {
	return o.Payload
}

func (o *UploadContentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UploadContentOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadContentForbidden creates a UploadContentForbidden with default headers values
func NewUploadContentForbidden() *UploadContentForbidden {
	return &UploadContentForbidden{}
}

/*UploadContentForbidden handles this case with default header values.

The user does not have permission to upload the content. Some reasons for this error include:

- The server does not permit the file type.
- The user has reached a quota for uploaded content.
*/
type UploadContentForbidden struct {
	Payload *UploadContentForbiddenBody
}

func (o *UploadContentForbidden) Error() string {
	return fmt.Sprintf("[POST /_matrix/media/unstable/upload][%d] uploadContentForbidden  %+v", 403, o.Payload)
}

func (o *UploadContentForbidden) GetPayload() *UploadContentForbiddenBody {
	return o.Payload
}

func (o *UploadContentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UploadContentForbiddenBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadContentRequestEntityTooLarge creates a UploadContentRequestEntityTooLarge with default headers values
func NewUploadContentRequestEntityTooLarge() *UploadContentRequestEntityTooLarge {
	return &UploadContentRequestEntityTooLarge{}
}

/*UploadContentRequestEntityTooLarge handles this case with default header values.

The uploaded content is too large for the server.
*/
type UploadContentRequestEntityTooLarge struct {
	Payload *UploadContentRequestEntityTooLargeBody
}

func (o *UploadContentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /_matrix/media/unstable/upload][%d] uploadContentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UploadContentRequestEntityTooLarge) GetPayload() *UploadContentRequestEntityTooLargeBody {
	return o.Payload
}

func (o *UploadContentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UploadContentRequestEntityTooLargeBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadContentTooManyRequests creates a UploadContentTooManyRequests with default headers values
func NewUploadContentTooManyRequests() *UploadContentTooManyRequests {
	return &UploadContentTooManyRequests{}
}

/*UploadContentTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type UploadContentTooManyRequests struct {
	Payload *UploadContentTooManyRequestsBody
}

func (o *UploadContentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /_matrix/media/unstable/upload][%d] uploadContentTooManyRequests  %+v", 429, o.Payload)
}

func (o *UploadContentTooManyRequests) GetPayload() *UploadContentTooManyRequestsBody {
	return o.Payload
}

func (o *UploadContentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UploadContentTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UploadContentForbiddenBody A Matrix-level Error
swagger:model UploadContentForbiddenBody
*/
type UploadContentForbiddenBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this upload content forbidden body
func (o *UploadContentForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadContentForbiddenBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("uploadContentForbidden"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UploadContentForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadContentForbiddenBody) UnmarshalBinary(b []byte) error {
	var res UploadContentForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UploadContentOKBody upload content o k body
swagger:model UploadContentOKBody
*/
type UploadContentOKBody struct {

	// The `MXC URI`_ to the uploaded content.
	// Required: true
	ContentURI *string `json:"content_uri"`
}

// Validate validates this upload content o k body
func (o *UploadContentOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContentURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadContentOKBody) validateContentURI(formats strfmt.Registry) error {

	if err := validate.Required("uploadContentOK"+"."+"content_uri", "body", o.ContentURI); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UploadContentOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadContentOKBody) UnmarshalBinary(b []byte) error {
	var res UploadContentOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UploadContentRequestEntityTooLargeBody A Matrix-level Error
swagger:model UploadContentRequestEntityTooLargeBody
*/
type UploadContentRequestEntityTooLargeBody struct {

	// An error code.
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`
}

// Validate validates this upload content request entity too large body
func (o *UploadContentRequestEntityTooLargeBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadContentRequestEntityTooLargeBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("uploadContentRequestEntityTooLarge"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UploadContentRequestEntityTooLargeBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadContentRequestEntityTooLargeBody) UnmarshalBinary(b []byte) error {
	var res UploadContentRequestEntityTooLargeBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UploadContentTooManyRequestsBody The rate limit was reached for this request
swagger:model UploadContentTooManyRequestsBody
*/
type UploadContentTooManyRequestsBody struct {

	// The M_LIMIT_EXCEEDED error code
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`

	// The amount of time in milliseconds the client should wait
	// before trying the request again.
	RetryAfterMs int64 `json:"retry_after_ms,omitempty"`
}

// Validate validates this upload content too many requests body
func (o *UploadContentTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadContentTooManyRequestsBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("uploadContentTooManyRequests"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UploadContentTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadContentTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res UploadContentTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
