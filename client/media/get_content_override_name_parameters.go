// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetContentOverrideNameParams creates a new GetContentOverrideNameParams object
// with the default values initialized.
func NewGetContentOverrideNameParams() *GetContentOverrideNameParams {
	var (
		allowRemoteDefault = bool(true)
	)
	return &GetContentOverrideNameParams{
		AllowRemote: &allowRemoteDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetContentOverrideNameParamsWithTimeout creates a new GetContentOverrideNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetContentOverrideNameParamsWithTimeout(timeout time.Duration) *GetContentOverrideNameParams {
	var (
		allowRemoteDefault = bool(true)
	)
	return &GetContentOverrideNameParams{
		AllowRemote: &allowRemoteDefault,

		timeout: timeout,
	}
}

// NewGetContentOverrideNameParamsWithContext creates a new GetContentOverrideNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetContentOverrideNameParamsWithContext(ctx context.Context) *GetContentOverrideNameParams {
	var (
		allowRemoteDefault = bool(true)
	)
	return &GetContentOverrideNameParams{
		AllowRemote: &allowRemoteDefault,

		Context: ctx,
	}
}

// NewGetContentOverrideNameParamsWithHTTPClient creates a new GetContentOverrideNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetContentOverrideNameParamsWithHTTPClient(client *http.Client) *GetContentOverrideNameParams {
	var (
		allowRemoteDefault = bool(true)
	)
	return &GetContentOverrideNameParams{
		AllowRemote: &allowRemoteDefault,
		HTTPClient:  client,
	}
}

/*GetContentOverrideNameParams contains all the parameters to send to the API endpoint
for the get content override name operation typically these are written to a http.Request
*/
type GetContentOverrideNameParams struct {

	/*AllowRemote
	  Indicates to the server that it should not attempt to fetch the media if it is deemed
	remote. This is to prevent routing loops where the server contacts itself. Defaults to
	true if not provided.


	*/
	AllowRemote *bool
	/*FileName
	  A filename to give in the ``Content-Disposition`` header.

	*/
	FileName string
	/*MediaID
	  The media ID from the ``mxc://`` URI (the path component)


	*/
	MediaID string
	/*ServerName
	  The server name from the ``mxc://`` URI (the authoritory component)


	*/
	ServerName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get content override name params
func (o *GetContentOverrideNameParams) WithTimeout(timeout time.Duration) *GetContentOverrideNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get content override name params
func (o *GetContentOverrideNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get content override name params
func (o *GetContentOverrideNameParams) WithContext(ctx context.Context) *GetContentOverrideNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get content override name params
func (o *GetContentOverrideNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get content override name params
func (o *GetContentOverrideNameParams) WithHTTPClient(client *http.Client) *GetContentOverrideNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get content override name params
func (o *GetContentOverrideNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowRemote adds the allowRemote to the get content override name params
func (o *GetContentOverrideNameParams) WithAllowRemote(allowRemote *bool) *GetContentOverrideNameParams {
	o.SetAllowRemote(allowRemote)
	return o
}

// SetAllowRemote adds the allowRemote to the get content override name params
func (o *GetContentOverrideNameParams) SetAllowRemote(allowRemote *bool) {
	o.AllowRemote = allowRemote
}

// WithFileName adds the fileName to the get content override name params
func (o *GetContentOverrideNameParams) WithFileName(fileName string) *GetContentOverrideNameParams {
	o.SetFileName(fileName)
	return o
}

// SetFileName adds the fileName to the get content override name params
func (o *GetContentOverrideNameParams) SetFileName(fileName string) {
	o.FileName = fileName
}

// WithMediaID adds the mediaID to the get content override name params
func (o *GetContentOverrideNameParams) WithMediaID(mediaID string) *GetContentOverrideNameParams {
	o.SetMediaID(mediaID)
	return o
}

// SetMediaID adds the mediaId to the get content override name params
func (o *GetContentOverrideNameParams) SetMediaID(mediaID string) {
	o.MediaID = mediaID
}

// WithServerName adds the serverName to the get content override name params
func (o *GetContentOverrideNameParams) WithServerName(serverName string) *GetContentOverrideNameParams {
	o.SetServerName(serverName)
	return o
}

// SetServerName adds the serverName to the get content override name params
func (o *GetContentOverrideNameParams) SetServerName(serverName string) {
	o.ServerName = serverName
}

// WriteToRequest writes these params to a swagger request
func (o *GetContentOverrideNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowRemote != nil {

		// query param allow_remote
		var qrAllowRemote bool
		if o.AllowRemote != nil {
			qrAllowRemote = *o.AllowRemote
		}
		qAllowRemote := swag.FormatBool(qrAllowRemote)
		if qAllowRemote != "" {
			if err := r.SetQueryParam("allow_remote", qAllowRemote); err != nil {
				return err
			}
		}

	}

	// path param fileName
	if err := r.SetPathParam("fileName", o.FileName); err != nil {
		return err
	}

	// path param mediaId
	if err := r.SetPathParam("mediaId", o.MediaID); err != nil {
		return err
	}

	// path param serverName
	if err := r.SetPathParam("serverName", o.ServerName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
