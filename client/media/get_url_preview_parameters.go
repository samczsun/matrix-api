// Code generated by go-swagger; DO NOT EDIT.

package media

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetURLPreviewParams creates a new GetURLPreviewParams object
// with the default values initialized.
func NewGetURLPreviewParams() *GetURLPreviewParams {
	var ()
	return &GetURLPreviewParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetURLPreviewParamsWithTimeout creates a new GetURLPreviewParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetURLPreviewParamsWithTimeout(timeout time.Duration) *GetURLPreviewParams {
	var ()
	return &GetURLPreviewParams{

		timeout: timeout,
	}
}

// NewGetURLPreviewParamsWithContext creates a new GetURLPreviewParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetURLPreviewParamsWithContext(ctx context.Context) *GetURLPreviewParams {
	var ()
	return &GetURLPreviewParams{

		Context: ctx,
	}
}

// NewGetURLPreviewParamsWithHTTPClient creates a new GetURLPreviewParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetURLPreviewParamsWithHTTPClient(client *http.Client) *GetURLPreviewParams {
	var ()
	return &GetURLPreviewParams{
		HTTPClient: client,
	}
}

/*GetURLPreviewParams contains all the parameters to send to the API endpoint
for the get Url preview operation typically these are written to a http.Request
*/
type GetURLPreviewParams struct {

	/*Ts
	  The preferred point in time to return a preview for. The server may
	return a newer version if it does not have the requested version
	available.

	*/
	Ts *int64
	/*URL
	  The URL to get a preview of.

	*/
	URL string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get Url preview params
func (o *GetURLPreviewParams) WithTimeout(timeout time.Duration) *GetURLPreviewParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get Url preview params
func (o *GetURLPreviewParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get Url preview params
func (o *GetURLPreviewParams) WithContext(ctx context.Context) *GetURLPreviewParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get Url preview params
func (o *GetURLPreviewParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get Url preview params
func (o *GetURLPreviewParams) WithHTTPClient(client *http.Client) *GetURLPreviewParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get Url preview params
func (o *GetURLPreviewParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTs adds the ts to the get Url preview params
func (o *GetURLPreviewParams) WithTs(ts *int64) *GetURLPreviewParams {
	o.SetTs(ts)
	return o
}

// SetTs adds the ts to the get Url preview params
func (o *GetURLPreviewParams) SetTs(ts *int64) {
	o.Ts = ts
}

// WithURL adds the url to the get Url preview params
func (o *GetURLPreviewParams) WithURL(url string) *GetURLPreviewParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the get Url preview params
func (o *GetURLPreviewParams) SetURL(url string) {
	o.URL = url
}

// WriteToRequest writes these params to a swagger request
func (o *GetURLPreviewParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ts != nil {

		// query param ts
		var qrTs int64
		if o.Ts != nil {
			qrTs = *o.Ts
		}
		qTs := swag.FormatInt64(qrTs)
		if qTs != "" {
			if err := r.SetQueryParam("ts", qTs); err != nil {
				return err
			}
		}

	}

	// query param url
	qrURL := o.URL
	qURL := qrURL
	if qURL != "" {
		if err := r.SetQueryParam("url", qURL); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
