// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRoomEventsParams creates a new GetRoomEventsParams object
// with the default values initialized.
func NewGetRoomEventsParams() *GetRoomEventsParams {
	var ()
	return &GetRoomEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRoomEventsParamsWithTimeout creates a new GetRoomEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRoomEventsParamsWithTimeout(timeout time.Duration) *GetRoomEventsParams {
	var ()
	return &GetRoomEventsParams{

		timeout: timeout,
	}
}

// NewGetRoomEventsParamsWithContext creates a new GetRoomEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRoomEventsParamsWithContext(ctx context.Context) *GetRoomEventsParams {
	var ()
	return &GetRoomEventsParams{

		Context: ctx,
	}
}

// NewGetRoomEventsParamsWithHTTPClient creates a new GetRoomEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRoomEventsParamsWithHTTPClient(client *http.Client) *GetRoomEventsParams {
	var ()
	return &GetRoomEventsParams{
		HTTPClient: client,
	}
}

/*GetRoomEventsParams contains all the parameters to send to the API endpoint
for the get room events operation typically these are written to a http.Request
*/
type GetRoomEventsParams struct {

	/*Dir
	  The direction to return events from.

	*/
	Dir string
	/*Filter
	  A JSON RoomEventFilter to filter returned events with.

	*/
	Filter *string
	/*From
	  The token to start returning events from. This token can be obtained
	from a ``prev_batch`` token returned for each room by the sync API,
	or from a ``start`` or ``end`` token returned by a previous request
	to this endpoint.

	*/
	From string
	/*Limit
	  The maximum number of events to return. Default: 10.

	*/
	Limit *int64
	/*RoomID
	  The room to get events from.

	*/
	RoomID string
	/*To
	  The token to stop returning events at. This token can be obtained from
	a ``prev_batch`` token returned for each room by the sync endpoint,
	or from a ``start`` or ``end`` token returned by a previous request to
	this endpoint.

	*/
	To *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get room events params
func (o *GetRoomEventsParams) WithTimeout(timeout time.Duration) *GetRoomEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get room events params
func (o *GetRoomEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get room events params
func (o *GetRoomEventsParams) WithContext(ctx context.Context) *GetRoomEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get room events params
func (o *GetRoomEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get room events params
func (o *GetRoomEventsParams) WithHTTPClient(client *http.Client) *GetRoomEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get room events params
func (o *GetRoomEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDir adds the dir to the get room events params
func (o *GetRoomEventsParams) WithDir(dir string) *GetRoomEventsParams {
	o.SetDir(dir)
	return o
}

// SetDir adds the dir to the get room events params
func (o *GetRoomEventsParams) SetDir(dir string) {
	o.Dir = dir
}

// WithFilter adds the filter to the get room events params
func (o *GetRoomEventsParams) WithFilter(filter *string) *GetRoomEventsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get room events params
func (o *GetRoomEventsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithFrom adds the from to the get room events params
func (o *GetRoomEventsParams) WithFrom(from string) *GetRoomEventsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get room events params
func (o *GetRoomEventsParams) SetFrom(from string) {
	o.From = from
}

// WithLimit adds the limit to the get room events params
func (o *GetRoomEventsParams) WithLimit(limit *int64) *GetRoomEventsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get room events params
func (o *GetRoomEventsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithRoomID adds the roomID to the get room events params
func (o *GetRoomEventsParams) WithRoomID(roomID string) *GetRoomEventsParams {
	o.SetRoomID(roomID)
	return o
}

// SetRoomID adds the roomId to the get room events params
func (o *GetRoomEventsParams) SetRoomID(roomID string) {
	o.RoomID = roomID
}

// WithTo adds the to to the get room events params
func (o *GetRoomEventsParams) WithTo(to *string) *GetRoomEventsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get room events params
func (o *GetRoomEventsParams) SetTo(to *string) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetRoomEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param dir
	qrDir := o.Dir
	qDir := qrDir
	if qDir != "" {
		if err := r.SetQueryParam("dir", qDir); err != nil {
			return err
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	// query param from
	qrFrom := o.From
	qFrom := qrFrom
	if qFrom != "" {
		if err := r.SetQueryParam("from", qFrom); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	// path param roomId
	if err := r.SetPathParam("roomId", o.RoomID); err != nil {
		return err
	}

	if o.To != nil {

		// query param to
		var qrTo string
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
