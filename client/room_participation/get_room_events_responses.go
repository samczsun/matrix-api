// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetRoomEventsReader is a Reader for the GetRoomEvents structure.
type GetRoomEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRoomEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRoomEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRoomEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRoomEventsOK creates a GetRoomEventsOK with default headers values
func NewGetRoomEventsOK() *GetRoomEventsOK {
	return &GetRoomEventsOK{}
}

/*GetRoomEventsOK handles this case with default header values.

A list of messages with a new token to request more.
*/
type GetRoomEventsOK struct {
	Payload *GetRoomEventsOKBody
}

func (o *GetRoomEventsOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/rooms/{roomId}/messages][%d] getRoomEventsOK  %+v", 200, o.Payload)
}

func (o *GetRoomEventsOK) GetPayload() *GetRoomEventsOKBody {
	return o.Payload
}

func (o *GetRoomEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRoomEventsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRoomEventsForbidden creates a GetRoomEventsForbidden with default headers values
func NewGetRoomEventsForbidden() *GetRoomEventsForbidden {
	return &GetRoomEventsForbidden{}
}

/*GetRoomEventsForbidden handles this case with default header values.

You aren't a member of the room.

*/
type GetRoomEventsForbidden struct {
}

func (o *GetRoomEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/rooms/{roomId}/messages][%d] getRoomEventsForbidden ", 403)
}

func (o *GetRoomEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*ChunkItems0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model ChunkItems0AllOf0Unsigned
*/
type ChunkItems0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this chunk items0 all of0 unsigned
func (o *ChunkItems0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetRoomEventsOKBody A list of messages with a new token to request more.
swagger:model GetRoomEventsOKBody
*/
type GetRoomEventsOKBody struct {

	// A list of room events. The order depends on the ``dir`` parameter.
	// For ``dir=b`` events will be in reverse-chronological order,
	// for ``dir=f`` in chronological order, so that events start
	// at the ``from`` point.
	Chunk []*ChunkItems0 `json:"chunk"`

	// The token the pagination ends at. If ``dir=b`` this token should
	// be used again to request even earlier events.
	End string `json:"end,omitempty"`

	// The token the pagination starts from. If ``dir=b`` this will be
	// the token supplied in ``from``.
	Start string `json:"start,omitempty"`

	// A list of state events relevant to showing the ``chunk``. For example, if
	// ``lazy_load_members`` is enabled in the filter then this may contain
	// the membership events for the senders of events in the ``chunk``.
	//
	// Unless ``include_redundant_members`` is ``true``, the server
	// may remove membership events which would have already been
	// sent to the client in prior calls to this endpoint, assuming
	// the membership of those members has not changed.
	State []*StateItems0 `json:"state"`
}

// Validate validates this get room events o k body
func (o *GetRoomEventsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChunk(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRoomEventsOKBody) validateChunk(formats strfmt.Registry) error {

	if swag.IsZero(o.Chunk) { // not required
		return nil
	}

	for i := 0; i < len(o.Chunk); i++ {
		if swag.IsZero(o.Chunk[i]) { // not required
			continue
		}

		if o.Chunk[i] != nil {
			if err := o.Chunk[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRoomEventsOK" + "." + "chunk" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetRoomEventsOKBody) validateState(formats strfmt.Registry) error {

	if swag.IsZero(o.State) { // not required
		return nil
	}

	for i := 0; i < len(o.State); i++ {
		if swag.IsZero(o.State[i]) { // not required
			continue
		}

		if o.State[i] != nil {
			if err := o.State[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRoomEventsOK" + "." + "state" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRoomEventsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRoomEventsOKBody) UnmarshalBinary(b []byte) error {
	var res GetRoomEventsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0AllOf0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model StateItems0AllOf0AllOf0Unsigned
*/
type StateItems0AllOf0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this state items0 all of0 all of0 unsigned
func (o *StateItems0AllOf0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res StateItems0AllOf0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0AllOf1 State Event
//
// In addition to the Room Event fields, State Events have the following additional fields.
swagger:model StateItems0AllOf1
*/
type StateItems0AllOf1 struct {
	StateItems0AllOf1AllOf0

	// EventContent
	//
	// Optional. The previous ``content`` for this event. If there is no previous content, this key will be missing.
	PrevContent interface{} `json:"prev_content,omitempty"`

	// A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
	// State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
	// Required: true
	StateKey *string `json:"state_key"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *StateItems0AllOf1) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StateItems0AllOf1AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.StateItems0AllOf1AllOf0 = aO0

	// now for regular properties
	var propsStateItems0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	if err := swag.ReadJSON(raw, &propsStateItems0AllOf1); err != nil {
		return err
	}
	o.PrevContent = propsStateItems0AllOf1.PrevContent

	o.StateKey = propsStateItems0AllOf1.StateKey

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o StateItems0AllOf1) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.StateItems0AllOf1AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsStateItems0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	propsStateItems0AllOf1.PrevContent = o.PrevContent

	propsStateItems0AllOf1.StateKey = o.StateKey

	jsonDataPropsStateItems0AllOf1, errStateItems0AllOf1 := swag.WriteJSON(propsStateItems0AllOf1)
	if errStateItems0AllOf1 != nil {
		return nil, errStateItems0AllOf1
	}
	_parts = append(_parts, jsonDataPropsStateItems0AllOf1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this state items0 all of1
func (o *StateItems0AllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StateItems0AllOf1AllOf0
	if err := o.StateItems0AllOf1AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StateItems0AllOf1) validateStateKey(formats strfmt.Registry) error {

	if err := validate.Required("state_key", "body", o.StateKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0AllOf1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0AllOf1) UnmarshalBinary(b []byte) error {
	var res StateItems0AllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0AllOf1AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model StateItems0AllOf1AllOf0
*/
type StateItems0AllOf1AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *StateItems0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *StateItems0AllOf1AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsStateItems0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *StateItems0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsStateItems0AllOf1AllOf0); err != nil {
		return err
	}
	o.EventID = propsStateItems0AllOf1AllOf0.EventID

	o.OriginServerTs = propsStateItems0AllOf1AllOf0.OriginServerTs

	o.Sender = propsStateItems0AllOf1AllOf0.Sender

	o.Unsigned = propsStateItems0AllOf1AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o StateItems0AllOf1AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsStateItems0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *StateItems0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsStateItems0AllOf1AllOf0.EventID = o.EventID

	propsStateItems0AllOf1AllOf0.OriginServerTs = o.OriginServerTs

	propsStateItems0AllOf1AllOf0.Sender = o.Sender

	propsStateItems0AllOf1AllOf0.Unsigned = o.Unsigned

	jsonDataPropsStateItems0AllOf1AllOf0, errStateItems0AllOf1AllOf0 := swag.WriteJSON(propsStateItems0AllOf1AllOf0)
	if errStateItems0AllOf1AllOf0 != nil {
		return nil, errStateItems0AllOf1AllOf0
	}
	_parts = append(_parts, jsonDataPropsStateItems0AllOf1AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this state items0 all of1 all of0
func (o *StateItems0AllOf1AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StateItems0AllOf1AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf1AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf1AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf1AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *StateItems0AllOf1AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf1AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0AllOf1AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0AllOf1AllOf0) UnmarshalBinary(b []byte) error {
	var res StateItems0AllOf1AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0AllOf1AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model StateItems0AllOf1AllOf0Unsigned
*/
type StateItems0AllOf1AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this state items0 all of1 all of0 unsigned
func (o *StateItems0AllOf1AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0AllOf1AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0AllOf1AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res StateItems0AllOf1AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
