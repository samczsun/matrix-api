// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetEventsReader is a Reader for the GetEvents structure.
type GetEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetEventsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetEventsOK creates a GetEventsOK with default headers values
func NewGetEventsOK() *GetEventsOK {
	return &GetEventsOK{}
}

/*GetEventsOK handles this case with default header values.

The events received, which may be none.
*/
type GetEventsOK struct {
	Payload *GetEventsOKBody
}

func (o *GetEventsOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/events][%d] getEventsOK  %+v", 200, o.Payload)
}

func (o *GetEventsOK) GetPayload() *GetEventsOKBody {
	return o.Payload
}

func (o *GetEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetEventsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventsBadRequest creates a GetEventsBadRequest with default headers values
func NewGetEventsBadRequest() *GetEventsBadRequest {
	return &GetEventsBadRequest{}
}

/*GetEventsBadRequest handles this case with default header values.

Bad pagination ``from`` parameter.
*/
type GetEventsBadRequest struct {
}

func (o *GetEventsBadRequest) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/events][%d] getEventsBadRequest ", 400)
}

func (o *GetEventsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*ChunkItems0 Event
swagger:model ChunkItems0
*/
type ChunkItems0 struct {
	ChunkItems0AllOf0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ChunkItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ChunkItems0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.ChunkItems0AllOf0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ChunkItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.ChunkItems0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this chunk items0
func (o *ChunkItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ChunkItems0AllOf0
	if err := o.ChunkItems0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0) UnmarshalBinary(b []byte) error {
	var res ChunkItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0 Room Event
//
// Room Events have the following fields.
swagger:model ChunkItems0AllOf0
*/
type ChunkItems0AllOf0 struct {
	ChunkItems0AllOf0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ChunkItems0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ChunkItems0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.ChunkItems0AllOf0AllOf0 = aO0

	// now for regular properties
	var propsChunkItems0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsChunkItems0AllOf0); err != nil {
		return err
	}
	o.RoomID = propsChunkItems0AllOf0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ChunkItems0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.ChunkItems0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsChunkItems0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	propsChunkItems0AllOf0.RoomID = o.RoomID

	jsonDataPropsChunkItems0AllOf0, errChunkItems0AllOf0 := swag.WriteJSON(propsChunkItems0AllOf0)
	if errChunkItems0AllOf0 != nil {
		return nil, errChunkItems0AllOf0
	}
	_parts = append(_parts, jsonDataPropsChunkItems0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this chunk items0 all of0
func (o *ChunkItems0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ChunkItems0AllOf0AllOf0
	if err := o.ChunkItems0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChunkItems0AllOf0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model ChunkItems0AllOf0AllOf0
*/
type ChunkItems0AllOf0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *ChunkItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ChunkItems0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsChunkItems0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *ChunkItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsChunkItems0AllOf0AllOf0); err != nil {
		return err
	}
	o.EventID = propsChunkItems0AllOf0AllOf0.EventID

	o.OriginServerTs = propsChunkItems0AllOf0AllOf0.OriginServerTs

	o.Sender = propsChunkItems0AllOf0AllOf0.Sender

	o.Unsigned = propsChunkItems0AllOf0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ChunkItems0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsChunkItems0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *ChunkItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsChunkItems0AllOf0AllOf0.EventID = o.EventID

	propsChunkItems0AllOf0AllOf0.OriginServerTs = o.OriginServerTs

	propsChunkItems0AllOf0AllOf0.Sender = o.Sender

	propsChunkItems0AllOf0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsChunkItems0AllOf0AllOf0, errChunkItems0AllOf0AllOf0 := swag.WriteJSON(propsChunkItems0AllOf0AllOf0)
	if errChunkItems0AllOf0AllOf0 != nil {
		return nil, errChunkItems0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsChunkItems0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this chunk items0 all of0 all of0
func (o *ChunkItems0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChunkItems0AllOf0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model ChunkItems0AllOf0AllOf0Unsigned
*/
type ChunkItems0AllOf0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this chunk items0 all of0 all of0 unsigned
func (o *ChunkItems0AllOf0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetEventsOKBody get events o k body
swagger:model GetEventsOKBody
*/
type GetEventsOKBody struct {

	// An array of events.
	Chunk []*ChunkItems0 `json:"chunk"`

	// A token which correlates to the last value in ``chunk``. This
	// token should be used in the next request to ``/events``.
	End string `json:"end,omitempty"`

	// A token which correlates to the first value in ``chunk``. This
	// is usually the same token supplied to ``from=``.
	Start string `json:"start,omitempty"`
}

// Validate validates this get events o k body
func (o *GetEventsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChunk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEventsOKBody) validateChunk(formats strfmt.Registry) error {

	if swag.IsZero(o.Chunk) { // not required
		return nil
	}

	for i := 0; i < len(o.Chunk); i++ {
		if swag.IsZero(o.Chunk[i]) { // not required
			continue
		}

		if o.Chunk[i] != nil {
			if err := o.Chunk[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEventsOK" + "." + "chunk" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEventsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventsOKBody) UnmarshalBinary(b []byte) error {
	var res GetEventsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
