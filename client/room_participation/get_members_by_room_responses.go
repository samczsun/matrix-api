// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetMembersByRoomReader is a Reader for the GetMembersByRoom structure.
type GetMembersByRoomReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMembersByRoomReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMembersByRoomOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetMembersByRoomForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetMembersByRoomOK creates a GetMembersByRoomOK with default headers values
func NewGetMembersByRoomOK() *GetMembersByRoomOK {
	return &GetMembersByRoomOK{}
}

/*GetMembersByRoomOK handles this case with default header values.

A list of members of the room. If you are joined to the room then
this will be the current members of the room. If you have left the
room then this will be the members of the room when you left.
*/
type GetMembersByRoomOK struct {
	Payload *GetMembersByRoomOKBody
}

func (o *GetMembersByRoomOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/rooms/{roomId}/members][%d] getMembersByRoomOK  %+v", 200, o.Payload)
}

func (o *GetMembersByRoomOK) GetPayload() *GetMembersByRoomOKBody {
	return o.Payload
}

func (o *GetMembersByRoomOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetMembersByRoomOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMembersByRoomForbidden creates a GetMembersByRoomForbidden with default headers values
func NewGetMembersByRoomForbidden() *GetMembersByRoomForbidden {
	return &GetMembersByRoomForbidden{}
}

/*GetMembersByRoomForbidden handles this case with default header values.

You aren't a member of the room and weren't previously a member of the room.

*/
type GetMembersByRoomForbidden struct {
}

func (o *GetMembersByRoomForbidden) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/rooms/{roomId}/members][%d] getMembersByRoomForbidden ", 403)
}

func (o *GetMembersByRoomForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*ChunkItems0AllOf0AllOf0AllOf0 Room Event
//
// Room Events have the following fields.
swagger:model ChunkItems0AllOf0AllOf0AllOf0
*/
type ChunkItems0AllOf0AllOf0AllOf0 struct {
	ChunkItems0AllOf0AllOf0AllOf0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ChunkItems0AllOf0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ChunkItems0AllOf0AllOf0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.ChunkItems0AllOf0AllOf0AllOf0AllOf0 = aO0

	// now for regular properties
	var propsChunkItems0AllOf0AllOf0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsChunkItems0AllOf0AllOf0AllOf0); err != nil {
		return err
	}
	o.RoomID = propsChunkItems0AllOf0AllOf0AllOf0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ChunkItems0AllOf0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.ChunkItems0AllOf0AllOf0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsChunkItems0AllOf0AllOf0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	propsChunkItems0AllOf0AllOf0AllOf0.RoomID = o.RoomID

	jsonDataPropsChunkItems0AllOf0AllOf0AllOf0, errChunkItems0AllOf0AllOf0AllOf0 := swag.WriteJSON(propsChunkItems0AllOf0AllOf0AllOf0)
	if errChunkItems0AllOf0AllOf0AllOf0 != nil {
		return nil, errChunkItems0AllOf0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsChunkItems0AllOf0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this chunk items0 all of0 all of0 all of0
func (o *ChunkItems0AllOf0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ChunkItems0AllOf0AllOf0AllOf0AllOf0
	if err := o.ChunkItems0AllOf0AllOf0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0AllOf0AllOf0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model ChunkItems0AllOf0AllOf0AllOf0AllOf0
*/
type ChunkItems0AllOf0AllOf0AllOf0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *ChunkItems0AllOf0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsChunkItems0AllOf0AllOf0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *ChunkItems0AllOf0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsChunkItems0AllOf0AllOf0AllOf0AllOf0); err != nil {
		return err
	}
	o.EventID = propsChunkItems0AllOf0AllOf0AllOf0AllOf0.EventID

	o.OriginServerTs = propsChunkItems0AllOf0AllOf0AllOf0AllOf0.OriginServerTs

	o.Sender = propsChunkItems0AllOf0AllOf0AllOf0AllOf0.Sender

	o.Unsigned = propsChunkItems0AllOf0AllOf0AllOf0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ChunkItems0AllOf0AllOf0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsChunkItems0AllOf0AllOf0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *ChunkItems0AllOf0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsChunkItems0AllOf0AllOf0AllOf0AllOf0.EventID = o.EventID

	propsChunkItems0AllOf0AllOf0AllOf0AllOf0.OriginServerTs = o.OriginServerTs

	propsChunkItems0AllOf0AllOf0AllOf0AllOf0.Sender = o.Sender

	propsChunkItems0AllOf0AllOf0AllOf0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsChunkItems0AllOf0AllOf0AllOf0AllOf0, errChunkItems0AllOf0AllOf0AllOf0AllOf0 := swag.WriteJSON(propsChunkItems0AllOf0AllOf0AllOf0AllOf0)
	if errChunkItems0AllOf0AllOf0AllOf0AllOf0 != nil {
		return nil, errChunkItems0AllOf0AllOf0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsChunkItems0AllOf0AllOf0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this chunk items0 all of0 all of0 all of0 all of0
func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0AllOf0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0AllOf0AllOf0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model ChunkItems0AllOf0AllOf0AllOf0AllOf0Unsigned
*/
type ChunkItems0AllOf0AllOf0AllOf0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this chunk items0 all of0 all of0 all of0 all of0 unsigned
func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0AllOf0AllOf0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0AllOf0AllOf1 State Event
//
// In addition to the Room Event fields, State Events have the following additional fields.
swagger:model ChunkItems0AllOf0AllOf0AllOf1
*/
type ChunkItems0AllOf0AllOf0AllOf1 struct {
	ChunkItems0AllOf0AllOf0AllOf1AllOf0

	// EventContent
	//
	// Optional. The previous ``content`` for this event. If there is no previous content, this key will be missing.
	PrevContent interface{} `json:"prev_content,omitempty"`

	// A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
	// State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
	// Required: true
	StateKey *string `json:"state_key"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ChunkItems0AllOf0AllOf0AllOf1) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ChunkItems0AllOf0AllOf0AllOf1AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.ChunkItems0AllOf0AllOf0AllOf1AllOf0 = aO0

	// now for regular properties
	var propsChunkItems0AllOf0AllOf0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	if err := swag.ReadJSON(raw, &propsChunkItems0AllOf0AllOf0AllOf1); err != nil {
		return err
	}
	o.PrevContent = propsChunkItems0AllOf0AllOf0AllOf1.PrevContent

	o.StateKey = propsChunkItems0AllOf0AllOf0AllOf1.StateKey

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ChunkItems0AllOf0AllOf0AllOf1) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.ChunkItems0AllOf0AllOf0AllOf1AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsChunkItems0AllOf0AllOf0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	propsChunkItems0AllOf0AllOf0AllOf1.PrevContent = o.PrevContent

	propsChunkItems0AllOf0AllOf0AllOf1.StateKey = o.StateKey

	jsonDataPropsChunkItems0AllOf0AllOf0AllOf1, errChunkItems0AllOf0AllOf0AllOf1 := swag.WriteJSON(propsChunkItems0AllOf0AllOf0AllOf1)
	if errChunkItems0AllOf0AllOf0AllOf1 != nil {
		return nil, errChunkItems0AllOf0AllOf0AllOf1
	}
	_parts = append(_parts, jsonDataPropsChunkItems0AllOf0AllOf0AllOf1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this chunk items0 all of0 all of0 all of1
func (o *ChunkItems0AllOf0AllOf0AllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ChunkItems0AllOf0AllOf0AllOf1AllOf0
	if err := o.ChunkItems0AllOf0AllOf0AllOf1AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf1) validateStateKey(formats strfmt.Registry) error {

	if err := validate.Required("state_key", "body", o.StateKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf1) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0AllOf0AllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0AllOf0AllOf1AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model ChunkItems0AllOf0AllOf0AllOf1AllOf0
*/
type ChunkItems0AllOf0AllOf0AllOf1AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *ChunkItems0AllOf0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsChunkItems0AllOf0AllOf0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *ChunkItems0AllOf0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsChunkItems0AllOf0AllOf0AllOf1AllOf0); err != nil {
		return err
	}
	o.EventID = propsChunkItems0AllOf0AllOf0AllOf1AllOf0.EventID

	o.OriginServerTs = propsChunkItems0AllOf0AllOf0AllOf1AllOf0.OriginServerTs

	o.Sender = propsChunkItems0AllOf0AllOf0AllOf1AllOf0.Sender

	o.Unsigned = propsChunkItems0AllOf0AllOf0AllOf1AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ChunkItems0AllOf0AllOf0AllOf1AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsChunkItems0AllOf0AllOf0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *ChunkItems0AllOf0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsChunkItems0AllOf0AllOf0AllOf1AllOf0.EventID = o.EventID

	propsChunkItems0AllOf0AllOf0AllOf1AllOf0.OriginServerTs = o.OriginServerTs

	propsChunkItems0AllOf0AllOf0AllOf1AllOf0.Sender = o.Sender

	propsChunkItems0AllOf0AllOf0AllOf1AllOf0.Unsigned = o.Unsigned

	jsonDataPropsChunkItems0AllOf0AllOf0AllOf1AllOf0, errChunkItems0AllOf0AllOf0AllOf1AllOf0 := swag.WriteJSON(propsChunkItems0AllOf0AllOf0AllOf1AllOf0)
	if errChunkItems0AllOf0AllOf0AllOf1AllOf0 != nil {
		return nil, errChunkItems0AllOf0AllOf0AllOf1AllOf0
	}
	_parts = append(_parts, jsonDataPropsChunkItems0AllOf0AllOf0AllOf1AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this chunk items0 all of0 all of0 all of1 all of0
func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0AllOf0AllOf1AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0AllOf0AllOf1AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model ChunkItems0AllOf0AllOf0AllOf1AllOf0Unsigned
*/
type ChunkItems0AllOf0AllOf0AllOf1AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this chunk items0 all of0 all of0 all of1 all of0 unsigned
func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0AllOf0AllOf1AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0AllOf0AllOf1AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0Content EventContent
swagger:model ChunkItems0AllOf0Content
*/
type ChunkItems0AllOf0Content struct {

	// The avatar URL for this user, if any. This is added by the homeserver.
	AvatarURL string `json:"avatar_url,omitempty"`

	// The display name for this user, if any. This is added by the homeserver.
	Displayname string `json:"displayname,omitempty"`

	// Flag indicating if the room containing this event was created with the intention of being a direct chat. See `Direct Messaging`_.
	IsDirect bool `json:"is_direct,omitempty"`

	// The membership state of the user.
	// Required: true
	// Enum: [invite join knock leave ban]
	Membership *string `json:"membership"`

	// third party invite
	ThirdPartyInvite *ChunkItems0AllOf0ContentThirdPartyInvite `json:"third_party_invite,omitempty"`

	// unsigned
	Unsigned *ChunkItems0AllOf0ContentUnsigned `json:"unsigned,omitempty"`
}

// Validate validates this chunk items0 all of0 content
func (o *ChunkItems0AllOf0Content) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMembership(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateThirdPartyInvite(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var chunkItems0AllOf0ContentTypeMembershipPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["invite","join","knock","leave","ban"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chunkItems0AllOf0ContentTypeMembershipPropEnum = append(chunkItems0AllOf0ContentTypeMembershipPropEnum, v)
	}
}

const (

	// ChunkItems0AllOf0ContentMembershipInvite captures enum value "invite"
	ChunkItems0AllOf0ContentMembershipInvite string = "invite"

	// ChunkItems0AllOf0ContentMembershipJoin captures enum value "join"
	ChunkItems0AllOf0ContentMembershipJoin string = "join"

	// ChunkItems0AllOf0ContentMembershipKnock captures enum value "knock"
	ChunkItems0AllOf0ContentMembershipKnock string = "knock"

	// ChunkItems0AllOf0ContentMembershipLeave captures enum value "leave"
	ChunkItems0AllOf0ContentMembershipLeave string = "leave"

	// ChunkItems0AllOf0ContentMembershipBan captures enum value "ban"
	ChunkItems0AllOf0ContentMembershipBan string = "ban"
)

// prop value enum
func (o *ChunkItems0AllOf0Content) validateMembershipEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, chunkItems0AllOf0ContentTypeMembershipPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ChunkItems0AllOf0Content) validateMembership(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"membership", "body", o.Membership); err != nil {
		return err
	}

	// value enum
	if err := o.validateMembershipEnum("content"+"."+"membership", "body", *o.Membership); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0Content) validateThirdPartyInvite(formats strfmt.Registry) error {

	if swag.IsZero(o.ThirdPartyInvite) { // not required
		return nil
	}

	if o.ThirdPartyInvite != nil {
		if err := o.ThirdPartyInvite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content" + "." + "third_party_invite")
			}
			return err
		}
	}

	return nil
}

func (o *ChunkItems0AllOf0Content) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content" + "." + "unsigned")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0Content) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0Content) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0Content
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0ContentThirdPartyInvite Invite
swagger:model ChunkItems0AllOf0ContentThirdPartyInvite
*/
type ChunkItems0AllOf0ContentThirdPartyInvite struct {

	// A name which can be displayed to represent the user instead of their third party identifier
	// Required: true
	DisplayName *string `json:"display_name"`

	// signed
	// Required: true
	Signed *ChunkItems0AllOf0ContentThirdPartyInviteSigned `json:"signed"`
}

// Validate validates this chunk items0 all of0 content third party invite
func (o *ChunkItems0AllOf0ContentThirdPartyInvite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChunkItems0AllOf0ContentThirdPartyInvite) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"third_party_invite"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0ContentThirdPartyInvite) validateSigned(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"third_party_invite"+"."+"signed", "body", o.Signed); err != nil {
		return err
	}

	if o.Signed != nil {
		if err := o.Signed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content" + "." + "third_party_invite" + "." + "signed")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0ContentThirdPartyInvite) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0ContentThirdPartyInvite) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0ContentThirdPartyInvite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0ContentThirdPartyInviteSigned signed
//
// A block of content which has been signed, which servers can use to verify the event. Clients should ignore this.
swagger:model ChunkItems0AllOf0ContentThirdPartyInviteSigned
*/
type ChunkItems0AllOf0ContentThirdPartyInviteSigned struct {

	// The invited matrix user ID. Must be equal to the user_id property of the event.
	// Required: true
	Mxid *string `json:"mxid"`

	// Signatures
	//
	// A single signature from the verifying server, in the format specified by the Signing Events section of the server-server API.
	// Required: true
	Signatures interface{} `json:"signatures"`

	// The token property of the containing third_party_invite object.
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this chunk items0 all of0 content third party invite signed
func (o *ChunkItems0AllOf0ContentThirdPartyInviteSigned) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMxid(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignatures(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChunkItems0AllOf0ContentThirdPartyInviteSigned) validateMxid(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"third_party_invite"+"."+"signed"+"."+"mxid", "body", o.Mxid); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0ContentThirdPartyInviteSigned) validateSignatures(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"third_party_invite"+"."+"signed"+"."+"signatures", "body", o.Signatures); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0ContentThirdPartyInviteSigned) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"third_party_invite"+"."+"signed"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0ContentThirdPartyInviteSigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0ContentThirdPartyInviteSigned) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0ContentThirdPartyInviteSigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0ContentUnsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model ChunkItems0AllOf0ContentUnsigned
*/
type ChunkItems0AllOf0ContentUnsigned struct {

	// A subset of the state of the room at the time of the invite, if ``membership`` is ``invite``. Note that this state is informational, and SHOULD NOT be trusted; once the client has joined the room, it SHOULD fetch the live state from the server and discard the invite_room_state. Also, clients must not rely on any particular state being present here; they SHOULD behave properly (with possibly a degraded but not a broken experience) in the absence of any particular events here. If they are set on the room, at least the state for ``m.room.avatar``, ``m.room.canonical_alias``, ``m.room.join_rules``, and ``m.room.name`` SHOULD be included.
	InviteRoomState []*ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0 `json:"invite_room_state"`
}

// Validate validates this chunk items0 all of0 content unsigned
func (o *ChunkItems0AllOf0ContentUnsigned) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInviteRoomState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChunkItems0AllOf0ContentUnsigned) validateInviteRoomState(formats strfmt.Registry) error {

	if swag.IsZero(o.InviteRoomState) { // not required
		return nil
	}

	for i := 0; i < len(o.InviteRoomState); i++ {
		if swag.IsZero(o.InviteRoomState[i]) { // not required
			continue
		}

		if o.InviteRoomState[i] != nil {
			if err := o.InviteRoomState[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content" + "." + "unsigned" + "." + "invite_room_state" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0ContentUnsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0ContentUnsigned) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0ContentUnsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0 StrippedState
//
// A stripped down state event, with only the ``type``, ``state_key``,
// ``sender``, and ``content`` keys.
swagger:model ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0
*/
type ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0 struct {

	// EventContent
	//
	// The ``content`` for the event.
	// Required: true
	Content interface{} `json:"content"`

	// The ``sender`` for the event.
	// Required: true
	Sender *string `json:"sender"`

	// The ``state_key`` for the event.
	// Required: true
	StateKey *string `json:"state_key"`

	// The ``type`` for the event.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this chunk items0 all of0 content unsigned invite room state items0
func (o *ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0) validateStateKey(formats strfmt.Registry) error {

	if err := validate.Required("state_key", "body", o.StateKey); err != nil {
		return err
	}

	return nil
}

func (o *ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0) UnmarshalBinary(b []byte) error {
	var res ChunkItems0AllOf0ContentUnsignedInviteRoomStateItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetMembersByRoomOKBody get members by room o k body
swagger:model GetMembersByRoomOKBody
*/
type GetMembersByRoomOKBody struct {

	// chunk
	Chunk []*ChunkItems0 `json:"chunk"`
}

// Validate validates this get members by room o k body
func (o *GetMembersByRoomOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChunk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMembersByRoomOKBody) validateChunk(formats strfmt.Registry) error {

	if swag.IsZero(o.Chunk) { // not required
		return nil
	}

	for i := 0; i < len(o.Chunk); i++ {
		if swag.IsZero(o.Chunk[i]) { // not required
			continue
		}

		if o.Chunk[i] != nil {
			if err := o.Chunk[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMembersByRoomOK" + "." + "chunk" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMembersByRoomOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMembersByRoomOKBody) UnmarshalBinary(b []byte) error {
	var res GetMembersByRoomOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
