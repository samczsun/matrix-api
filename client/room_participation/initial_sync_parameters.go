// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewInitialSyncParams creates a new InitialSyncParams object
// with the default values initialized.
func NewInitialSyncParams() *InitialSyncParams {
	var ()
	return &InitialSyncParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewInitialSyncParamsWithTimeout creates a new InitialSyncParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewInitialSyncParamsWithTimeout(timeout time.Duration) *InitialSyncParams {
	var ()
	return &InitialSyncParams{

		timeout: timeout,
	}
}

// NewInitialSyncParamsWithContext creates a new InitialSyncParams object
// with the default values initialized, and the ability to set a context for a request
func NewInitialSyncParamsWithContext(ctx context.Context) *InitialSyncParams {
	var ()
	return &InitialSyncParams{

		Context: ctx,
	}
}

// NewInitialSyncParamsWithHTTPClient creates a new InitialSyncParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewInitialSyncParamsWithHTTPClient(client *http.Client) *InitialSyncParams {
	var ()
	return &InitialSyncParams{
		HTTPClient: client,
	}
}

/*InitialSyncParams contains all the parameters to send to the API endpoint
for the initial sync operation typically these are written to a http.Request
*/
type InitialSyncParams struct {

	/*Archived
	  Whether to include rooms that the user has left. If ``false`` then
	only rooms that the user has been invited to or has joined are
	included. If set to ``true`` then rooms that the user has left are
	included as well. By default this is ``false``.

	*/
	Archived *bool
	/*Limit
	  The maximum number of messages to return for each room.

	*/
	Limit *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the initial sync params
func (o *InitialSyncParams) WithTimeout(timeout time.Duration) *InitialSyncParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the initial sync params
func (o *InitialSyncParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the initial sync params
func (o *InitialSyncParams) WithContext(ctx context.Context) *InitialSyncParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the initial sync params
func (o *InitialSyncParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the initial sync params
func (o *InitialSyncParams) WithHTTPClient(client *http.Client) *InitialSyncParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the initial sync params
func (o *InitialSyncParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArchived adds the archived to the initial sync params
func (o *InitialSyncParams) WithArchived(archived *bool) *InitialSyncParams {
	o.SetArchived(archived)
	return o
}

// SetArchived adds the archived to the initial sync params
func (o *InitialSyncParams) SetArchived(archived *bool) {
	o.Archived = archived
}

// WithLimit adds the limit to the initial sync params
func (o *InitialSyncParams) WithLimit(limit *int64) *InitialSyncParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the initial sync params
func (o *InitialSyncParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WriteToRequest writes these params to a swagger request
func (o *InitialSyncParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Archived != nil {

		// query param archived
		var qrArchived bool
		if o.Archived != nil {
			qrArchived = *o.Archived
		}
		qArchived := swag.FormatBool(qrArchived)
		if qArchived != "" {
			if err := r.SetQueryParam("archived", qArchived); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
