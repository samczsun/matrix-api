// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSyncParams creates a new SyncParams object
// with the default values initialized.
func NewSyncParams() *SyncParams {
	var ()
	return &SyncParams{

		requestTimeout: cr.DefaultTimeout,
	}
}

// NewSyncParamsWithTimeout creates a new SyncParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSyncParamsWithTimeout(timeout time.Duration) *SyncParams {
	var ()
	return &SyncParams{

		requestTimeout: timeout,
	}
}

// NewSyncParamsWithContext creates a new SyncParams object
// with the default values initialized, and the ability to set a context for a request
func NewSyncParamsWithContext(ctx context.Context) *SyncParams {
	var ()
	return &SyncParams{

		Context: ctx,
	}
}

// NewSyncParamsWithHTTPClient creates a new SyncParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSyncParamsWithHTTPClient(client *http.Client) *SyncParams {
	var ()
	return &SyncParams{
		HTTPClient: client,
	}
}

/*SyncParams contains all the parameters to send to the API endpoint
for the sync operation typically these are written to a http.Request
*/
type SyncParams struct {

	/*Filter
	  The ID of a filter created using the filter API or a filter JSON
	object encoded as a string. The server will detect whether it is
	an ID or a JSON object by whether the first character is a ``"{"``
	open brace. Passing the JSON inline is best suited to one off
	requests. Creating a filter using the filter API is recommended for
	clients that reuse the same filter multiple times, for example in
	long poll requests.

	See `Filtering <#filtering>`_ for more information.

	*/
	Filter *string
	/*FullState
	  Controls whether to include the full state for all rooms the user
	is a member of.

	If this is set to ``true``, then all state events will be returned,
	even if ``since`` is non-empty. The timeline will still be limited
	by the ``since`` parameter. In this case, the ``timeout`` parameter
	will be ignored and the query will return immediately, possibly with
	an empty timeline.

	If ``false``, and ``since`` is non-empty, only state which has
	changed since the point indicated by ``since`` will be returned.

	By default, this is ``false``.

	*/
	FullState *bool
	/*SetPresence
	  Controls whether the client is automatically marked as online by
	polling this API. If this parameter is omitted then the client is
	automatically marked as online when it uses this API. Otherwise if
	the parameter is set to "offline" then the client is not marked as
	being online when it uses this API. When set to "unavailable", the
	client is marked as being idle.

	*/
	SetPresence *string
	/*Since
	  A point in time to continue a sync from.

	*/
	Since *string
	/*Timeout
	  The maximum time to wait, in milliseconds, before returning this
	request. If no events (or other data) become available before this
	time elapses, the server will return a response with empty fields.

	By default, this is ``0``, so the server will return immediately
	even if the response is empty.

	*/
	Timeout *int64

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithRequestTimeout adds the timeout to the sync params
func (o *SyncParams) WithRequestTimeout(timeout time.Duration) *SyncParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the sync params
func (o *SyncParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the sync params
func (o *SyncParams) WithContext(ctx context.Context) *SyncParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sync params
func (o *SyncParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sync params
func (o *SyncParams) WithHTTPClient(client *http.Client) *SyncParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sync params
func (o *SyncParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the sync params
func (o *SyncParams) WithFilter(filter *string) *SyncParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the sync params
func (o *SyncParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithFullState adds the fullState to the sync params
func (o *SyncParams) WithFullState(fullState *bool) *SyncParams {
	o.SetFullState(fullState)
	return o
}

// SetFullState adds the fullState to the sync params
func (o *SyncParams) SetFullState(fullState *bool) {
	o.FullState = fullState
}

// WithSetPresence adds the setPresence to the sync params
func (o *SyncParams) WithSetPresence(setPresence *string) *SyncParams {
	o.SetSetPresence(setPresence)
	return o
}

// SetSetPresence adds the setPresence to the sync params
func (o *SyncParams) SetSetPresence(setPresence *string) {
	o.SetPresence = setPresence
}

// WithSince adds the since to the sync params
func (o *SyncParams) WithSince(since *string) *SyncParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the sync params
func (o *SyncParams) SetSince(since *string) {
	o.Since = since
}

// WithTimeout adds the timeout to the sync params
func (o *SyncParams) WithTimeout(timeout *int64) *SyncParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sync params
func (o *SyncParams) SetTimeout(timeout *int64) {
	o.Timeout = timeout
}

// WriteToRequest writes these params to a swagger request
func (o *SyncParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.FullState != nil {

		// query param full_state
		var qrFullState bool
		if o.FullState != nil {
			qrFullState = *o.FullState
		}
		qFullState := swag.FormatBool(qrFullState)
		if qFullState != "" {
			if err := r.SetQueryParam("full_state", qFullState); err != nil {
				return err
			}
		}

	}

	if o.SetPresence != nil {

		// query param set_presence
		var qrSetPresence string
		if o.SetPresence != nil {
			qrSetPresence = *o.SetPresence
		}
		qSetPresence := qrSetPresence
		if qSetPresence != "" {
			if err := r.SetQueryParam("set_presence", qSetPresence); err != nil {
				return err
			}
		}

	}

	if o.Since != nil {

		// query param since
		var qrSince string
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := qrSince
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout int64
		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := swag.FormatInt64(qrTimeout)
		if qTimeout != "" {
			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
