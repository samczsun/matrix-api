// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// InitialSyncReader is a Reader for the InitialSync structure.
type InitialSyncReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InitialSyncReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInitialSyncOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewInitialSyncNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewInitialSyncOK creates a InitialSyncOK with default headers values
func NewInitialSyncOK() *InitialSyncOK {
	return &InitialSyncOK{}
}

/*InitialSyncOK handles this case with default header values.

The user's current state.
*/
type InitialSyncOK struct {
	Payload *InitialSyncOKBody
}

func (o *InitialSyncOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/initialSync][%d] initialSyncOK  %+v", 200, o.Payload)
}

func (o *InitialSyncOK) GetPayload() *InitialSyncOKBody {
	return o.Payload
}

func (o *InitialSyncOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InitialSyncOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInitialSyncNotFound creates a InitialSyncNotFound with default headers values
func NewInitialSyncNotFound() *InitialSyncNotFound {
	return &InitialSyncNotFound{}
}

/*InitialSyncNotFound handles this case with default header values.

There is no avatar URL for this user or this user does not exist.
*/
type InitialSyncNotFound struct {
}

func (o *InitialSyncNotFound) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/initialSync][%d] initialSyncNotFound ", 404)
}

func (o *InitialSyncNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*AccountDataItems0 Event
swagger:model AccountDataItems0
*/
type AccountDataItems0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AccountDataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AccountDataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this account data items0
func (o *AccountDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AccountDataItems0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *AccountDataItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AccountDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AccountDataItems0) UnmarshalBinary(b []byte) error {
	var res AccountDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*InitialSyncOKBody initial sync o k body
swagger:model InitialSyncOKBody
*/
type InitialSyncOKBody struct {

	// The global private data created by this user.
	AccountData []*AccountDataItems0 `json:"account_data"`

	// A token which correlates to the last value in ``chunk``. This
	// token should be used with the ``/events`` API to listen for new
	// events.
	// Required: true
	End *string `json:"end"`

	// A list of presence events.
	// Required: true
	Presence []*PresenceItems0 `json:"presence"`

	// rooms
	// Required: true
	Rooms []*RoomsItems0 `json:"rooms"`
}

// Validate validates this initial sync o k body
func (o *InitialSyncOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePresence(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRooms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *InitialSyncOKBody) validateAccountData(formats strfmt.Registry) error {

	if swag.IsZero(o.AccountData) { // not required
		return nil
	}

	for i := 0; i < len(o.AccountData); i++ {
		if swag.IsZero(o.AccountData[i]) { // not required
			continue
		}

		if o.AccountData[i] != nil {
			if err := o.AccountData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initialSyncOK" + "." + "account_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *InitialSyncOKBody) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("initialSyncOK"+"."+"end", "body", o.End); err != nil {
		return err
	}

	return nil
}

func (o *InitialSyncOKBody) validatePresence(formats strfmt.Registry) error {

	if err := validate.Required("initialSyncOK"+"."+"presence", "body", o.Presence); err != nil {
		return err
	}

	for i := 0; i < len(o.Presence); i++ {
		if swag.IsZero(o.Presence[i]) { // not required
			continue
		}

		if o.Presence[i] != nil {
			if err := o.Presence[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initialSyncOK" + "." + "presence" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *InitialSyncOKBody) validateRooms(formats strfmt.Registry) error {

	if err := validate.Required("initialSyncOK"+"."+"rooms", "body", o.Rooms); err != nil {
		return err
	}

	for i := 0; i < len(o.Rooms); i++ {
		if swag.IsZero(o.Rooms[i]) { // not required
			continue
		}

		if o.Rooms[i] != nil {
			if err := o.Rooms[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("initialSyncOK" + "." + "rooms" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *InitialSyncOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InitialSyncOKBody) UnmarshalBinary(b []byte) error {
	var res InitialSyncOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PresenceItems0 Event
swagger:model PresenceItems0
*/
type PresenceItems0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PresenceItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PresenceItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this presence items0
func (o *PresenceItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PresenceItems0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *PresenceItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PresenceItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PresenceItems0) UnmarshalBinary(b []byte) error {
	var res PresenceItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0 RoomInfo
swagger:model RoomsItems0
*/
type RoomsItems0 struct {

	// The private data that this user has attached to
	// this room.
	AccountData []*RoomsItems0AccountDataItems0 `json:"account_data"`

	// InviteEvent
	//
	// The invite event if ``membership`` is ``invite``
	Invite struct {
		RoomsItems0InviteAllOf0
	} `json:"invite,omitempty"`

	// The user's membership state in this room.
	// Required: true
	// Enum: [invite join leave ban]
	Membership *string `json:"membership"`

	// messages
	Messages *RoomsItems0Messages `json:"messages,omitempty"`

	// The ID of this room.
	// Required: true
	RoomID *string `json:"room_id"`

	// If the user is a member of the room this will be the
	// current state of the room as a list of events. If the
	// user has left the room this will be the state of the
	// room when they left it.
	State []*RoomsItems0StateItems0 `json:"state"`

	// Whether this room is visible to the ``/publicRooms`` API
	// or not."
	// Enum: [private public]
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this rooms items0
func (o *RoomsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccountData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvite(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMembership(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0) validateAccountData(formats strfmt.Registry) error {

	if swag.IsZero(o.AccountData) { // not required
		return nil
	}

	for i := 0; i < len(o.AccountData); i++ {
		if swag.IsZero(o.AccountData[i]) { // not required
			continue
		}

		if o.AccountData[i] != nil {
			if err := o.AccountData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("account_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RoomsItems0) validateInvite(formats strfmt.Registry) error {

	if swag.IsZero(o.Invite) { // not required
		return nil
	}

	return nil
}

var roomsItems0TypeMembershipPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["invite","join","leave","ban"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roomsItems0TypeMembershipPropEnum = append(roomsItems0TypeMembershipPropEnum, v)
	}
}

const (

	// RoomsItems0MembershipInvite captures enum value "invite"
	RoomsItems0MembershipInvite string = "invite"

	// RoomsItems0MembershipJoin captures enum value "join"
	RoomsItems0MembershipJoin string = "join"

	// RoomsItems0MembershipLeave captures enum value "leave"
	RoomsItems0MembershipLeave string = "leave"

	// RoomsItems0MembershipBan captures enum value "ban"
	RoomsItems0MembershipBan string = "ban"
)

// prop value enum
func (o *RoomsItems0) validateMembershipEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, roomsItems0TypeMembershipPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RoomsItems0) validateMembership(formats strfmt.Registry) error {

	if err := validate.Required("membership", "body", o.Membership); err != nil {
		return err
	}

	// value enum
	if err := o.validateMembershipEnum("membership", "body", *o.Membership); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0) validateMessages(formats strfmt.Registry) error {

	if swag.IsZero(o.Messages) { // not required
		return nil
	}

	if o.Messages != nil {
		if err := o.Messages.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("messages")
			}
			return err
		}
	}

	return nil
}

func (o *RoomsItems0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0) validateState(formats strfmt.Registry) error {

	if swag.IsZero(o.State) { // not required
		return nil
	}

	for i := 0; i < len(o.State); i++ {
		if swag.IsZero(o.State[i]) { // not required
			continue
		}

		if o.State[i] != nil {
			if err := o.State[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("state" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var roomsItems0TypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["private","public"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roomsItems0TypeVisibilityPropEnum = append(roomsItems0TypeVisibilityPropEnum, v)
	}
}

const (

	// RoomsItems0VisibilityPrivate captures enum value "private"
	RoomsItems0VisibilityPrivate string = "private"

	// RoomsItems0VisibilityPublic captures enum value "public"
	RoomsItems0VisibilityPublic string = "public"
)

// prop value enum
func (o *RoomsItems0) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, roomsItems0TypeVisibilityPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RoomsItems0) validateVisibility(formats strfmt.Registry) error {

	if swag.IsZero(o.Visibility) { // not required
		return nil
	}

	// value enum
	if err := o.validateVisibilityEnum("visibility", "body", o.Visibility); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0AccountDataItems0 Event
swagger:model RoomsItems0AccountDataItems0
*/
type RoomsItems0AccountDataItems0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0AccountDataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0AccountDataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 account data items0
func (o *RoomsItems0AccountDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0AccountDataItems0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0AccountDataItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0AccountDataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0AccountDataItems0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0AccountDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0 The current membership state of a user in the room.
//
// Adjusts the membership state for a user in a room. It is preferable to use the membership APIs (``/rooms/<room id>/invite`` etc) when performing membership actions rather than adjusting the state directly as there are a restricted set of valid transformations. For example, user A cannot force user B to join a room, and trying to force this state change directly will fail.
//
// The following membership states are specified:
//
// - ``invite`` - The user has been invited to join a room, but has not yet joined it. They may not participate in the room until they join.
//
// - ``join`` - The user has joined the room (possibly after accepting an invite), and may participate in it.
//
// - ``leave`` - The user was once joined to the room, but has since left (possibly by choice, or possibly by being kicked).
//
// - ``ban`` - The user has been banned from the room, and is no longer allowed to join it until they are un-banned from the room (by having their membership state set to a value other than ``ban``).
//
// - ``knock`` - This is a reserved word, which currently has no meaning.
//
// The ``third_party_invite`` property will be set if this invite is an ``invite`` event and is the successor of an ``m.room.third_party_invite`` event, and absent otherwise.
//
// This event may also include an ``invite_room_state`` key inside the event's ``unsigned`` data.
// If present, this contains an array of ``StrippedState`` Events. These events provide information
// on a subset of state events such as the room name.
//
// The user for which a membership applies is represented by the ``state_key``. Under some conditions,
// the ``sender`` and ``state_key`` may not match - this may be interpreted as the ``sender`` affecting
// the membership state of the ``state_key`` user.
//
// The ``membership`` for a given user can change over time. The table below represents the various changes
// over time and how clients and servers must interpret those changes. Previous membership can be retrieved
// from the ``prev_content`` object on an event. If not present, the user's previous membership must be assumed
// as ``leave``.
//
// .. TODO: Improve how this table is written? We use a csv-table to get around vertical header restrictions.
//
// .. csv-table::
//   :header-rows: 1
//   :stub-columns: 1
//
//   "","to ``invite``","to ``join``","to ``leave``","to ``ban``","to ``knock``"
//   "from ``invite``","No change.","User joined the room.","If the ``state_key`` is the same as the ``sender``, the user rejected the invite. Otherwise, the ``state_key`` user had their invite revoked.","User was banned.","Not implemented."
//   "from ``join``","Must never happen.","``displayname`` or ``avatar_url`` changed.","If the ``state_key`` is the same as the ``sender``, the user left. Otherwise, the ``state_key`` user was kicked.","User was kicked and banned.","Not implemented."
//   "from ``leave``","New invitation sent.","User joined.","No change.","User was banned.","Not implemented."
//   "from ``ban``","Must never happen.","Must never happen.","User was unbanned.","No change.","Not implemented."
//   "from ``knock``","Not implemented.","Not implemented.","Not implemented.","Not implemented.","Not implemented."
swagger:model RoomsItems0InviteAllOf0
*/
type RoomsItems0InviteAllOf0 struct {
	RoomsItems0InviteAllOf0AllOf0

	// content
	Content *RoomsItems0InviteAllOf0Content `json:"content,omitempty"`

	// The ``user_id`` this membership event relates to. In all cases except for when ``membership`` is
	// ``join``, the user ID sending the event does not need to match the user ID in the ``state_key``,
	// unlike other events. Regular authorisation rules still apply.
	StateKey string `json:"state_key,omitempty"`

	// type
	// Enum: [m.room.member]
	Type string `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0InviteAllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RoomsItems0InviteAllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.RoomsItems0InviteAllOf0AllOf0 = aO0

	// now for regular properties
	var propsRoomsItems0InviteAllOf0 struct {
		Content *RoomsItems0InviteAllOf0Content `json:"content,omitempty"`

		StateKey string `json:"state_key,omitempty"`

		Type string `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsRoomsItems0InviteAllOf0); err != nil {
		return err
	}
	o.Content = propsRoomsItems0InviteAllOf0.Content

	o.StateKey = propsRoomsItems0InviteAllOf0.StateKey

	o.Type = propsRoomsItems0InviteAllOf0.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0InviteAllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.RoomsItems0InviteAllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRoomsItems0InviteAllOf0 struct {
		Content *RoomsItems0InviteAllOf0Content `json:"content,omitempty"`

		StateKey string `json:"state_key,omitempty"`

		Type string `json:"type,omitempty"`
	}
	propsRoomsItems0InviteAllOf0.Content = o.Content

	propsRoomsItems0InviteAllOf0.StateKey = o.StateKey

	propsRoomsItems0InviteAllOf0.Type = o.Type

	jsonDataPropsRoomsItems0InviteAllOf0, errRoomsItems0InviteAllOf0 := swag.WriteJSON(propsRoomsItems0InviteAllOf0)
	if errRoomsItems0InviteAllOf0 != nil {
		return nil, errRoomsItems0InviteAllOf0
	}
	_parts = append(_parts, jsonDataPropsRoomsItems0InviteAllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 invite all of0
func (o *RoomsItems0InviteAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RoomsItems0InviteAllOf0AllOf0
	if err := o.RoomsItems0InviteAllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0InviteAllOf0) validateContent(formats strfmt.Registry) error {

	if swag.IsZero(o.Content) { // not required
		return nil
	}

	if o.Content != nil {
		if err := o.Content.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content")
			}
			return err
		}
	}

	return nil
}

var roomsItems0InviteAllOf0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["m.room.member"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roomsItems0InviteAllOf0TypeTypePropEnum = append(roomsItems0InviteAllOf0TypeTypePropEnum, v)
	}
}

const (

	// RoomsItems0InviteAllOf0TypeMRoomMember captures enum value "m.room.member"
	RoomsItems0InviteAllOf0TypeMRoomMember string = "m.room.member"
)

// prop value enum
func (o *RoomsItems0InviteAllOf0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, roomsItems0InviteAllOf0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RoomsItems0InviteAllOf0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0AllOf0 State Event
//
// State Events have the following fields.
swagger:model RoomsItems0InviteAllOf0AllOf0
*/
type RoomsItems0InviteAllOf0AllOf0 struct {
	RoomsItems0InviteAllOf0AllOf0AllOf0

	RoomsItems0InviteAllOf0AllOf0AllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0InviteAllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RoomsItems0InviteAllOf0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.RoomsItems0InviteAllOf0AllOf0AllOf0 = aO0

	// AO1
	var aO1 RoomsItems0InviteAllOf0AllOf0AllOf1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.RoomsItems0InviteAllOf0AllOf0AllOf1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0InviteAllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(o.RoomsItems0InviteAllOf0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(o.RoomsItems0InviteAllOf0AllOf0AllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 invite all of0 all of0
func (o *RoomsItems0InviteAllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RoomsItems0InviteAllOf0AllOf0AllOf0
	if err := o.RoomsItems0InviteAllOf0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with RoomsItems0InviteAllOf0AllOf0AllOf1
	if err := o.RoomsItems0InviteAllOf0AllOf0AllOf1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0AllOf0AllOf0 Room Event
//
// Room Events have the following fields.
swagger:model RoomsItems0InviteAllOf0AllOf0AllOf0
*/
type RoomsItems0InviteAllOf0AllOf0AllOf0 struct {
	RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0InviteAllOf0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0 = aO0

	// now for regular properties
	var propsRoomsItems0InviteAllOf0AllOf0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsRoomsItems0InviteAllOf0AllOf0AllOf0); err != nil {
		return err
	}
	o.RoomID = propsRoomsItems0InviteAllOf0AllOf0AllOf0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0InviteAllOf0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRoomsItems0InviteAllOf0AllOf0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	propsRoomsItems0InviteAllOf0AllOf0AllOf0.RoomID = o.RoomID

	jsonDataPropsRoomsItems0InviteAllOf0AllOf0AllOf0, errRoomsItems0InviteAllOf0AllOf0AllOf0 := swag.WriteJSON(propsRoomsItems0InviteAllOf0AllOf0AllOf0)
	if errRoomsItems0InviteAllOf0AllOf0AllOf0 != nil {
		return nil, errRoomsItems0InviteAllOf0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsRoomsItems0InviteAllOf0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 invite all of0 all of0 all of0
func (o *RoomsItems0InviteAllOf0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0
	if err := o.RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0
*/
type RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0); err != nil {
		return err
	}
	o.EventID = propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0.EventID

	o.OriginServerTs = propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0.OriginServerTs

	o.Sender = propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0.Sender

	o.Unsigned = propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0.EventID = o.EventID

	propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0.OriginServerTs = o.OriginServerTs

	propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0.Sender = o.Sender

	propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0, errRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0 := swag.WriteJSON(propsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0)
	if errRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0 != nil {
		return nil, errRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsRoomsItems0InviteAllOf0AllOf0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 invite all of0 all of0 all of0 all of0
func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0Unsigned
*/
type RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this rooms items0 invite all of0 all of0 all of0 all of0 unsigned
func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0AllOf0AllOf0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0AllOf0AllOf1 State Event
//
// In addition to the Room Event fields, State Events have the following additional fields.
swagger:model RoomsItems0InviteAllOf0AllOf0AllOf1
*/
type RoomsItems0InviteAllOf0AllOf0AllOf1 struct {
	RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0

	// EventContent
	//
	// Optional. The previous ``content`` for this event. If there is no previous content, this key will be missing.
	PrevContent interface{} `json:"prev_content,omitempty"`

	// A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
	// State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
	// Required: true
	StateKey *string `json:"state_key"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0InviteAllOf0AllOf0AllOf1) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0 = aO0

	// now for regular properties
	var propsRoomsItems0InviteAllOf0AllOf0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	if err := swag.ReadJSON(raw, &propsRoomsItems0InviteAllOf0AllOf0AllOf1); err != nil {
		return err
	}
	o.PrevContent = propsRoomsItems0InviteAllOf0AllOf0AllOf1.PrevContent

	o.StateKey = propsRoomsItems0InviteAllOf0AllOf0AllOf1.StateKey

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0InviteAllOf0AllOf0AllOf1) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRoomsItems0InviteAllOf0AllOf0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	propsRoomsItems0InviteAllOf0AllOf0AllOf1.PrevContent = o.PrevContent

	propsRoomsItems0InviteAllOf0AllOf0AllOf1.StateKey = o.StateKey

	jsonDataPropsRoomsItems0InviteAllOf0AllOf0AllOf1, errRoomsItems0InviteAllOf0AllOf0AllOf1 := swag.WriteJSON(propsRoomsItems0InviteAllOf0AllOf0AllOf1)
	if errRoomsItems0InviteAllOf0AllOf0AllOf1 != nil {
		return nil, errRoomsItems0InviteAllOf0AllOf0AllOf1
	}
	_parts = append(_parts, jsonDataPropsRoomsItems0InviteAllOf0AllOf0AllOf1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 invite all of0 all of0 all of1
func (o *RoomsItems0InviteAllOf0AllOf0AllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0
	if err := o.RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf1) validateStateKey(formats strfmt.Registry) error {

	if err := validate.Required("state_key", "body", o.StateKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf1) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0AllOf0AllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0
*/
type RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0); err != nil {
		return err
	}
	o.EventID = propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0.EventID

	o.OriginServerTs = propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0.OriginServerTs

	o.Sender = propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0.Sender

	o.Unsigned = propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0.EventID = o.EventID

	propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0.OriginServerTs = o.OriginServerTs

	propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0.Sender = o.Sender

	propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0.Unsigned = o.Unsigned

	jsonDataPropsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0, errRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0 := swag.WriteJSON(propsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0)
	if errRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0 != nil {
		return nil, errRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0
	}
	_parts = append(_parts, jsonDataPropsRoomsItems0InviteAllOf0AllOf0AllOf1AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 invite all of0 all of0 all of1 all of0
func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0Unsigned
*/
type RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this rooms items0 invite all of0 all of0 all of1 all of0 unsigned
func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0AllOf0AllOf1AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0Content EventContent
swagger:model RoomsItems0InviteAllOf0Content
*/
type RoomsItems0InviteAllOf0Content struct {

	// The avatar URL for this user, if any. This is added by the homeserver.
	AvatarURL string `json:"avatar_url,omitempty"`

	// The display name for this user, if any. This is added by the homeserver.
	Displayname string `json:"displayname,omitempty"`

	// Flag indicating if the room containing this event was created with the intention of being a direct chat. See `Direct Messaging`_.
	IsDirect bool `json:"is_direct,omitempty"`

	// The membership state of the user.
	// Required: true
	// Enum: [invite join knock leave ban]
	Membership *string `json:"membership"`

	// third party invite
	ThirdPartyInvite *RoomsItems0InviteAllOf0ContentThirdPartyInvite `json:"third_party_invite,omitempty"`

	// unsigned
	Unsigned *RoomsItems0InviteAllOf0ContentUnsigned `json:"unsigned,omitempty"`
}

// Validate validates this rooms items0 invite all of0 content
func (o *RoomsItems0InviteAllOf0Content) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMembership(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateThirdPartyInvite(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var roomsItems0InviteAllOf0ContentTypeMembershipPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["invite","join","knock","leave","ban"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		roomsItems0InviteAllOf0ContentTypeMembershipPropEnum = append(roomsItems0InviteAllOf0ContentTypeMembershipPropEnum, v)
	}
}

const (

	// RoomsItems0InviteAllOf0ContentMembershipInvite captures enum value "invite"
	RoomsItems0InviteAllOf0ContentMembershipInvite string = "invite"

	// RoomsItems0InviteAllOf0ContentMembershipJoin captures enum value "join"
	RoomsItems0InviteAllOf0ContentMembershipJoin string = "join"

	// RoomsItems0InviteAllOf0ContentMembershipKnock captures enum value "knock"
	RoomsItems0InviteAllOf0ContentMembershipKnock string = "knock"

	// RoomsItems0InviteAllOf0ContentMembershipLeave captures enum value "leave"
	RoomsItems0InviteAllOf0ContentMembershipLeave string = "leave"

	// RoomsItems0InviteAllOf0ContentMembershipBan captures enum value "ban"
	RoomsItems0InviteAllOf0ContentMembershipBan string = "ban"
)

// prop value enum
func (o *RoomsItems0InviteAllOf0Content) validateMembershipEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, roomsItems0InviteAllOf0ContentTypeMembershipPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RoomsItems0InviteAllOf0Content) validateMembership(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"membership", "body", o.Membership); err != nil {
		return err
	}

	// value enum
	if err := o.validateMembershipEnum("content"+"."+"membership", "body", *o.Membership); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0Content) validateThirdPartyInvite(formats strfmt.Registry) error {

	if swag.IsZero(o.ThirdPartyInvite) { // not required
		return nil
	}

	if o.ThirdPartyInvite != nil {
		if err := o.ThirdPartyInvite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content" + "." + "third_party_invite")
			}
			return err
		}
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0Content) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content" + "." + "unsigned")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0Content) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0Content) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0Content
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0ContentThirdPartyInvite Invite
swagger:model RoomsItems0InviteAllOf0ContentThirdPartyInvite
*/
type RoomsItems0InviteAllOf0ContentThirdPartyInvite struct {

	// A name which can be displayed to represent the user instead of their third party identifier
	// Required: true
	DisplayName *string `json:"display_name"`

	// signed
	// Required: true
	Signed *RoomsItems0InviteAllOf0ContentThirdPartyInviteSigned `json:"signed"`
}

// Validate validates this rooms items0 invite all of0 content third party invite
func (o *RoomsItems0InviteAllOf0ContentThirdPartyInvite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0InviteAllOf0ContentThirdPartyInvite) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"third_party_invite"+"."+"display_name", "body", o.DisplayName); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0ContentThirdPartyInvite) validateSigned(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"third_party_invite"+"."+"signed", "body", o.Signed); err != nil {
		return err
	}

	if o.Signed != nil {
		if err := o.Signed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("content" + "." + "third_party_invite" + "." + "signed")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0ContentThirdPartyInvite) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0ContentThirdPartyInvite) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0ContentThirdPartyInvite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0ContentThirdPartyInviteSigned signed
//
// A block of content which has been signed, which servers can use to verify the event. Clients should ignore this.
swagger:model RoomsItems0InviteAllOf0ContentThirdPartyInviteSigned
*/
type RoomsItems0InviteAllOf0ContentThirdPartyInviteSigned struct {

	// The invited matrix user ID. Must be equal to the user_id property of the event.
	// Required: true
	Mxid *string `json:"mxid"`

	// Signatures
	//
	// A single signature from the verifying server, in the format specified by the Signing Events section of the server-server API.
	// Required: true
	Signatures interface{} `json:"signatures"`

	// The token property of the containing third_party_invite object.
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this rooms items0 invite all of0 content third party invite signed
func (o *RoomsItems0InviteAllOf0ContentThirdPartyInviteSigned) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMxid(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSignatures(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0InviteAllOf0ContentThirdPartyInviteSigned) validateMxid(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"third_party_invite"+"."+"signed"+"."+"mxid", "body", o.Mxid); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0ContentThirdPartyInviteSigned) validateSignatures(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"third_party_invite"+"."+"signed"+"."+"signatures", "body", o.Signatures); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0ContentThirdPartyInviteSigned) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("content"+"."+"third_party_invite"+"."+"signed"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0ContentThirdPartyInviteSigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0ContentThirdPartyInviteSigned) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0ContentThirdPartyInviteSigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0ContentUnsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model RoomsItems0InviteAllOf0ContentUnsigned
*/
type RoomsItems0InviteAllOf0ContentUnsigned struct {

	// A subset of the state of the room at the time of the invite, if ``membership`` is ``invite``. Note that this state is informational, and SHOULD NOT be trusted; once the client has joined the room, it SHOULD fetch the live state from the server and discard the invite_room_state. Also, clients must not rely on any particular state being present here; they SHOULD behave properly (with possibly a degraded but not a broken experience) in the absence of any particular events here. If they are set on the room, at least the state for ``m.room.avatar``, ``m.room.canonical_alias``, ``m.room.join_rules``, and ``m.room.name`` SHOULD be included.
	InviteRoomState []*RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0 `json:"invite_room_state"`
}

// Validate validates this rooms items0 invite all of0 content unsigned
func (o *RoomsItems0InviteAllOf0ContentUnsigned) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateInviteRoomState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0InviteAllOf0ContentUnsigned) validateInviteRoomState(formats strfmt.Registry) error {

	if swag.IsZero(o.InviteRoomState) { // not required
		return nil
	}

	for i := 0; i < len(o.InviteRoomState); i++ {
		if swag.IsZero(o.InviteRoomState[i]) { // not required
			continue
		}

		if o.InviteRoomState[i] != nil {
			if err := o.InviteRoomState[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("content" + "." + "unsigned" + "." + "invite_room_state" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0ContentUnsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0ContentUnsigned) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0ContentUnsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0 StrippedState
//
// A stripped down state event, with only the ``type``, ``state_key``,
// ``sender``, and ``content`` keys.
swagger:model RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0
*/
type RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0 struct {

	// EventContent
	//
	// The ``content`` for the event.
	// Required: true
	Content interface{} `json:"content"`

	// The ``sender`` for the event.
	// Required: true
	Sender *string `json:"sender"`

	// The ``state_key`` for the event.
	// Required: true
	StateKey *string `json:"state_key"`

	// The ``type`` for the event.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this rooms items0 invite all of0 content unsigned invite room state items0
func (o *RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0) validateStateKey(formats strfmt.Registry) error {

	if err := validate.Required("state_key", "body", o.StateKey); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0InviteAllOf0ContentUnsignedInviteRoomStateItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0Messages PaginationChunk
//
// The pagination chunk for this room.
swagger:model RoomsItems0Messages
*/
type RoomsItems0Messages struct {

	// If the user is a member of the room this will be a
	// list of the most recent messages for this room. If
	// the user has left the room this will be the
	// messages that preceeded them leaving. This array
	// will consist of at most ``limit`` elements.
	// Required: true
	Chunk []*RoomsItems0MessagesChunkItems0 `json:"chunk"`

	// A token which correlates to the last value in ``chunk``.
	// Used for pagination.
	// Required: true
	End *string `json:"end"`

	// A token which correlates to the first value in ``chunk``.
	// Used for pagination.
	// Required: true
	Start *string `json:"start"`
}

// Validate validates this rooms items0 messages
func (o *RoomsItems0Messages) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateChunk(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0Messages) validateChunk(formats strfmt.Registry) error {

	if err := validate.Required("messages"+"."+"chunk", "body", o.Chunk); err != nil {
		return err
	}

	for i := 0; i < len(o.Chunk); i++ {
		if swag.IsZero(o.Chunk[i]) { // not required
			continue
		}

		if o.Chunk[i] != nil {
			if err := o.Chunk[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + "chunk" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RoomsItems0Messages) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("messages"+"."+"end", "body", o.End); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0Messages) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("messages"+"."+"start", "body", o.Start); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0Messages) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0Messages) UnmarshalBinary(b []byte) error {
	var res RoomsItems0Messages
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0MessagesChunkItems0 RoomEvent
swagger:model RoomsItems0MessagesChunkItems0
*/
type RoomsItems0MessagesChunkItems0 struct {
	RoomsItems0MessagesChunkItems0AllOf0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0MessagesChunkItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RoomsItems0MessagesChunkItems0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.RoomsItems0MessagesChunkItems0AllOf0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0MessagesChunkItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.RoomsItems0MessagesChunkItems0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 messages chunk items0
func (o *RoomsItems0MessagesChunkItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RoomsItems0MessagesChunkItems0AllOf0
	if err := o.RoomsItems0MessagesChunkItems0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0MessagesChunkItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0MessagesChunkItems0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0MessagesChunkItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0MessagesChunkItems0AllOf0 Room Event
//
// Room Events have the following fields.
swagger:model RoomsItems0MessagesChunkItems0AllOf0
*/
type RoomsItems0MessagesChunkItems0AllOf0 struct {
	RoomsItems0MessagesChunkItems0AllOf0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0MessagesChunkItems0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RoomsItems0MessagesChunkItems0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.RoomsItems0MessagesChunkItems0AllOf0AllOf0 = aO0

	// now for regular properties
	var propsRoomsItems0MessagesChunkItems0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsRoomsItems0MessagesChunkItems0AllOf0); err != nil {
		return err
	}
	o.RoomID = propsRoomsItems0MessagesChunkItems0AllOf0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0MessagesChunkItems0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.RoomsItems0MessagesChunkItems0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRoomsItems0MessagesChunkItems0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	propsRoomsItems0MessagesChunkItems0AllOf0.RoomID = o.RoomID

	jsonDataPropsRoomsItems0MessagesChunkItems0AllOf0, errRoomsItems0MessagesChunkItems0AllOf0 := swag.WriteJSON(propsRoomsItems0MessagesChunkItems0AllOf0)
	if errRoomsItems0MessagesChunkItems0AllOf0 != nil {
		return nil, errRoomsItems0MessagesChunkItems0AllOf0
	}
	_parts = append(_parts, jsonDataPropsRoomsItems0MessagesChunkItems0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 messages chunk items0 all of0
func (o *RoomsItems0MessagesChunkItems0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RoomsItems0MessagesChunkItems0AllOf0AllOf0
	if err := o.RoomsItems0MessagesChunkItems0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0MessagesChunkItems0AllOf0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0MessagesChunkItems0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0MessagesChunkItems0AllOf0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0MessagesChunkItems0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0MessagesChunkItems0AllOf0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model RoomsItems0MessagesChunkItems0AllOf0AllOf0
*/
type RoomsItems0MessagesChunkItems0AllOf0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *RoomsItems0MessagesChunkItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsRoomsItems0MessagesChunkItems0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *RoomsItems0MessagesChunkItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsRoomsItems0MessagesChunkItems0AllOf0AllOf0); err != nil {
		return err
	}
	o.EventID = propsRoomsItems0MessagesChunkItems0AllOf0AllOf0.EventID

	o.OriginServerTs = propsRoomsItems0MessagesChunkItems0AllOf0AllOf0.OriginServerTs

	o.Sender = propsRoomsItems0MessagesChunkItems0AllOf0AllOf0.Sender

	o.Unsigned = propsRoomsItems0MessagesChunkItems0AllOf0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0MessagesChunkItems0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsRoomsItems0MessagesChunkItems0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *RoomsItems0MessagesChunkItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsRoomsItems0MessagesChunkItems0AllOf0AllOf0.EventID = o.EventID

	propsRoomsItems0MessagesChunkItems0AllOf0AllOf0.OriginServerTs = o.OriginServerTs

	propsRoomsItems0MessagesChunkItems0AllOf0AllOf0.Sender = o.Sender

	propsRoomsItems0MessagesChunkItems0AllOf0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsRoomsItems0MessagesChunkItems0AllOf0AllOf0, errRoomsItems0MessagesChunkItems0AllOf0AllOf0 := swag.WriteJSON(propsRoomsItems0MessagesChunkItems0AllOf0AllOf0)
	if errRoomsItems0MessagesChunkItems0AllOf0AllOf0 != nil {
		return nil, errRoomsItems0MessagesChunkItems0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsRoomsItems0MessagesChunkItems0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 messages chunk items0 all of0 all of0
func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0MessagesChunkItems0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0MessagesChunkItems0AllOf0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model RoomsItems0MessagesChunkItems0AllOf0AllOf0Unsigned
*/
type RoomsItems0MessagesChunkItems0AllOf0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this rooms items0 messages chunk items0 all of0 all of0 unsigned
func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0MessagesChunkItems0AllOf0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res RoomsItems0MessagesChunkItems0AllOf0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0StateItems0 StateEvent
swagger:model RoomsItems0StateItems0
*/
type RoomsItems0StateItems0 struct {
	RoomsItems0StateItems0AllOf0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0StateItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RoomsItems0StateItems0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.RoomsItems0StateItems0AllOf0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0StateItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.RoomsItems0StateItems0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 state items0
func (o *RoomsItems0StateItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RoomsItems0StateItems0AllOf0
	if err := o.RoomsItems0StateItems0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0StateItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0StateItems0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0StateItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0StateItems0AllOf0 State Event
//
// State Events have the following fields.
swagger:model RoomsItems0StateItems0AllOf0
*/
type RoomsItems0StateItems0AllOf0 struct {
	RoomsItems0StateItems0AllOf0AllOf0

	RoomsItems0StateItems0AllOf0AllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0StateItems0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RoomsItems0StateItems0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.RoomsItems0StateItems0AllOf0AllOf0 = aO0

	// AO1
	var aO1 RoomsItems0StateItems0AllOf0AllOf1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.RoomsItems0StateItems0AllOf0AllOf1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0StateItems0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(o.RoomsItems0StateItems0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(o.RoomsItems0StateItems0AllOf0AllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 state items0 all of0
func (o *RoomsItems0StateItems0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RoomsItems0StateItems0AllOf0AllOf0
	if err := o.RoomsItems0StateItems0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with RoomsItems0StateItems0AllOf0AllOf1
	if err := o.RoomsItems0StateItems0AllOf0AllOf1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0StateItems0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0StateItems0AllOf0AllOf0 Room Event
//
// Room Events have the following fields.
swagger:model RoomsItems0StateItems0AllOf0AllOf0
*/
type RoomsItems0StateItems0AllOf0AllOf0 struct {
	RoomsItems0StateItems0AllOf0AllOf0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0StateItems0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RoomsItems0StateItems0AllOf0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.RoomsItems0StateItems0AllOf0AllOf0AllOf0 = aO0

	// now for regular properties
	var propsRoomsItems0StateItems0AllOf0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsRoomsItems0StateItems0AllOf0AllOf0); err != nil {
		return err
	}
	o.RoomID = propsRoomsItems0StateItems0AllOf0AllOf0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0StateItems0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.RoomsItems0StateItems0AllOf0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRoomsItems0StateItems0AllOf0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	propsRoomsItems0StateItems0AllOf0AllOf0.RoomID = o.RoomID

	jsonDataPropsRoomsItems0StateItems0AllOf0AllOf0, errRoomsItems0StateItems0AllOf0AllOf0 := swag.WriteJSON(propsRoomsItems0StateItems0AllOf0AllOf0)
	if errRoomsItems0StateItems0AllOf0AllOf0 != nil {
		return nil, errRoomsItems0StateItems0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsRoomsItems0StateItems0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 state items0 all of0 all of0
func (o *RoomsItems0StateItems0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RoomsItems0StateItems0AllOf0AllOf0AllOf0
	if err := o.RoomsItems0StateItems0AllOf0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0StateItems0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0StateItems0AllOf0AllOf0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model RoomsItems0StateItems0AllOf0AllOf0AllOf0
*/
type RoomsItems0StateItems0AllOf0AllOf0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *RoomsItems0StateItems0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsRoomsItems0StateItems0AllOf0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *RoomsItems0StateItems0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsRoomsItems0StateItems0AllOf0AllOf0AllOf0); err != nil {
		return err
	}
	o.EventID = propsRoomsItems0StateItems0AllOf0AllOf0AllOf0.EventID

	o.OriginServerTs = propsRoomsItems0StateItems0AllOf0AllOf0AllOf0.OriginServerTs

	o.Sender = propsRoomsItems0StateItems0AllOf0AllOf0AllOf0.Sender

	o.Unsigned = propsRoomsItems0StateItems0AllOf0AllOf0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0StateItems0AllOf0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsRoomsItems0StateItems0AllOf0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *RoomsItems0StateItems0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsRoomsItems0StateItems0AllOf0AllOf0AllOf0.EventID = o.EventID

	propsRoomsItems0StateItems0AllOf0AllOf0AllOf0.OriginServerTs = o.OriginServerTs

	propsRoomsItems0StateItems0AllOf0AllOf0AllOf0.Sender = o.Sender

	propsRoomsItems0StateItems0AllOf0AllOf0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsRoomsItems0StateItems0AllOf0AllOf0AllOf0, errRoomsItems0StateItems0AllOf0AllOf0AllOf0 := swag.WriteJSON(propsRoomsItems0StateItems0AllOf0AllOf0AllOf0)
	if errRoomsItems0StateItems0AllOf0AllOf0AllOf0 != nil {
		return nil, errRoomsItems0StateItems0AllOf0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsRoomsItems0StateItems0AllOf0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 state items0 all of0 all of0 all of0
func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0StateItems0AllOf0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0StateItems0AllOf0AllOf0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model RoomsItems0StateItems0AllOf0AllOf0AllOf0Unsigned
*/
type RoomsItems0StateItems0AllOf0AllOf0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this rooms items0 state items0 all of0 all of0 all of0 unsigned
func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res RoomsItems0StateItems0AllOf0AllOf0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0StateItems0AllOf0AllOf1 State Event
//
// In addition to the Room Event fields, State Events have the following additional fields.
swagger:model RoomsItems0StateItems0AllOf0AllOf1
*/
type RoomsItems0StateItems0AllOf0AllOf1 struct {
	RoomsItems0StateItems0AllOf0AllOf1AllOf0

	// EventContent
	//
	// Optional. The previous ``content`` for this event. If there is no previous content, this key will be missing.
	PrevContent interface{} `json:"prev_content,omitempty"`

	// A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
	// State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
	// Required: true
	StateKey *string `json:"state_key"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0StateItems0AllOf0AllOf1) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 RoomsItems0StateItems0AllOf0AllOf1AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.RoomsItems0StateItems0AllOf0AllOf1AllOf0 = aO0

	// now for regular properties
	var propsRoomsItems0StateItems0AllOf0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	if err := swag.ReadJSON(raw, &propsRoomsItems0StateItems0AllOf0AllOf1); err != nil {
		return err
	}
	o.PrevContent = propsRoomsItems0StateItems0AllOf0AllOf1.PrevContent

	o.StateKey = propsRoomsItems0StateItems0AllOf0AllOf1.StateKey

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0StateItems0AllOf0AllOf1) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.RoomsItems0StateItems0AllOf0AllOf1AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsRoomsItems0StateItems0AllOf0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	propsRoomsItems0StateItems0AllOf0AllOf1.PrevContent = o.PrevContent

	propsRoomsItems0StateItems0AllOf0AllOf1.StateKey = o.StateKey

	jsonDataPropsRoomsItems0StateItems0AllOf0AllOf1, errRoomsItems0StateItems0AllOf0AllOf1 := swag.WriteJSON(propsRoomsItems0StateItems0AllOf0AllOf1)
	if errRoomsItems0StateItems0AllOf0AllOf1 != nil {
		return nil, errRoomsItems0StateItems0AllOf0AllOf1
	}
	_parts = append(_parts, jsonDataPropsRoomsItems0StateItems0AllOf0AllOf1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 state items0 all of0 all of1
func (o *RoomsItems0StateItems0AllOf0AllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with RoomsItems0StateItems0AllOf0AllOf1AllOf0
	if err := o.RoomsItems0StateItems0AllOf0AllOf1AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf1) validateStateKey(formats strfmt.Registry) error {

	if err := validate.Required("state_key", "body", o.StateKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf1) UnmarshalBinary(b []byte) error {
	var res RoomsItems0StateItems0AllOf0AllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0StateItems0AllOf0AllOf1AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model RoomsItems0StateItems0AllOf0AllOf1AllOf0
*/
type RoomsItems0StateItems0AllOf0AllOf1AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *RoomsItems0StateItems0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsRoomsItems0StateItems0AllOf0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *RoomsItems0StateItems0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsRoomsItems0StateItems0AllOf0AllOf1AllOf0); err != nil {
		return err
	}
	o.EventID = propsRoomsItems0StateItems0AllOf0AllOf1AllOf0.EventID

	o.OriginServerTs = propsRoomsItems0StateItems0AllOf0AllOf1AllOf0.OriginServerTs

	o.Sender = propsRoomsItems0StateItems0AllOf0AllOf1AllOf0.Sender

	o.Unsigned = propsRoomsItems0StateItems0AllOf0AllOf1AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoomsItems0StateItems0AllOf0AllOf1AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsRoomsItems0StateItems0AllOf0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *RoomsItems0StateItems0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsRoomsItems0StateItems0AllOf0AllOf1AllOf0.EventID = o.EventID

	propsRoomsItems0StateItems0AllOf0AllOf1AllOf0.OriginServerTs = o.OriginServerTs

	propsRoomsItems0StateItems0AllOf0AllOf1AllOf0.Sender = o.Sender

	propsRoomsItems0StateItems0AllOf0AllOf1AllOf0.Unsigned = o.Unsigned

	jsonDataPropsRoomsItems0StateItems0AllOf0AllOf1AllOf0, errRoomsItems0StateItems0AllOf0AllOf1AllOf0 := swag.WriteJSON(propsRoomsItems0StateItems0AllOf0AllOf1AllOf0)
	if errRoomsItems0StateItems0AllOf0AllOf1AllOf0 != nil {
		return nil, errRoomsItems0StateItems0AllOf0AllOf1AllOf0
	}
	_parts = append(_parts, jsonDataPropsRoomsItems0StateItems0AllOf0AllOf1AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this rooms items0 state items0 all of0 all of1 all of0
func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0) UnmarshalBinary(b []byte) error {
	var res RoomsItems0StateItems0AllOf0AllOf1AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RoomsItems0StateItems0AllOf0AllOf1AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model RoomsItems0StateItems0AllOf0AllOf1AllOf0Unsigned
*/
type RoomsItems0StateItems0AllOf0AllOf1AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this rooms items0 state items0 all of0 all of1 all of0 unsigned
func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoomsItems0StateItems0AllOf0AllOf1AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res RoomsItems0StateItems0AllOf0AllOf1AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
