// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRoomStateWithKeyParams creates a new GetRoomStateWithKeyParams object
// with the default values initialized.
func NewGetRoomStateWithKeyParams() *GetRoomStateWithKeyParams {
	var ()
	return &GetRoomStateWithKeyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRoomStateWithKeyParamsWithTimeout creates a new GetRoomStateWithKeyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRoomStateWithKeyParamsWithTimeout(timeout time.Duration) *GetRoomStateWithKeyParams {
	var ()
	return &GetRoomStateWithKeyParams{

		timeout: timeout,
	}
}

// NewGetRoomStateWithKeyParamsWithContext creates a new GetRoomStateWithKeyParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRoomStateWithKeyParamsWithContext(ctx context.Context) *GetRoomStateWithKeyParams {
	var ()
	return &GetRoomStateWithKeyParams{

		Context: ctx,
	}
}

// NewGetRoomStateWithKeyParamsWithHTTPClient creates a new GetRoomStateWithKeyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRoomStateWithKeyParamsWithHTTPClient(client *http.Client) *GetRoomStateWithKeyParams {
	var ()
	return &GetRoomStateWithKeyParams{
		HTTPClient: client,
	}
}

/*GetRoomStateWithKeyParams contains all the parameters to send to the API endpoint
for the get room state with key operation typically these are written to a http.Request
*/
type GetRoomStateWithKeyParams struct {

	/*EventType
	  The type of state to look up.

	*/
	EventType string
	/*RoomID
	  The room to look up the state in.

	*/
	RoomID string
	/*StateKey
	  The key of the state to look up. Defaults to an empty string. When
	an empty string, the trailing slash on this endpoint is optional.

	*/
	StateKey string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get room state with key params
func (o *GetRoomStateWithKeyParams) WithTimeout(timeout time.Duration) *GetRoomStateWithKeyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get room state with key params
func (o *GetRoomStateWithKeyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get room state with key params
func (o *GetRoomStateWithKeyParams) WithContext(ctx context.Context) *GetRoomStateWithKeyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get room state with key params
func (o *GetRoomStateWithKeyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get room state with key params
func (o *GetRoomStateWithKeyParams) WithHTTPClient(client *http.Client) *GetRoomStateWithKeyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get room state with key params
func (o *GetRoomStateWithKeyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEventType adds the eventType to the get room state with key params
func (o *GetRoomStateWithKeyParams) WithEventType(eventType string) *GetRoomStateWithKeyParams {
	o.SetEventType(eventType)
	return o
}

// SetEventType adds the eventType to the get room state with key params
func (o *GetRoomStateWithKeyParams) SetEventType(eventType string) {
	o.EventType = eventType
}

// WithRoomID adds the roomID to the get room state with key params
func (o *GetRoomStateWithKeyParams) WithRoomID(roomID string) *GetRoomStateWithKeyParams {
	o.SetRoomID(roomID)
	return o
}

// SetRoomID adds the roomId to the get room state with key params
func (o *GetRoomStateWithKeyParams) SetRoomID(roomID string) {
	o.RoomID = roomID
}

// WithStateKey adds the stateKey to the get room state with key params
func (o *GetRoomStateWithKeyParams) WithStateKey(stateKey string) *GetRoomStateWithKeyParams {
	o.SetStateKey(stateKey)
	return o
}

// SetStateKey adds the stateKey to the get room state with key params
func (o *GetRoomStateWithKeyParams) SetStateKey(stateKey string) {
	o.StateKey = stateKey
}

// WriteToRequest writes these params to a swagger request
func (o *GetRoomStateWithKeyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param eventType
	if err := r.SetPathParam("eventType", o.EventType); err != nil {
		return err
	}

	// path param roomId
	if err := r.SetPathParam("roomId", o.RoomID); err != nil {
		return err
	}

	// path param stateKey
	if err := r.SetPathParam("stateKey", o.StateKey); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
