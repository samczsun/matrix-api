// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetEventContextReader is a Reader for the GetEventContext structure.
type GetEventContextReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventContextReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventContextOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetEventContextOK creates a GetEventContextOK with default headers values
func NewGetEventContextOK() *GetEventContextOK {
	return &GetEventContextOK{}
}

/*GetEventContextOK handles this case with default header values.

The events and state surrounding the requested event.
*/
type GetEventContextOK struct {
	Payload *GetEventContextOKBody
}

func (o *GetEventContextOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/rooms/{roomId}/context/{eventId}][%d] getEventContextOK  %+v", 200, o.Payload)
}

func (o *GetEventContextOK) GetPayload() *GetEventContextOKBody {
	return o.Payload
}

func (o *GetEventContextOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetEventContextOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*EventAllOf0 Room Event
//
// Room Events have the following fields.
swagger:model EventAllOf0
*/
type EventAllOf0 struct {
	EventAllOf0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventAllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EventAllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.EventAllOf0AllOf0 = aO0

	// now for regular properties
	var propsEventAllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsEventAllOf0); err != nil {
		return err
	}
	o.RoomID = propsEventAllOf0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventAllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.EventAllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsEventAllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	propsEventAllOf0.RoomID = o.RoomID

	jsonDataPropsEventAllOf0, errEventAllOf0 := swag.WriteJSON(propsEventAllOf0)
	if errEventAllOf0 != nil {
		return nil, errEventAllOf0
	}
	_parts = append(_parts, jsonDataPropsEventAllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event all of0
func (o *EventAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventAllOf0AllOf0
	if err := o.EventAllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EventAllOf0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EventAllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventAllOf0) UnmarshalBinary(b []byte) error {
	var res EventAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EventAllOf0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model EventAllOf0AllOf0
*/
type EventAllOf0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *EventAllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventAllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsEventAllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *EventAllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsEventAllOf0AllOf0); err != nil {
		return err
	}
	o.EventID = propsEventAllOf0AllOf0.EventID

	o.OriginServerTs = propsEventAllOf0AllOf0.OriginServerTs

	o.Sender = propsEventAllOf0AllOf0.Sender

	o.Unsigned = propsEventAllOf0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventAllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsEventAllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *EventAllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsEventAllOf0AllOf0.EventID = o.EventID

	propsEventAllOf0AllOf0.OriginServerTs = o.OriginServerTs

	propsEventAllOf0AllOf0.Sender = o.Sender

	propsEventAllOf0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsEventAllOf0AllOf0, errEventAllOf0AllOf0 := swag.WriteJSON(propsEventAllOf0AllOf0)
	if errEventAllOf0AllOf0 != nil {
		return nil, errEventAllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsEventAllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event all of0 all of0
func (o *EventAllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EventAllOf0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *EventAllOf0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *EventAllOf0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *EventAllOf0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *EventAllOf0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *EventAllOf0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EventAllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventAllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res EventAllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EventAllOf0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model EventAllOf0AllOf0Unsigned
*/
type EventAllOf0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this event all of0 all of0 unsigned
func (o *EventAllOf0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *EventAllOf0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventAllOf0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res EventAllOf0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EventsAfterItems0 events after items0
swagger:model EventsAfterItems0
*/
type EventsAfterItems0 struct {
	EventsAfterItems0AllOf0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventsAfterItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EventsAfterItems0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.EventsAfterItems0AllOf0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventsAfterItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.EventsAfterItems0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this events after items0
func (o *EventsAfterItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventsAfterItems0AllOf0
	if err := o.EventsAfterItems0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EventsAfterItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventsAfterItems0) UnmarshalBinary(b []byte) error {
	var res EventsAfterItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EventsAfterItems0AllOf0 Room Event
//
// Room Events have the following fields.
swagger:model EventsAfterItems0AllOf0
*/
type EventsAfterItems0AllOf0 struct {
	EventsAfterItems0AllOf0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventsAfterItems0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EventsAfterItems0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.EventsAfterItems0AllOf0AllOf0 = aO0

	// now for regular properties
	var propsEventsAfterItems0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsEventsAfterItems0AllOf0); err != nil {
		return err
	}
	o.RoomID = propsEventsAfterItems0AllOf0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventsAfterItems0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.EventsAfterItems0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsEventsAfterItems0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	propsEventsAfterItems0AllOf0.RoomID = o.RoomID

	jsonDataPropsEventsAfterItems0AllOf0, errEventsAfterItems0AllOf0 := swag.WriteJSON(propsEventsAfterItems0AllOf0)
	if errEventsAfterItems0AllOf0 != nil {
		return nil, errEventsAfterItems0AllOf0
	}
	_parts = append(_parts, jsonDataPropsEventsAfterItems0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this events after items0 all of0
func (o *EventsAfterItems0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventsAfterItems0AllOf0AllOf0
	if err := o.EventsAfterItems0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EventsAfterItems0AllOf0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EventsAfterItems0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventsAfterItems0AllOf0) UnmarshalBinary(b []byte) error {
	var res EventsAfterItems0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EventsAfterItems0AllOf0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model EventsAfterItems0AllOf0AllOf0
*/
type EventsAfterItems0AllOf0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *EventsAfterItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventsAfterItems0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsEventsAfterItems0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *EventsAfterItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsEventsAfterItems0AllOf0AllOf0); err != nil {
		return err
	}
	o.EventID = propsEventsAfterItems0AllOf0AllOf0.EventID

	o.OriginServerTs = propsEventsAfterItems0AllOf0AllOf0.OriginServerTs

	o.Sender = propsEventsAfterItems0AllOf0AllOf0.Sender

	o.Unsigned = propsEventsAfterItems0AllOf0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventsAfterItems0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsEventsAfterItems0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *EventsAfterItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsEventsAfterItems0AllOf0AllOf0.EventID = o.EventID

	propsEventsAfterItems0AllOf0AllOf0.OriginServerTs = o.OriginServerTs

	propsEventsAfterItems0AllOf0AllOf0.Sender = o.Sender

	propsEventsAfterItems0AllOf0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsEventsAfterItems0AllOf0AllOf0, errEventsAfterItems0AllOf0AllOf0 := swag.WriteJSON(propsEventsAfterItems0AllOf0AllOf0)
	if errEventsAfterItems0AllOf0AllOf0 != nil {
		return nil, errEventsAfterItems0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsEventsAfterItems0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this events after items0 all of0 all of0
func (o *EventsAfterItems0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EventsAfterItems0AllOf0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *EventsAfterItems0AllOf0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *EventsAfterItems0AllOf0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *EventsAfterItems0AllOf0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *EventsAfterItems0AllOf0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *EventsAfterItems0AllOf0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EventsAfterItems0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventsAfterItems0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res EventsAfterItems0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EventsAfterItems0AllOf0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model EventsAfterItems0AllOf0AllOf0Unsigned
*/
type EventsAfterItems0AllOf0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this events after items0 all of0 all of0 unsigned
func (o *EventsAfterItems0AllOf0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *EventsAfterItems0AllOf0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventsAfterItems0AllOf0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res EventsAfterItems0AllOf0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EventsBeforeItems0 events before items0
swagger:model EventsBeforeItems0
*/
type EventsBeforeItems0 struct {
	EventsBeforeItems0AllOf0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventsBeforeItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EventsBeforeItems0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.EventsBeforeItems0AllOf0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventsBeforeItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.EventsBeforeItems0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this events before items0
func (o *EventsBeforeItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventsBeforeItems0AllOf0
	if err := o.EventsBeforeItems0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EventsBeforeItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventsBeforeItems0) UnmarshalBinary(b []byte) error {
	var res EventsBeforeItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EventsBeforeItems0AllOf0 Room Event
//
// Room Events have the following fields.
swagger:model EventsBeforeItems0AllOf0
*/
type EventsBeforeItems0AllOf0 struct {
	EventsBeforeItems0AllOf0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventsBeforeItems0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EventsBeforeItems0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.EventsBeforeItems0AllOf0AllOf0 = aO0

	// now for regular properties
	var propsEventsBeforeItems0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsEventsBeforeItems0AllOf0); err != nil {
		return err
	}
	o.RoomID = propsEventsBeforeItems0AllOf0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventsBeforeItems0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.EventsBeforeItems0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsEventsBeforeItems0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	propsEventsBeforeItems0AllOf0.RoomID = o.RoomID

	jsonDataPropsEventsBeforeItems0AllOf0, errEventsBeforeItems0AllOf0 := swag.WriteJSON(propsEventsBeforeItems0AllOf0)
	if errEventsBeforeItems0AllOf0 != nil {
		return nil, errEventsBeforeItems0AllOf0
	}
	_parts = append(_parts, jsonDataPropsEventsBeforeItems0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this events before items0 all of0
func (o *EventsBeforeItems0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventsBeforeItems0AllOf0AllOf0
	if err := o.EventsBeforeItems0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EventsBeforeItems0AllOf0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EventsBeforeItems0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventsBeforeItems0AllOf0) UnmarshalBinary(b []byte) error {
	var res EventsBeforeItems0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EventsBeforeItems0AllOf0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model EventsBeforeItems0AllOf0AllOf0
*/
type EventsBeforeItems0AllOf0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *EventsBeforeItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventsBeforeItems0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsEventsBeforeItems0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *EventsBeforeItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsEventsBeforeItems0AllOf0AllOf0); err != nil {
		return err
	}
	o.EventID = propsEventsBeforeItems0AllOf0AllOf0.EventID

	o.OriginServerTs = propsEventsBeforeItems0AllOf0AllOf0.OriginServerTs

	o.Sender = propsEventsBeforeItems0AllOf0AllOf0.Sender

	o.Unsigned = propsEventsBeforeItems0AllOf0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventsBeforeItems0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsEventsBeforeItems0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *EventsBeforeItems0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsEventsBeforeItems0AllOf0AllOf0.EventID = o.EventID

	propsEventsBeforeItems0AllOf0AllOf0.OriginServerTs = o.OriginServerTs

	propsEventsBeforeItems0AllOf0AllOf0.Sender = o.Sender

	propsEventsBeforeItems0AllOf0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsEventsBeforeItems0AllOf0AllOf0, errEventsBeforeItems0AllOf0AllOf0 := swag.WriteJSON(propsEventsBeforeItems0AllOf0AllOf0)
	if errEventsBeforeItems0AllOf0AllOf0 != nil {
		return nil, errEventsBeforeItems0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsEventsBeforeItems0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this events before items0 all of0 all of0
func (o *EventsBeforeItems0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EventsBeforeItems0AllOf0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *EventsBeforeItems0AllOf0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *EventsBeforeItems0AllOf0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *EventsBeforeItems0AllOf0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *EventsBeforeItems0AllOf0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *EventsBeforeItems0AllOf0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *EventsBeforeItems0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventsBeforeItems0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res EventsBeforeItems0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*EventsBeforeItems0AllOf0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model EventsBeforeItems0AllOf0AllOf0Unsigned
*/
type EventsBeforeItems0AllOf0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this events before items0 all of0 all of0 unsigned
func (o *EventsBeforeItems0AllOf0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *EventsBeforeItems0AllOf0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventsBeforeItems0AllOf0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res EventsBeforeItems0AllOf0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetEventContextOKBody The events and state surrounding the requested event.
swagger:model GetEventContextOKBody
*/
type GetEventContextOKBody struct {

	// A token that can be used to paginate forwards with.
	End string `json:"end,omitempty"`

	// Details of the requested event.
	Event struct {
		EventAllOf0
	} `json:"event,omitempty"`

	// A list of room events that happened just after the
	// requested event, in chronological order.
	EventsAfter []*EventsAfterItems0 `json:"events_after"`

	// A list of room events that happened just before the
	// requested event, in reverse-chronological order.
	EventsBefore []*EventsBeforeItems0 `json:"events_before"`

	// A token that can be used to paginate backwards with.
	Start string `json:"start,omitempty"`

	// The state of the room at the last event returned.
	State []*StateItems0 `json:"state"`
}

// Validate validates this get event context o k body
func (o *GetEventContextOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventsAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventsBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEventContextOKBody) validateEvent(formats strfmt.Registry) error {

	if swag.IsZero(o.Event) { // not required
		return nil
	}

	return nil
}

func (o *GetEventContextOKBody) validateEventsAfter(formats strfmt.Registry) error {

	if swag.IsZero(o.EventsAfter) { // not required
		return nil
	}

	for i := 0; i < len(o.EventsAfter); i++ {
		if swag.IsZero(o.EventsAfter[i]) { // not required
			continue
		}

		if o.EventsAfter[i] != nil {
			if err := o.EventsAfter[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEventContextOK" + "." + "events_after" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetEventContextOKBody) validateEventsBefore(formats strfmt.Registry) error {

	if swag.IsZero(o.EventsBefore) { // not required
		return nil
	}

	for i := 0; i < len(o.EventsBefore); i++ {
		if swag.IsZero(o.EventsBefore[i]) { // not required
			continue
		}

		if o.EventsBefore[i] != nil {
			if err := o.EventsBefore[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEventContextOK" + "." + "events_before" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetEventContextOKBody) validateState(formats strfmt.Registry) error {

	if swag.IsZero(o.State) { // not required
		return nil
	}

	for i := 0; i < len(o.State); i++ {
		if swag.IsZero(o.State[i]) { // not required
			continue
		}

		if o.State[i] != nil {
			if err := o.State[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEventContextOK" + "." + "state" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEventContextOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventContextOKBody) UnmarshalBinary(b []byte) error {
	var res GetEventContextOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0 state items0
swagger:model StateItems0
*/
type StateItems0 struct {
	StateItems0AllOf0
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *StateItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StateItems0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.StateItems0AllOf0 = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o StateItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.StateItems0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this state items0
func (o *StateItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StateItems0AllOf0
	if err := o.StateItems0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0) UnmarshalBinary(b []byte) error {
	var res StateItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0AllOf0 State Event
//
// State Events have the following fields.
swagger:model StateItems0AllOf0
*/
type StateItems0AllOf0 struct {
	StateItems0AllOf0AllOf0

	StateItems0AllOf0AllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *StateItems0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StateItems0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.StateItems0AllOf0AllOf0 = aO0

	// AO1
	var aO1 StateItems0AllOf0AllOf1
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.StateItems0AllOf0AllOf1 = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o StateItems0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(o.StateItems0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(o.StateItems0AllOf0AllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this state items0 all of0
func (o *StateItems0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StateItems0AllOf0AllOf0
	if err := o.StateItems0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with StateItems0AllOf0AllOf1
	if err := o.StateItems0AllOf0AllOf1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0AllOf0) UnmarshalBinary(b []byte) error {
	var res StateItems0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0AllOf0AllOf0 Room Event
//
// Room Events have the following fields.
swagger:model StateItems0AllOf0AllOf0
*/
type StateItems0AllOf0AllOf0 struct {
	StateItems0AllOf0AllOf0AllOf0

	// The ID of the room associated with this event. Will not be present on events
	// that arrive through ``/sync``, despite being required everywhere else.
	// Required: true
	RoomID *string `json:"room_id"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *StateItems0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StateItems0AllOf0AllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.StateItems0AllOf0AllOf0AllOf0 = aO0

	// now for regular properties
	var propsStateItems0AllOf0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	if err := swag.ReadJSON(raw, &propsStateItems0AllOf0AllOf0); err != nil {
		return err
	}
	o.RoomID = propsStateItems0AllOf0AllOf0.RoomID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o StateItems0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.StateItems0AllOf0AllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsStateItems0AllOf0AllOf0 struct {
		RoomID *string `json:"room_id"`
	}
	propsStateItems0AllOf0AllOf0.RoomID = o.RoomID

	jsonDataPropsStateItems0AllOf0AllOf0, errStateItems0AllOf0AllOf0 := swag.WriteJSON(propsStateItems0AllOf0AllOf0)
	if errStateItems0AllOf0AllOf0 != nil {
		return nil, errStateItems0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsStateItems0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this state items0 all of0 all of0
func (o *StateItems0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StateItems0AllOf0AllOf0AllOf0
	if err := o.StateItems0AllOf0AllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRoomID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StateItems0AllOf0AllOf0) validateRoomID(formats strfmt.Registry) error {

	if err := validate.Required("room_id", "body", o.RoomID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res StateItems0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0AllOf0AllOf0AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model StateItems0AllOf0AllOf0AllOf0
*/
type StateItems0AllOf0AllOf0AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *StateItems0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *StateItems0AllOf0AllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsStateItems0AllOf0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *StateItems0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsStateItems0AllOf0AllOf0AllOf0); err != nil {
		return err
	}
	o.EventID = propsStateItems0AllOf0AllOf0AllOf0.EventID

	o.OriginServerTs = propsStateItems0AllOf0AllOf0AllOf0.OriginServerTs

	o.Sender = propsStateItems0AllOf0AllOf0AllOf0.Sender

	o.Unsigned = propsStateItems0AllOf0AllOf0AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o StateItems0AllOf0AllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsStateItems0AllOf0AllOf0AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *StateItems0AllOf0AllOf0AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsStateItems0AllOf0AllOf0AllOf0.EventID = o.EventID

	propsStateItems0AllOf0AllOf0AllOf0.OriginServerTs = o.OriginServerTs

	propsStateItems0AllOf0AllOf0AllOf0.Sender = o.Sender

	propsStateItems0AllOf0AllOf0AllOf0.Unsigned = o.Unsigned

	jsonDataPropsStateItems0AllOf0AllOf0AllOf0, errStateItems0AllOf0AllOf0AllOf0 := swag.WriteJSON(propsStateItems0AllOf0AllOf0AllOf0)
	if errStateItems0AllOf0AllOf0AllOf0 != nil {
		return nil, errStateItems0AllOf0AllOf0AllOf0
	}
	_parts = append(_parts, jsonDataPropsStateItems0AllOf0AllOf0AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this state items0 all of0 all of0 all of0
func (o *StateItems0AllOf0AllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StateItems0AllOf0AllOf0AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf0AllOf0AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf0AllOf0AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf0AllOf0AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *StateItems0AllOf0AllOf0AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf0AllOf0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res StateItems0AllOf0AllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0AllOf0AllOf0AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model StateItems0AllOf0AllOf0AllOf0Unsigned
*/
type StateItems0AllOf0AllOf0AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this state items0 all of0 all of0 all of0 unsigned
func (o *StateItems0AllOf0AllOf0AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf0AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf0AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res StateItems0AllOf0AllOf0AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0AllOf0AllOf1 State Event
//
// In addition to the Room Event fields, State Events have the following additional fields.
swagger:model StateItems0AllOf0AllOf1
*/
type StateItems0AllOf0AllOf1 struct {
	StateItems0AllOf0AllOf1AllOf0

	// EventContent
	//
	// Optional. The previous ``content`` for this event. If there is no previous content, this key will be missing.
	PrevContent interface{} `json:"prev_content,omitempty"`

	// A unique key which defines the overwriting semantics for this piece of room state. This value is often a zero-length string. The presence of this key makes this event a State Event.
	// State keys starting with an ``@`` are reserved for referencing user IDs, such as room members. With the exception of a few events, state events set with a given user's ID as the state key MUST only be set by that user.
	// Required: true
	StateKey *string `json:"state_key"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *StateItems0AllOf0AllOf1) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StateItems0AllOf0AllOf1AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.StateItems0AllOf0AllOf1AllOf0 = aO0

	// now for regular properties
	var propsStateItems0AllOf0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	if err := swag.ReadJSON(raw, &propsStateItems0AllOf0AllOf1); err != nil {
		return err
	}
	o.PrevContent = propsStateItems0AllOf0AllOf1.PrevContent

	o.StateKey = propsStateItems0AllOf0AllOf1.StateKey

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o StateItems0AllOf0AllOf1) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.StateItems0AllOf0AllOf1AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsStateItems0AllOf0AllOf1 struct {
		PrevContent interface{} `json:"prev_content,omitempty"`

		StateKey *string `json:"state_key"`
	}
	propsStateItems0AllOf0AllOf1.PrevContent = o.PrevContent

	propsStateItems0AllOf0AllOf1.StateKey = o.StateKey

	jsonDataPropsStateItems0AllOf0AllOf1, errStateItems0AllOf0AllOf1 := swag.WriteJSON(propsStateItems0AllOf0AllOf1)
	if errStateItems0AllOf0AllOf1 != nil {
		return nil, errStateItems0AllOf0AllOf1
	}
	_parts = append(_parts, jsonDataPropsStateItems0AllOf0AllOf1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this state items0 all of0 all of1
func (o *StateItems0AllOf0AllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StateItems0AllOf0AllOf1AllOf0
	if err := o.StateItems0AllOf0AllOf1AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStateKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StateItems0AllOf0AllOf1) validateStateKey(formats strfmt.Registry) error {

	if err := validate.Required("state_key", "body", o.StateKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf1) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf1) UnmarshalBinary(b []byte) error {
	var res StateItems0AllOf0AllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0AllOf0AllOf1AllOf0 Room Event
//
// In addition to the Event fields, Room Events have the following additional fields.
swagger:model StateItems0AllOf0AllOf1AllOf0
*/
type StateItems0AllOf0AllOf1AllOf0 struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`

	// The globally unique event identifier.
	// Required: true
	EventID *string `json:"event_id"`

	// Timestamp in milliseconds on originating homeserver when this event was sent.
	// Required: true
	OriginServerTs *int64 `json:"origin_server_ts"`

	// Contains the fully-qualified ID of the user who sent this event.
	// Required: true
	Sender *string `json:"sender"`

	// unsigned
	Unsigned *StateItems0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *StateItems0AllOf0AllOf1AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Content = dataAO0.Content

	o.Type = dataAO0.Type

	// now for regular properties
	var propsStateItems0AllOf0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *StateItems0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsStateItems0AllOf0AllOf1AllOf0); err != nil {
		return err
	}
	o.EventID = propsStateItems0AllOf0AllOf1AllOf0.EventID

	o.OriginServerTs = propsStateItems0AllOf0AllOf1AllOf0.OriginServerTs

	o.Sender = propsStateItems0AllOf0AllOf1AllOf0.Sender

	o.Unsigned = propsStateItems0AllOf0AllOf1AllOf0.Unsigned

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o StateItems0AllOf0AllOf1AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataAO0.Content = o.Content

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	// now for regular properties
	var propsStateItems0AllOf0AllOf1AllOf0 struct {
		EventID *string `json:"event_id"`

		OriginServerTs *int64 `json:"origin_server_ts"`

		Sender *string `json:"sender"`

		Unsigned *StateItems0AllOf0AllOf1AllOf0Unsigned `json:"unsigned,omitempty"`
	}
	propsStateItems0AllOf0AllOf1AllOf0.EventID = o.EventID

	propsStateItems0AllOf0AllOf1AllOf0.OriginServerTs = o.OriginServerTs

	propsStateItems0AllOf0AllOf1AllOf0.Sender = o.Sender

	propsStateItems0AllOf0AllOf1AllOf0.Unsigned = o.Unsigned

	jsonDataPropsStateItems0AllOf0AllOf1AllOf0, errStateItems0AllOf0AllOf1AllOf0 := swag.WriteJSON(propsStateItems0AllOf0AllOf1AllOf0)
	if errStateItems0AllOf0AllOf1AllOf0 != nil {
		return nil, errStateItems0AllOf0AllOf1AllOf0
	}
	_parts = append(_parts, jsonDataPropsStateItems0AllOf0AllOf1AllOf0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this state items0 all of0 all of1 all of0
func (o *StateItems0AllOf0AllOf1AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEventID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOriginServerTs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUnsigned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StateItems0AllOf0AllOf1AllOf0) validateEventID(formats strfmt.Registry) error {

	if err := validate.Required("event_id", "body", o.EventID); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf0AllOf1AllOf0) validateOriginServerTs(formats strfmt.Registry) error {

	if err := validate.Required("origin_server_ts", "body", o.OriginServerTs); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf0AllOf1AllOf0) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", o.Sender); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf0AllOf1AllOf0) validateUnsigned(formats strfmt.Registry) error {

	if swag.IsZero(o.Unsigned) { // not required
		return nil
	}

	if o.Unsigned != nil {
		if err := o.Unsigned.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unsigned")
			}
			return err
		}
	}

	return nil
}

func (o *StateItems0AllOf0AllOf1AllOf0) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *StateItems0AllOf0AllOf1AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf1AllOf0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf1AllOf0) UnmarshalBinary(b []byte) error {
	var res StateItems0AllOf0AllOf1AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StateItems0AllOf0AllOf1AllOf0Unsigned UnsignedData
//
// Contains optional extra information about the event.
swagger:model StateItems0AllOf0AllOf1AllOf0Unsigned
*/
type StateItems0AllOf0AllOf1AllOf0Unsigned struct {

	// The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
	Age int64 `json:"age,omitempty"`

	// Event
	//
	// Optional. The event that redacted this event, if any.
	RedactedBecause interface{} `json:"redacted_because,omitempty"`

	// The client-supplied transaction ID, if the client being given the event is the same one which sent it.
	TransactionID string `json:"transaction_id,omitempty"`
}

// Validate validates this state items0 all of0 all of1 all of0 unsigned
func (o *StateItems0AllOf0AllOf1AllOf0Unsigned) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf1AllOf0Unsigned) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StateItems0AllOf0AllOf1AllOf0Unsigned) UnmarshalBinary(b []byte) error {
	var res StateItems0AllOf0AllOf1AllOf0Unsigned
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
