// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetOneEventReader is a Reader for the GetOneEvent structure.
type GetOneEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOneEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOneEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetOneEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOneEventOK creates a GetOneEventOK with default headers values
func NewGetOneEventOK() *GetOneEventOK {
	return &GetOneEventOK{}
}

/*GetOneEventOK handles this case with default header values.

The full event.
*/
type GetOneEventOK struct {
	Payload *GetOneEventOKBody
}

func (o *GetOneEventOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/events/{eventId}][%d] getOneEventOK  %+v", 200, o.Payload)
}

func (o *GetOneEventOK) GetPayload() *GetOneEventOKBody {
	return o.Payload
}

func (o *GetOneEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetOneEventOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOneEventNotFound creates a GetOneEventNotFound with default headers values
func NewGetOneEventNotFound() *GetOneEventNotFound {
	return &GetOneEventNotFound{}
}

/*GetOneEventNotFound handles this case with default header values.

The event was not found or you do not have permission to read this event.
*/
type GetOneEventNotFound struct {
}

func (o *GetOneEventNotFound) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/events/{eventId}][%d] getOneEventNotFound ", 404)
}

func (o *GetOneEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*GetOneEventOKBody get one event o k body
swagger:model GetOneEventOKBody
*/
type GetOneEventOKBody struct {

	// The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
	// Required: true
	Content interface{} `json:"content"`

	// The type of event. This SHOULD be namespaced similar to Java package naming conventions e.g. 'com.example.subdomain.event.type'
	// Required: true
	Type *string `json:"type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetOneEventOKBody) UnmarshalJSON(raw []byte) error {
	// GetOneEventOKBodyAO0
	var dataGetOneEventOKBodyAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataGetOneEventOKBodyAO0); err != nil {
		return err
	}

	o.Content = dataGetOneEventOKBodyAO0.Content

	o.Type = dataGetOneEventOKBodyAO0.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetOneEventOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataGetOneEventOKBodyAO0 struct {
		Content interface{} `json:"content"`

		Type *string `json:"type"`
	}

	dataGetOneEventOKBodyAO0.Content = o.Content

	dataGetOneEventOKBodyAO0.Type = o.Type

	jsonDataGetOneEventOKBodyAO0, errGetOneEventOKBodyAO0 := swag.WriteJSON(dataGetOneEventOKBodyAO0)
	if errGetOneEventOKBodyAO0 != nil {
		return nil, errGetOneEventOKBodyAO0
	}
	_parts = append(_parts, jsonDataGetOneEventOKBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get one event o k body
func (o *GetOneEventOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetOneEventOKBody) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("getOneEventOK"+"."+"content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *GetOneEventOKBody) validateType(formats strfmt.Registry) error {

	if err := validate.Required("getOneEventOK"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetOneEventOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetOneEventOKBody) UnmarshalBinary(b []byte) error {
	var res GetOneEventOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
