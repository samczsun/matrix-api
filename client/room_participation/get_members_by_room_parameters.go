// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMembersByRoomParams creates a new GetMembersByRoomParams object
// with the default values initialized.
func NewGetMembersByRoomParams() *GetMembersByRoomParams {
	var ()
	return &GetMembersByRoomParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetMembersByRoomParamsWithTimeout creates a new GetMembersByRoomParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetMembersByRoomParamsWithTimeout(timeout time.Duration) *GetMembersByRoomParams {
	var ()
	return &GetMembersByRoomParams{

		timeout: timeout,
	}
}

// NewGetMembersByRoomParamsWithContext creates a new GetMembersByRoomParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetMembersByRoomParamsWithContext(ctx context.Context) *GetMembersByRoomParams {
	var ()
	return &GetMembersByRoomParams{

		Context: ctx,
	}
}

// NewGetMembersByRoomParamsWithHTTPClient creates a new GetMembersByRoomParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetMembersByRoomParamsWithHTTPClient(client *http.Client) *GetMembersByRoomParams {
	var ()
	return &GetMembersByRoomParams{
		HTTPClient: client,
	}
}

/*GetMembersByRoomParams contains all the parameters to send to the API endpoint
for the get members by room operation typically these are written to a http.Request
*/
type GetMembersByRoomParams struct {

	/*At
	  The point in time (pagination token) to return members for in the room.
	This token can be obtained from a ``prev_batch`` token returned for
	each room by the sync API. Defaults to the current state of the room,
	as determined by the server.

	*/
	At *string
	/*Membership
	  The kind of membership to filter for. Defaults to no filtering if
	unspecified. When specified alongside ``not_membership``, the two
	parameters create an 'or' condition: either the membership *is*
	the same as ``membership`` **or** *is not* the same as ``not_membership``.

	*/
	Membership *string
	/*NotMembership
	  The kind of membership to exclude from the results. Defaults to no
	filtering if unspecified.

	*/
	NotMembership *string
	/*RoomID
	  The room to get the member events for.

	*/
	RoomID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get members by room params
func (o *GetMembersByRoomParams) WithTimeout(timeout time.Duration) *GetMembersByRoomParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get members by room params
func (o *GetMembersByRoomParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get members by room params
func (o *GetMembersByRoomParams) WithContext(ctx context.Context) *GetMembersByRoomParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get members by room params
func (o *GetMembersByRoomParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get members by room params
func (o *GetMembersByRoomParams) WithHTTPClient(client *http.Client) *GetMembersByRoomParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get members by room params
func (o *GetMembersByRoomParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAt adds the at to the get members by room params
func (o *GetMembersByRoomParams) WithAt(at *string) *GetMembersByRoomParams {
	o.SetAt(at)
	return o
}

// SetAt adds the at to the get members by room params
func (o *GetMembersByRoomParams) SetAt(at *string) {
	o.At = at
}

// WithMembership adds the membership to the get members by room params
func (o *GetMembersByRoomParams) WithMembership(membership *string) *GetMembersByRoomParams {
	o.SetMembership(membership)
	return o
}

// SetMembership adds the membership to the get members by room params
func (o *GetMembersByRoomParams) SetMembership(membership *string) {
	o.Membership = membership
}

// WithNotMembership adds the notMembership to the get members by room params
func (o *GetMembersByRoomParams) WithNotMembership(notMembership *string) *GetMembersByRoomParams {
	o.SetNotMembership(notMembership)
	return o
}

// SetNotMembership adds the notMembership to the get members by room params
func (o *GetMembersByRoomParams) SetNotMembership(notMembership *string) {
	o.NotMembership = notMembership
}

// WithRoomID adds the roomID to the get members by room params
func (o *GetMembersByRoomParams) WithRoomID(roomID string) *GetMembersByRoomParams {
	o.SetRoomID(roomID)
	return o
}

// SetRoomID adds the roomId to the get members by room params
func (o *GetMembersByRoomParams) SetRoomID(roomID string) {
	o.RoomID = roomID
}

// WriteToRequest writes these params to a swagger request
func (o *GetMembersByRoomParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.At != nil {

		// query param at
		var qrAt string
		if o.At != nil {
			qrAt = *o.At
		}
		qAt := qrAt
		if qAt != "" {
			if err := r.SetQueryParam("at", qAt); err != nil {
				return err
			}
		}

	}

	if o.Membership != nil {

		// query param membership
		var qrMembership string
		if o.Membership != nil {
			qrMembership = *o.Membership
		}
		qMembership := qrMembership
		if qMembership != "" {
			if err := r.SetQueryParam("membership", qMembership); err != nil {
				return err
			}
		}

	}

	if o.NotMembership != nil {

		// query param not_membership
		var qrNotMembership string
		if o.NotMembership != nil {
			qrNotMembership = *o.NotMembership
		}
		qNotMembership := qrNotMembership
		if qNotMembership != "" {
			if err := r.SetQueryParam("not_membership", qNotMembership); err != nil {
				return err
			}
		}

	}

	// path param roomId
	if err := r.SetPathParam("roomId", o.RoomID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
