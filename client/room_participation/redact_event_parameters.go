// Code generated by go-swagger; DO NOT EDIT.

package room_participation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRedactEventParams creates a new RedactEventParams object
// with the default values initialized.
func NewRedactEventParams() *RedactEventParams {
	var ()
	return &RedactEventParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRedactEventParamsWithTimeout creates a new RedactEventParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRedactEventParamsWithTimeout(timeout time.Duration) *RedactEventParams {
	var ()
	return &RedactEventParams{

		timeout: timeout,
	}
}

// NewRedactEventParamsWithContext creates a new RedactEventParams object
// with the default values initialized, and the ability to set a context for a request
func NewRedactEventParamsWithContext(ctx context.Context) *RedactEventParams {
	var ()
	return &RedactEventParams{

		Context: ctx,
	}
}

// NewRedactEventParamsWithHTTPClient creates a new RedactEventParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRedactEventParamsWithHTTPClient(client *http.Client) *RedactEventParams {
	var ()
	return &RedactEventParams{
		HTTPClient: client,
	}
}

/*RedactEventParams contains all the parameters to send to the API endpoint
for the redact event operation typically these are written to a http.Request
*/
type RedactEventParams struct {

	/*Body*/
	Body RedactEventBody
	/*EventID
	  The ID of the event to redact

	*/
	EventID string
	/*RoomID
	  The room from which to redact the event.

	*/
	RoomID string
	/*TxnID
	  The transaction ID for this event. Clients should generate a
	unique ID; it will be used by the server to ensure idempotency of requests.

	*/
	TxnID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the redact event params
func (o *RedactEventParams) WithTimeout(timeout time.Duration) *RedactEventParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the redact event params
func (o *RedactEventParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the redact event params
func (o *RedactEventParams) WithContext(ctx context.Context) *RedactEventParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the redact event params
func (o *RedactEventParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the redact event params
func (o *RedactEventParams) WithHTTPClient(client *http.Client) *RedactEventParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the redact event params
func (o *RedactEventParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the redact event params
func (o *RedactEventParams) WithBody(body RedactEventBody) *RedactEventParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the redact event params
func (o *RedactEventParams) SetBody(body RedactEventBody) {
	o.Body = body
}

// WithEventID adds the eventID to the redact event params
func (o *RedactEventParams) WithEventID(eventID string) *RedactEventParams {
	o.SetEventID(eventID)
	return o
}

// SetEventID adds the eventId to the redact event params
func (o *RedactEventParams) SetEventID(eventID string) {
	o.EventID = eventID
}

// WithRoomID adds the roomID to the redact event params
func (o *RedactEventParams) WithRoomID(roomID string) *RedactEventParams {
	o.SetRoomID(roomID)
	return o
}

// SetRoomID adds the roomId to the redact event params
func (o *RedactEventParams) SetRoomID(roomID string) {
	o.RoomID = roomID
}

// WithTxnID adds the txnID to the redact event params
func (o *RedactEventParams) WithTxnID(txnID string) *RedactEventParams {
	o.SetTxnID(txnID)
	return o
}

// SetTxnID adds the txnId to the redact event params
func (o *RedactEventParams) SetTxnID(txnID string) {
	o.TxnID = txnID
}

// WriteToRequest writes these params to a swagger request
func (o *RedactEventParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param eventId
	if err := r.SetPathParam("eventId", o.EventID); err != nil {
		return err
	}

	// path param roomId
	if err := r.SetPathParam("roomId", o.RoomID); err != nil {
		return err
	}

	// path param txnId
	if err := r.SetPathParam("txnId", o.TxnID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
