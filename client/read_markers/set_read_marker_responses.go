// Code generated by go-swagger; DO NOT EDIT.

package read_markers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// SetReadMarkerReader is a Reader for the SetReadMarker structure.
type SetReadMarkerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetReadMarkerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetReadMarkerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 429:
		result := NewSetReadMarkerTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetReadMarkerOK creates a SetReadMarkerOK with default headers values
func NewSetReadMarkerOK() *SetReadMarkerOK {
	return &SetReadMarkerOK{}
}

/*SetReadMarkerOK handles this case with default header values.

The read marker, and read receipt if provided, have been updated.
*/
type SetReadMarkerOK struct {
	Payload interface{}
}

func (o *SetReadMarkerOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/read_markers][%d] setReadMarkerOK  %+v", 200, o.Payload)
}

func (o *SetReadMarkerOK) GetPayload() interface{} {
	return o.Payload
}

func (o *SetReadMarkerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetReadMarkerTooManyRequests creates a SetReadMarkerTooManyRequests with default headers values
func NewSetReadMarkerTooManyRequests() *SetReadMarkerTooManyRequests {
	return &SetReadMarkerTooManyRequests{}
}

/*SetReadMarkerTooManyRequests handles this case with default header values.

This request was rate-limited.
*/
type SetReadMarkerTooManyRequests struct {
	Payload *SetReadMarkerTooManyRequestsBody
}

func (o *SetReadMarkerTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/rooms/{roomId}/read_markers][%d] setReadMarkerTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetReadMarkerTooManyRequests) GetPayload() *SetReadMarkerTooManyRequestsBody {
	return o.Payload
}

func (o *SetReadMarkerTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SetReadMarkerTooManyRequestsBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SetReadMarkerBody set read marker body
swagger:model SetReadMarkerBody
*/
type SetReadMarkerBody struct {

	// The event ID the read marker should be located at. The
	// event MUST belong to the room.
	// Required: true
	MFullyRead *string `json:"m.fully_read"`

	// The event ID to set the read receipt location at. This is
	// equivalent to calling ``/receipt/m.read/$elsewhere:example.org``
	// and is provided here to save that extra call.
	MRead string `json:"m.read,omitempty"`
}

// Validate validates this set read marker body
func (o *SetReadMarkerBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMFullyRead(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetReadMarkerBody) validateMFullyRead(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"m.fully_read", "body", o.MFullyRead); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetReadMarkerBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetReadMarkerBody) UnmarshalBinary(b []byte) error {
	var res SetReadMarkerBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SetReadMarkerTooManyRequestsBody The rate limit was reached for this request
swagger:model SetReadMarkerTooManyRequestsBody
*/
type SetReadMarkerTooManyRequestsBody struct {

	// The M_LIMIT_EXCEEDED error code
	// Required: true
	Errcode *string `json:"errcode"`

	// A human-readable error message.
	Error string `json:"error,omitempty"`

	// The amount of time in milliseconds the client should wait
	// before trying the request again.
	RetryAfterMs int64 `json:"retry_after_ms,omitempty"`
}

// Validate validates this set read marker too many requests body
func (o *SetReadMarkerTooManyRequestsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrcode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetReadMarkerTooManyRequestsBody) validateErrcode(formats strfmt.Registry) error {

	if err := validate.Required("setReadMarkerTooManyRequests"+"."+"errcode", "body", o.Errcode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetReadMarkerTooManyRequestsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetReadMarkerTooManyRequestsBody) UnmarshalBinary(b []byte) error {
	var res SetReadMarkerTooManyRequestsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
