// Code generated by go-swagger; DO NOT EDIT.

package read_markers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSetReadMarkerParams creates a new SetReadMarkerParams object
// with the default values initialized.
func NewSetReadMarkerParams() *SetReadMarkerParams {
	var ()
	return &SetReadMarkerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetReadMarkerParamsWithTimeout creates a new SetReadMarkerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetReadMarkerParamsWithTimeout(timeout time.Duration) *SetReadMarkerParams {
	var ()
	return &SetReadMarkerParams{

		timeout: timeout,
	}
}

// NewSetReadMarkerParamsWithContext creates a new SetReadMarkerParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetReadMarkerParamsWithContext(ctx context.Context) *SetReadMarkerParams {
	var ()
	return &SetReadMarkerParams{

		Context: ctx,
	}
}

// NewSetReadMarkerParamsWithHTTPClient creates a new SetReadMarkerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetReadMarkerParamsWithHTTPClient(client *http.Client) *SetReadMarkerParams {
	var ()
	return &SetReadMarkerParams{
		HTTPClient: client,
	}
}

/*SetReadMarkerParams contains all the parameters to send to the API endpoint
for the set read marker operation typically these are written to a http.Request
*/
type SetReadMarkerParams struct {

	/*Body
	  The read marker and optional read receipt locations.

	*/
	Body SetReadMarkerBody
	/*RoomID
	  The room ID to set the read marker in for the user.

	*/
	RoomID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set read marker params
func (o *SetReadMarkerParams) WithTimeout(timeout time.Duration) *SetReadMarkerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set read marker params
func (o *SetReadMarkerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set read marker params
func (o *SetReadMarkerParams) WithContext(ctx context.Context) *SetReadMarkerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set read marker params
func (o *SetReadMarkerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set read marker params
func (o *SetReadMarkerParams) WithHTTPClient(client *http.Client) *SetReadMarkerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set read marker params
func (o *SetReadMarkerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the set read marker params
func (o *SetReadMarkerParams) WithBody(body SetReadMarkerBody) *SetReadMarkerParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the set read marker params
func (o *SetReadMarkerParams) SetBody(body SetReadMarkerBody) {
	o.Body = body
}

// WithRoomID adds the roomID to the set read marker params
func (o *SetReadMarkerParams) WithRoomID(roomID string) *SetReadMarkerParams {
	o.SetRoomID(roomID)
	return o
}

// SetRoomID adds the roomId to the set read marker params
func (o *SetReadMarkerParams) SetRoomID(roomID string) {
	o.RoomID = roomID
}

// WriteToRequest writes these params to a swagger request
func (o *SetReadMarkerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param roomId
	if err := r.SetPathParam("roomId", o.RoomID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
