// Code generated by go-swagger; DO NOT EDIT.

package end_to_end_encryption

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// ClaimKeysReader is a Reader for the ClaimKeys structure.
type ClaimKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ClaimKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewClaimKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewClaimKeysOK creates a ClaimKeysOK with default headers values
func NewClaimKeysOK() *ClaimKeysOK {
	return &ClaimKeysOK{}
}

/*ClaimKeysOK handles this case with default header values.

The claimed keys.
*/
type ClaimKeysOK struct {
	Payload *ClaimKeysOKBody
}

func (o *ClaimKeysOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/keys/claim][%d] claimKeysOK  %+v", 200, o.Payload)
}

func (o *ClaimKeysOK) GetPayload() *ClaimKeysOKBody {
	return o.Payload
}

func (o *ClaimKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ClaimKeysOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ClaimKeysBody claim keys body
swagger:model ClaimKeysBody
*/
type ClaimKeysBody struct {

	// The keys to be claimed. A map from user ID, to a map from
	// device ID to algorithm name.
	// Required: true
	OneTimeKeys map[string]map[string]string `json:"one_time_keys"`

	// The time (in milliseconds) to wait when downloading keys from
	// remote servers. 10 seconds is the recommended default.
	Timeout int64 `json:"timeout,omitempty"`
}

// Validate validates this claim keys body
func (o *ClaimKeysBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOneTimeKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClaimKeysBody) validateOneTimeKeys(formats strfmt.Registry) error {

	for k := range o.OneTimeKeys {

		if err := validate.Required("query"+"."+"one_time_keys"+"."+k, "body", o.OneTimeKeys[k]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClaimKeysBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClaimKeysBody) UnmarshalBinary(b []byte) error {
	var res ClaimKeysBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ClaimKeysOKBody claim keys o k body
swagger:model ClaimKeysOKBody
*/
type ClaimKeysOKBody struct {

	// If any remote homeservers could not be reached, they are
	// recorded here. The names of the properties are the names of
	// the unreachable servers.
	//
	// If the homeserver could be reached, but the user or device
	// was unknown, no failure is recorded. Instead, the corresponding
	// user or device is missing from the ``one_time_keys`` result.
	Failures map[string]interface{} `json:"failures,omitempty"`

	// One-time keys for the queried devices. A map from user ID, to a
	// map from devices to a map from ``<algorithm>:<key_id>`` to the key object.
	//
	// See the `key algorithms <#key-algorithms>`_ section for information
	// on the Key Object format.
	// Required: true
	OneTimeKeys map[string]map[string]string `json:"one_time_keys"`
}

// Validate validates this claim keys o k body
func (o *ClaimKeysOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOneTimeKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClaimKeysOKBody) validateOneTimeKeys(formats strfmt.Registry) error {

	for k := range o.OneTimeKeys {

		if err := validate.Required("claimKeysOK"+"."+"one_time_keys"+"."+k, "body", o.OneTimeKeys[k]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClaimKeysOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClaimKeysOKBody) UnmarshalBinary(b []byte) error {
	var res ClaimKeysOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
