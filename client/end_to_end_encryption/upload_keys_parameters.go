// Code generated by go-swagger; DO NOT EDIT.

package end_to_end_encryption

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadKeysParams creates a new UploadKeysParams object
// with the default values initialized.
func NewUploadKeysParams() *UploadKeysParams {
	var ()
	return &UploadKeysParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadKeysParamsWithTimeout creates a new UploadKeysParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadKeysParamsWithTimeout(timeout time.Duration) *UploadKeysParams {
	var ()
	return &UploadKeysParams{

		timeout: timeout,
	}
}

// NewUploadKeysParamsWithContext creates a new UploadKeysParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadKeysParamsWithContext(ctx context.Context) *UploadKeysParams {
	var ()
	return &UploadKeysParams{

		Context: ctx,
	}
}

// NewUploadKeysParamsWithHTTPClient creates a new UploadKeysParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadKeysParamsWithHTTPClient(client *http.Client) *UploadKeysParams {
	var ()
	return &UploadKeysParams{
		HTTPClient: client,
	}
}

/*UploadKeysParams contains all the parameters to send to the API endpoint
for the upload keys operation typically these are written to a http.Request
*/
type UploadKeysParams struct {

	/*Keys
	  The keys to be published

	*/
	Keys UploadKeysBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload keys params
func (o *UploadKeysParams) WithTimeout(timeout time.Duration) *UploadKeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload keys params
func (o *UploadKeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload keys params
func (o *UploadKeysParams) WithContext(ctx context.Context) *UploadKeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload keys params
func (o *UploadKeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload keys params
func (o *UploadKeysParams) WithHTTPClient(client *http.Client) *UploadKeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload keys params
func (o *UploadKeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeys adds the keys to the upload keys params
func (o *UploadKeysParams) WithKeys(keys UploadKeysBody) *UploadKeysParams {
	o.SetKeys(keys)
	return o
}

// SetKeys adds the keys to the upload keys params
func (o *UploadKeysParams) SetKeys(keys UploadKeysBody) {
	o.Keys = keys
}

// WriteToRequest writes these params to a swagger request
func (o *UploadKeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Keys); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
