// Code generated by go-swagger; DO NOT EDIT.

package end_to_end_encryption

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// UploadKeysReader is a Reader for the UploadKeys structure.
type UploadKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadKeysOK creates a UploadKeysOK with default headers values
func NewUploadKeysOK() *UploadKeysOK {
	return &UploadKeysOK{}
}

/*UploadKeysOK handles this case with default header values.

The provided keys were sucessfully uploaded.
*/
type UploadKeysOK struct {
	Payload *UploadKeysOKBody
}

func (o *UploadKeysOK) Error() string {
	return fmt.Sprintf("[POST /_matrix/client/unstable/keys/upload][%d] uploadKeysOK  %+v", 200, o.Payload)
}

func (o *UploadKeysOK) GetPayload() *UploadKeysOKBody {
	return o.Payload
}

func (o *UploadKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UploadKeysOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UploadKeysBody upload keys body
swagger:model UploadKeysBody
*/
type UploadKeysBody struct {

	// Identity keys for the device. May be absent if no new
	// identity keys are required.
	DeviceKeys struct {

		// The encryption algorithms supported by this device.
		// Required: true
		Algorithms []string `json:"algorithms"`

		// The ID of the device these keys belong to. Must match the device ID used
		// when logging in.
		// Required: true
		DeviceID *string `json:"device_id"`

		// Public identity keys. The names of the properties should be in the
		// format ``<algorithm>:<device_id>``. The keys themselves should be
		// encoded as specified by the key algorithm.
		// Required: true
		Keys map[string]string `json:"keys"`

		// Signatures for the device key object. A map from user ID, to a map from
		// ``<algorithm>:<device_id>`` to the signature.
		//
		// The signature is calculated using the process described at `Signing
		// JSON`_.
		// Required: true
		Signatures map[string]map[string]string `json:"signatures"`

		// The ID of the user the device belongs to. Must match the user ID used
		// when logging in.
		// Required: true
		UserID *string `json:"user_id"`
	} `json:"device_keys,omitempty"`

	// One-time public keys for "pre-key" messages.  The names of
	// the properties should be in the format
	// ``<algorithm>:<key_id>``. The format of the key is determined
	// by the `key algorithm <#key-algorithms>`_.
	//
	// May be absent if no new one-time keys are required.
	OneTimeKeys map[string]string `json:"one_time_keys,omitempty"`
}

// Validate validates this upload keys body
func (o *UploadKeysBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeviceKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadKeysBody) validateDeviceKeys(formats strfmt.Registry) error {

	if swag.IsZero(o.DeviceKeys) { // not required
		return nil
	}

	if err := validate.Required("keys"+"."+"device_keys"+"."+"algorithms", "body", o.DeviceKeys.Algorithms); err != nil {
		return err
	}

	if err := validate.Required("keys"+"."+"device_keys"+"."+"device_id", "body", o.DeviceKeys.DeviceID); err != nil {
		return err
	}

	for k := range o.DeviceKeys.Signatures {

		if err := validate.Required("keys"+"."+"device_keys"+"."+"signatures"+"."+k, "body", o.DeviceKeys.Signatures[k]); err != nil {
			return err
		}

	}

	if err := validate.Required("keys"+"."+"device_keys"+"."+"user_id", "body", o.DeviceKeys.UserID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UploadKeysBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadKeysBody) UnmarshalBinary(b []byte) error {
	var res UploadKeysBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UploadKeysOKBody upload keys o k body
swagger:model UploadKeysOKBody
*/
type UploadKeysOKBody struct {

	// For each key algorithm, the number of unclaimed one-time keys
	// of that type currently held on the server for this device.
	// Required: true
	OneTimeKeyCounts map[string]int64 `json:"one_time_key_counts"`
}

// Validate validates this upload keys o k body
func (o *UploadKeysOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOneTimeKeyCounts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadKeysOKBody) validateOneTimeKeyCounts(formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (o *UploadKeysOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadKeysOKBody) UnmarshalBinary(b []byte) error {
	var res UploadKeysOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
