// Code generated by go-swagger; DO NOT EDIT.

package device_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetDevicesReader is a Reader for the GetDevices structure.
type GetDevicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDevicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDevicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDevicesOK creates a GetDevicesOK with default headers values
func NewGetDevicesOK() *GetDevicesOK {
	return &GetDevicesOK{}
}

/*GetDevicesOK handles this case with default header values.

Device information
*/
type GetDevicesOK struct {
	Payload *GetDevicesOKBody
}

func (o *GetDevicesOK) Error() string {
	return fmt.Sprintf("[GET /_matrix/client/unstable/devices][%d] getDevicesOK  %+v", 200, o.Payload)
}

func (o *GetDevicesOK) GetPayload() *GetDevicesOKBody {
	return o.Payload
}

func (o *GetDevicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDevicesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DevicesItems0 devices items0
swagger:model DevicesItems0
*/
type DevicesItems0 struct {

	// Identifier of this device.
	// Required: true
	DeviceID *string `json:"device_id"`

	// Display name set by the user for this device. Absent if no name has been
	// set.
	DisplayName string `json:"display_name,omitempty"`

	// The IP address where this device was last seen. (May be a few minutes out
	// of date, for efficiency reasons).
	LastSeenIP string `json:"last_seen_ip,omitempty"`

	// The timestamp (in milliseconds since the unix epoch) when this devices
	// was last seen. (May be a few minutes out of date, for efficiency
	// reasons).
	LastSeenTs int64 `json:"last_seen_ts,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DevicesItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		DeviceID *string `json:"device_id"`

		DisplayName string `json:"display_name,omitempty"`

		LastSeenIP string `json:"last_seen_ip,omitempty"`

		LastSeenTs int64 `json:"last_seen_ts,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.DeviceID = dataAO0.DeviceID

	o.DisplayName = dataAO0.DisplayName

	o.LastSeenIP = dataAO0.LastSeenIP

	o.LastSeenTs = dataAO0.LastSeenTs

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DevicesItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		DeviceID *string `json:"device_id"`

		DisplayName string `json:"display_name,omitempty"`

		LastSeenIP string `json:"last_seen_ip,omitempty"`

		LastSeenTs int64 `json:"last_seen_ts,omitempty"`
	}

	dataAO0.DeviceID = o.DeviceID

	dataAO0.DisplayName = o.DisplayName

	dataAO0.LastSeenIP = o.LastSeenIP

	dataAO0.LastSeenTs = o.LastSeenTs

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this devices items0
func (o *DevicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DevicesItems0) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("device_id", "body", o.DeviceID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DevicesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DevicesItems0) UnmarshalBinary(b []byte) error {
	var res DevicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetDevicesOKBody get devices o k body
swagger:model GetDevicesOKBody
*/
type GetDevicesOKBody struct {

	// A list of all registered devices for this user.
	Devices []*DevicesItems0 `json:"devices"`
}

// Validate validates this get devices o k body
func (o *GetDevicesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDevicesOKBody) validateDevices(formats strfmt.Registry) error {

	if swag.IsZero(o.Devices) { // not required
		return nil
	}

	for i := 0; i < len(o.Devices); i++ {
		if swag.IsZero(o.Devices[i]) { // not required
			continue
		}

		if o.Devices[i] != nil {
			if err := o.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDevicesOK" + "." + "devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDevicesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDevicesOKBody) UnmarshalBinary(b []byte) error {
	var res GetDevicesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
