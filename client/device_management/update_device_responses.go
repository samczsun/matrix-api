// Code generated by go-swagger; DO NOT EDIT.

package device_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateDeviceReader is a Reader for the UpdateDevice structure.
type UpdateDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateDeviceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateDeviceOK creates a UpdateDeviceOK with default headers values
func NewUpdateDeviceOK() *UpdateDeviceOK {
	return &UpdateDeviceOK{}
}

/*UpdateDeviceOK handles this case with default header values.

The device was successfully updated.
*/
type UpdateDeviceOK struct {
	Payload interface{}
}

func (o *UpdateDeviceOK) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/unstable/devices/{deviceId}][%d] updateDeviceOK  %+v", 200, o.Payload)
}

func (o *UpdateDeviceOK) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeviceNotFound creates a UpdateDeviceNotFound with default headers values
func NewUpdateDeviceNotFound() *UpdateDeviceNotFound {
	return &UpdateDeviceNotFound{}
}

/*UpdateDeviceNotFound handles this case with default header values.

The current user has no device with the given ID.
*/
type UpdateDeviceNotFound struct {
}

func (o *UpdateDeviceNotFound) Error() string {
	return fmt.Sprintf("[PUT /_matrix/client/unstable/devices/{deviceId}][%d] updateDeviceNotFound ", 404)
}

func (o *UpdateDeviceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*UpdateDeviceBody update device body
swagger:model UpdateDeviceBody
*/
type UpdateDeviceBody struct {

	// The new display name for this device. If not given, the
	// display name is unchanged.
	DisplayName string `json:"display_name,omitempty"`
}

// Validate validates this update device body
func (o *UpdateDeviceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
